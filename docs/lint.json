[
  {
    "name": "sendAlarmCmd",
    "filePath": "src/alarms/alarms.js",
    "lines": [
      {
        "lineNumber": 45,
        "line": "/**"
      },
      {
        "lineNumber": 46,
        "line": " * Close given alarm of given hub"
      },
      {
        "lineNumber": 47,
        "line": " * @param  {string} hubI"
      },
      {
        "lineNumber": 48,
        "line": " * @param  {Object} alarm"
      },
      {
        "lineNumber": 49,
        "line": " */"
      },
      {
        "lineNumber": 50,
        "line": ""
      },
      {
        "lineNumber": 51,
        "line": "export function sendAlarmCmd(hubId, commandType, data) {"
      }
    ],
    "codeParams": [
      "hubId",
      "commandType",
      "data"
    ],
    "docParams": [
      "hubI",
      "alarm"
    ]
  },
  {
    "name": "removeAlarm",
    "filePath": "src/alarms/alarms.js",
    "lines": [
      {
        "lineNumber": 109,
        "line": "/**"
      },
      {
        "lineNumber": 110,
        "line": " * Remove given alarm of given hub"
      },
      {
        "lineNumber": 111,
        "line": " * @param  {string} hubId"
      },
      {
        "lineNumber": 112,
        "line": " * @param  {Object} room"
      },
      {
        "lineNumber": 113,
        "line": " */"
      },
      {
        "lineNumber": 114,
        "line": "export async function removeAlarm(hubId, alarm) {"
      }
    ],
    "codeParams": [
      "hubId",
      "alarm"
    ],
    "docParams": [
      "hubId",
      "room"
    ]
  },
  {
    "name": "alarmsDeltaHandler",
    "filePath": "src/alarms/alarms.js",
    "lines": [
      {
        "lineNumber": 158,
        "line": "/**"
      },
      {
        "lineNumber": 159,
        "line": " * Alarms handler for poll delta results"
      },
      {
        "lineNumber": 160,
        "line": " * @param  {string} hubId"
      },
      {
        "lineNumber": 161,
        "line": " * @param  {boolean} reset"
      },
      {
        "lineNumber": 162,
        "line": " * @param  {Object} rooms"
      },
      {
        "lineNumber": 163,
        "line": " */"
      },
      {
        "lineNumber": 164,
        "line": "export function alarmsDeltaHandler(hubId, reset, alarms) {"
      }
    ],
    "codeParams": [
      "hubId",
      "reset",
      "alarms"
    ],
    "docParams": [
      "hubId",
      "reset",
      "rooms"
    ]
  },
  {
    "name": "setHubConnectionState",
    "filePath": "src/connection/state.js",
    "lines": [
      {
        "lineNumber": 25,
        "line": "/**"
      },
      {
        "lineNumber": 26,
        "line": " * Change hub connection state"
      },
      {
        "lineNumber": 27,
        "line": " * @param {{hubId: string, state: HUB_CONNECTION_STATE_TYPE}} hubAndState - hubId and new state"
      },
      {
        "lineNumber": 28,
        "line": " */"
      },
      {
        "lineNumber": 29,
        "line": "export function setHubConnectionState(paramHubAndState) {"
      }
    ],
    "codeParams": [
      "paramHubAndState"
    ],
    "docParams": [
      "hubAndState"
    ]
  },
  {
    "name": "sendDeviceCmd",
    "filePath": "src/devices/device.js",
    "lines": [
      {
        "lineNumber": 60,
        "line": "/**"
      },
      {
        "lineNumber": 61,
        "line": " * General device command to be sent"
      },
      {
        "lineNumber": 62,
        "line": " * @param  {string} hubId"
      },
      {
        "lineNumber": 63,
        "line": " * @param  {string} deviceId"
      },
      {
        "lineNumber": 64,
        "line": " * @param  {Object} state"
      },
      {
        "lineNumber": 65,
        "line": " * @param  {Array<string>} properties - optional properties"
      },
      {
        "lineNumber": 66,
        "line": " * @return {Promise}"
      },
      {
        "lineNumber": 67,
        "line": " */"
      },
      {
        "lineNumber": 68,
        "line": "export function sendDeviceCmd(hubId, deviceId, commandType, data, properties) {"
      }
    ],
    "codeParams": [
      "hubId",
      "deviceId",
      "commandType",
      "data",
      "properties"
    ],
    "docParams": [
      "hubId",
      "deviceId",
      "state",
      "properties"
    ]
  },
  {
    "name": "setDeviceMeta",
    "filePath": "src/devices/device.js",
    "lines": [
      {
        "lineNumber": 141,
        "line": "/**"
      },
      {
        "lineNumber": 142,
        "line": " * Identify device"
      },
      {
        "lineNumber": 143,
        "line": " * @param  {string} hubId"
      },
      {
        "lineNumber": 144,
        "line": " * @param  {string} deviceId"
      },
      {
        "lineNumber": 145,
        "line": " * @param  {string} name"
      },
      {
        "lineNumber": 146,
        "line": " * @param  {Array<string>} roomId"
      },
      {
        "lineNumber": 147,
        "line": " * @return {Promise}"
      },
      {
        "lineNumber": 148,
        "line": " */"
      },
      {
        "lineNumber": 149,
        "line": "export function setDeviceMeta(hubId, deviceId, name, rooms) {"
      }
    ],
    "codeParams": [
      "hubId",
      "deviceId",
      "name",
      "rooms"
    ],
    "docParams": [
      "hubId",
      "deviceId",
      "name",
      "roomId"
    ]
  },
  {
    "name": "connectHubByTokens",
    "filePath": "src/hubs/hubs.js",
    "lines": [
      {
        "lineNumber": 666,
        "line": "/**"
      },
      {
        "lineNumber": 667,
        "line": " * Connect to the given hub - local or remote."
      },
      {
        "lineNumber": 668,
        "line": " * @param  {string} hubId"
      },
      {
        "lineNumber": 669,
        "line": " * @param  {string} hubKey"
      },
      {
        "lineNumber": 670,
        "line": " * @param  {boolean} true to wait local hubs reply, false to start with remote connection"
      },
      {
        "lineNumber": 671,
        "line": " * @return {Promise} current hubs, should not reject never"
      },
      {
        "lineNumber": 672,
        "line": " */"
      },
      {
        "lineNumber": 673,
        "line": "export function connectHubByTokens(hubId, hubKey, sync = true) {"
      }
    ],
    "codeParams": [
      "hubId",
      "hubKey",
      "sync"
    ],
    "docParams": [
      "hubId",
      "hubKey",
      "true"
    ]
  },
  {
    "name": "getTextFromNode",
    "filePath": "src/utils.js",
    "lines": [
      {
        "lineNumber": 33,
        "line": "/**"
      },
      {
        "lineNumber": 34,
        "line": " * Helper method to strip HTML presentation from string"
      },
      {
        "lineNumber": 35,
        "line": " * @param  {string} html - HTML presentation"
      },
      {
        "lineNumber": 36,
        "line": " * @return {string}  - text string"
      },
      {
        "lineNumber": 37,
        "line": " */"
      },
      {
        "lineNumber": 38,
        "line": "export function getTextFromNode(givenHTML) {"
      }
    ],
    "codeParams": [
      "givenHTML"
    ],
    "docParams": [
      "html"
    ]
  }
]
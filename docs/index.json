[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/alarms/alarms.js",
    "content": "// \nimport isEmpty from 'lodash/isEmpty';\n// import isArray from 'lodash/isArray';\n// import pick from 'lodash/pick';\nimport { store } from '../store';\nimport { alarmsState } from '../reducers/alarms';\nimport { hubsState } from '../reducers/hubs';\nimport { userState } from '../reducers/user';\nimport { b64DecodeUnicode, getTextFromNode } from '../utils';\nimport { send, COMMANDS } from '../connection/send';\nimport { HUB_CONNECTION_STATES, isOneCloud } from '../connection/constants';\n\n\nconst initAlarm = (alarm) => {\n  const givenAlarm = alarm;\n  if (alarm.message) {\n    givenAlarm.messageHTML = b64DecodeUnicode(alarm.message);\n    givenAlarm.messageTxt = getTextFromNode(givenAlarm.message);\n  }\n  return givenAlarm;\n};\n\n/**\n * Get alarms of all selected hubs\n * @return {HUB_ALARMS_MAP_TYPE}\n */\nexport function getAlarms() {\n  const stateNow = store.getState();\n  return alarmsState.selectors.getAlarms(stateNow);\n}\n\n/**\n * Get alarms of given hub\n * @param  {string} hubId\n * @return {ROOMS_MAP_TYPE}\n */\nexport function getHubAlarms(hubId) {\n  let retVal;\n  const alarms = getAlarms();\n  if (alarms && alarms[hubId]) {\n    retVal = alarms[hubId];\n  }\n  return retVal;\n}\n\n\n/**\n * Close given alarm of given hub\n * @param  {string} hubI\n * @param  {Object} alarm\n */\n\nexport function sendAlarmCmd(hubId, commandType, data) {\n  return new Promise((resolve, reject) => {\n    const stateNow = store.getState();\n    const user = userState.selectors.getUser(stateNow);\n\n    if (!user || !user.authKey) {\n      console.error('SDK closeAlarm error: No userKey!');\n      reject(new Error('Alarm command error: No userKey!'));\n      return;\n    }\n\n    const hubs = hubsState.selectors.getHubs(stateNow);\n    const hub = hubs[hubId];\n    const { hubKey } = hubs[hubId];\n    if (!hub || (!hubKey && !isOneCloud())) {\n      console.error('SDK closeAlarm error: No hubKey!');\n      reject(new Error('Alarm command error: No hubKey!'));\n      return;\n    }\n\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.error('SDK closeAlarm error: No Hub connection');\n      reject(new Error('Alarm command error: No hub connection'));\n      return;\n    }\n\n    const { authKey } = user;\n    if (!authKey) {\n      console.error('SDK closeAlarm error: No authKey!');\n      reject(new Error('Alarm command error: No authKey!'));\n      return;\n    }\n\n    send({\n      command: commandType, authKey, hubId, localUrl: hub.url, hubKey, data,\n    })\n      .then((status) => {\n        console.debug('SDK sendAlarmCmd ok', status);\n        send({\n          command: COMMANDS.CMD_GET_ALARMS, authKey, hubId, localUrl: hub.url, hubKey,\n        })\n          .then((alarms) => {\n            console.debug('SDK sendAlarmCmd refresh alarms ok', alarms);\n            store.dispatch(alarmsState.actions.setRooms({ hubId, alarms }));\n            resolve(alarms);\n          })\n          .catch((error) => {\n            console.error('SDK Alarm command error:', error);\n            reject(error);\n          });\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n}\n\n\n/**\n * Remove given alarm of given hub\n * @param  {string} hubId\n * @param  {Object} room\n */\nexport async function removeAlarm(hubId, alarm) {\n  const givenAlarm = alarm;\n  return new Promise((resolve, reject) => {\n    sendAlarmCmd(hubId, COMMANDS.CMD_REMOVE_ALARM, { alarmId: givenAlarm.id })\n      .then((alarms) => {\n        /*\n        givenAlarm.closed = true;\n        const stateAlarm = {\n          hubId,\n          alarmId: givenAlarm.id,\n        };\n        store.dispatch(alarmsState.actions.removeAlarm(stateAlarm));\n        resolve(getAlarms());\n        */\n        resolve(alarms);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n}\n\nexport async function closeAlarm(hubId, alarm) {\n  const givenAlarm = alarm;\n  return new Promise((resolve, reject) => {\n    sendAlarmCmd(hubId, COMMANDS.CMD_CLOSE_ALARM, { alarmId: givenAlarm.id })\n      .then((alarms) => {\n        /*\n        givenAlarm.closed = true;\n        const stateAlarm = {\n          hubId,\n          alarmId: givenAlarm.id,\n        };\n        store.dispatch(alarmsState.actions.setAlarm(stateAlarm));\n        resolve(getAlarms());\n        */\n        resolve(alarms);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n}\n\n/**\n * Alarms handler for poll delta results\n * @param  {string} hubId\n * @param  {boolean} reset\n * @param  {Object} rooms\n */\nexport function alarmsDeltaHandler(hubId, reset, alarms) {\n  let oldHubAlarms = {};\n  const storedAlarms = getAlarms();\n  if (storedAlarms && storedAlarms[hubId]) {\n    oldHubAlarms = storedAlarms[hubId];\n  }\n\n  if (reset) {\n    // If reset then set alarms as they are received\n    const alarmsToBeSet = {};\n    if (!isEmpty(alarms)) {\n      Object.entries(alarms).forEach(([key, alarm]) => {\n        alarmsToBeSet[key] = initAlarm(alarm);\n      });\n    }\n    const stateAlarms = {\n      hubId,\n      alarms: alarmsToBeSet,\n    };\n    store.dispatch(alarmsState.actions.setAlarms(stateAlarms));\n  } else if (!isEmpty(alarms)) {\n    // Loop alarms to check could it be added or should be removed\n    Object.entries(alarms).forEach(([key, alarm]) => {\n      if (key && alarm) {\n        const stateAlarm = {\n          hubId,\n          alarm: initAlarm(alarm),\n        };\n        store.dispatch(alarmsState.actions.setAlarm(stateAlarm));\n      } else if (key && oldHubAlarms[key]) {\n        store.dispatch(alarmsState.actions.removeAlarm({ hubId, alarmId: key }));\n      }\n    });\n  }\n}\n\nconst initAlert = (alert) => {\n  const givenAlert = alert;\n  if (alert.error) {\n    givenAlert.level = 'err';\n  }\n  if (alert.cleared) {\n    givenAlert.closed = true;\n  }\n  if (alert.message) {\n    givenAlert.title = getTextFromNode(givenAlert.message);\n  }\n  return givenAlert;\n};\n\nexport function alertsDeltaHandler(hubId, reset, alerts) {\n  let oldHubAlerts = {};\n  const storedAlerts = getAlarms();\n  if (storedAlerts && storedAlerts[hubId]) {\n    oldHubAlerts = storedAlerts[hubId];\n  }\n  /*\n  if (reset) {\n    // If reset then set alerts as they are received\n    const alertsToBeSet = {};\n    if (!isEmpty(alerts)) {\n      Object.entries(alerts).forEach(([key, alert:ALERTS_MAP_TYPE]) => {\n        alertsToBeSet[key] = initAlert(alert); //?\n      });\n    }\n    const stateAlert = {\n      hubId,\n      alarms: alertsToBeSet,\n    };\n    store.dispatch(alarmsState.actions.setAlarms(stateAlert));\n  } else\n  */\n  if (!isEmpty(alerts)) {\n    // Loop alerts to check could it be added or should be removed\n    Object.entries(alerts).forEach(([key, alert]) => {\n      if (key && alert) {\n        const stateAlert = {\n          hubId,\n          alarm: initAlert(alert),\n        };\n        store.dispatch(alarmsState.actions.setAlarm(stateAlert));\n      } else if (key && oldHubAlerts[key]) {\n        // console.info(`Remove Alert ${key}`);\n        store.dispatch(alarmsState.actions.removeAlarm({ hubId, alarmId: key }));\n      }\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/alarms/alarms.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "initAlarm",
    "memberof": "src/alarms/alarms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/alarms/alarms.js~initAlarm",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/alarms/alarms.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "alarm",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "getAlarms",
    "memberof": "src/alarms/alarms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/alarms/alarms.js~getAlarms",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/alarms/alarms.js",
    "importStyle": "{getAlarms}",
    "description": "Get alarms of all selected hubs",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "HUB_ALARMS_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "getHubAlarms",
    "memberof": "src/alarms/alarms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/alarms/alarms.js~getHubAlarms",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/alarms/alarms.js",
    "importStyle": "{getHubAlarms}",
    "description": "Get alarms of given hub",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ROOMS_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "sendAlarmCmd",
    "memberof": "src/alarms/alarms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/alarms/alarms.js~sendAlarmCmd",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/alarms/alarms.js",
    "importStyle": "{sendAlarmCmd}",
    "description": "Close given alarm of given hub",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubI",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "alarm",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "removeAlarm",
    "memberof": "src/alarms/alarms.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/alarms/alarms.js~removeAlarm",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/alarms/alarms.js",
    "importStyle": "{removeAlarm}",
    "description": "Remove given alarm of given hub",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "closeAlarm",
    "memberof": "src/alarms/alarms.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/alarms/alarms.js~closeAlarm",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/alarms/alarms.js",
    "importStyle": "{closeAlarm}",
    "description": "",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alarm",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "alarmsDeltaHandler",
    "memberof": "src/alarms/alarms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/alarms/alarms.js~alarmsDeltaHandler",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/alarms/alarms.js",
    "importStyle": "{alarmsDeltaHandler}",
    "description": "Alarms handler for poll delta results",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rooms",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "initAlert",
    "memberof": "src/alarms/alarms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/alarms/alarms.js~initAlert",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/alarms/alarms.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [
      {
        "name": "alert",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "alertsDeltaHandler",
    "memberof": "src/alarms/alarms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/alarms/alarms.js~alertsDeltaHandler",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/alarms/alarms.js",
    "importStyle": "{alertsDeltaHandler}",
    "description": "",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alerts",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/alarms/constants.js",
    "content": "// \n\n/*\nclosed: false\ncreatedAtMs: 1573477740542\nid: \"f9fbd96b-f436-44f8-ba11-4be7aee1238a\"\nlevel: \"err\"\n// eslint-disable-next-line\nmessage: \"\"\nname: \"LT Security Alarm\"\nsourceId: \"b0d685d8-5270-411b-8d1e-2c45c31c8f07\"\ntimestamp: 1573477740542\ntitle: \"Murtohälytys\"\ntype: \"USER_ALARM\"\n*/\n\n\n/*\n \"a7fd5286-9649-4967-8b3b-235a05654a87\":\n      \"id\":\"a7fd5286-9649-4967-8b3b-235a05654a87\",\n      \"error\":true,\n      \"cleared\":false,\n      \"message\":\"K\\u00e4ytt\\u00e4j\\u00e4tunnus ja salasana eiv\\u00e4t kelpaa\",\n      \"realtimeMs\":1460110656169,\n      \"sourceId\":\"a3f129ee-1991-4932-b7a1-1abce240ae19\",\n      \"timestamp\":1460110703049,\n      \"type\":\"ALERT\"\n    \"type\":\"USER_ALERTS\"\n*/\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/alarms/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/connection/constants.js",
    "content": "// \nimport { isNode } from '../utils';\n\n/*\n* Cloud servers SSL cretification fingerprints to be checked if possible\n* Fingerprint could be found by opening the server URL like https://testapi.cozify.fi/ui/0.2/hub/lan_ip in Chrome.\n* Then click the green certificate in front of the URL, click 'Connection', 'Certificate details', expand the details\n* and scroll down to the SHA1 fingerprint.\n* testapi 91 30 CF 20 17 F7 D7 EC F7 BA 43 30 8E 19 83 B4 CF DE 5A CC\n* cloud & cloud2 26 B0 20 FA AB E8 A3 81 63 37 C6 B7 EF 94 4D 40 3D 1B 85 10\n*/\nexport const CLOUD_FINGERPRINTS_SHA1 = [\n  '91 30 CF 20 17 F7 D7 EC F7 BA 43 30 8E 19 83 B4 CF DE 5A CC',\n  '26 B0 20 FA AB E8 A3 81 63 37 C6 B7 EF 94 4D 40 3D 1B 85 10',\n];\n\n/* Cloud HTTPS host name */\nconst CLOUD_HOST = 'https://api.cozify.fi';\nconst CLOUD_HOST_TEST = 'https://testapi.cozify.fi';\n\n\nconst ONE_HOST = 'https://one.cozify.fi';\nconst ONE_HOST_DEV = 'https://one.dev.cozify.fi';\n\n\n/* Cloud API VERSION */\nexport const CLOUD_API_VERSION = 'ui/0.2/';\n\n\nlet cloudHost = CLOUD_HOST;\n\n/**\n * Method to set Cozify test-cloud as an cloud API host.\n * Must be called at the early stage of SDK usage, otherwise production\n * cloud is used.\n *\n * @return {[type]} [description]\n */\nexport function useTestcloud() {\n  cloudHost = CLOUD_HOST_TEST;\n}\n\nexport function selectCloud(host) {\n  cloudHost = host;\n}\n\nexport function getCloudHost() {\n  return cloudHost;\n}\n\nexport function isOneCloud() {\n  if (cloudHost.indexOf(ONE_HOST) !== -1 || cloudHost.indexOf(ONE_HOST_DEV) !== -1) {\n    return true;\n  }\n  return false;\n}\n\nexport function getCloudURL() {\n  if (cloudHost.indexOf('/site/') === -1) {\n    return `${cloudHost}/${CLOUD_API_VERSION}`;\n  }\n  return `${cloudHost}`;\n}\n\nexport const MAX_API_VERSION = '1.13';\n/**\n *  Enumeration of supported API commands, that could be\n *  USER_LOGIN, HUB_KEYS, REFRESH_AUTHKEY, CLOUD_IP, CLOUD_META, POLL, CMD_DEVICE\n *  @typedef {Object} COMMANDS_TYPE\n *  @readonly\n *\n  */\nexport const COMMANDS = Object.freeze({\n  USER_LOGIN: {\n    method: 'POST', url: 'user/login', params: ['password', 'email'], config: { responseType: isNode ? 'blob' : 'stream', timeout: 15000 },\n  },\n  HUB_KEYS: { method: 'GET', url: 'user/hubkeys', timeout: 15000 },\n  HUB_LOCK_BACKUP: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/lockconfig' },\n  REFRESH_AUTHKEY: { method: 'GET', url: 'user/refreshsession' },\n  CLOUD_IP: { method: 'GET', url: 'hub/lan_ip' },\n  CLOUD_META: { method: 'GET', url: 'hub/remote/hub' },\n  POLL: { method: 'GET', url: 'hub/remote/cc/$API_VER/hub/poll', urlParams: ['ts'] },\n  PAIR_START: { method: 'GET', url: 'hub/remote/cc/$API_VER/hub/scan', urlParams: ['ts'] },\n  PAIR_IGNORE: {\n    method: 'PUT', url: 'hub/remote/cc/$API_VER/hub/scan', type: 'SET_SCAN_RESULT', params: ['id', 'ignored'],\n  },\n  PAIR_STOP: { method: 'GET', url: 'hub/remote/cc/$API_VER/hub/stopscan' },\n  CMD_DEVICE_STATE: {\n    method: 'PUT', url: 'hub/remote/cc/$API_VER/devices/command', type: 'CMD_DEVICE', params: ['id', 'state'],\n  },\n  CMD_DEVICE_IGNORE: {\n    method: 'PUT', url: 'hub/remote/cc/$API_VER/devices/command', type: 'CMD_IGNORE_DEVICE', params: ['id'],\n  },\n  CMD_DEVICE_VISIBILITY: {\n    method: 'PUT', url: 'hub/remote/cc/$API_VER/devices', type: 'CMD_DEVICE_VISIBLE', params: ['id', 'visible'],\n  },\n  CMD_DEVICE_LOCK: {\n    method: 'PUT', url: 'hub/remote/cc/$API_VER/devices', type: 'CMD_DEVICE_LOCK', params: ['id', 'locked'],\n  },\n  CMD_DEVICE_HOT_WATER: {\n    method: 'PUT', url: 'hub/remote/cc/$API_VER/devices/command', type: 'CMD_DEVICE_META', params: ['id', 'locked'],\n  },\n  CMD_DEVICE_IDENTIFY: {\n    method: 'PUT', url: 'hub/remote/cc/$API_VER/devices/command', type: 'CMD_IDENTIFY', params: ['id'],\n  },\n  CMD_DEVICE_META: {\n    method: 'PUT', url: 'hub/remote/cc/$API_VER/devices/command', type: 'CMD_DEVICE_META', params: ['id', 'name', 'room'],\n  },\n  CMD_GET_ROOMS: { method: 'GET', url: 'hub/remote/cc/$API_VER/rooms' },\n  CMD_SET_ROOM: {\n    method: 'PUT', url: 'hub/remote/cc/$API_VER/rooms', type: 'CMD_ROOM', params: ['id', 'name', 'order'],\n  },\n  CMD_REMOVE_ROOM: { method: 'DELETE', url: 'hub/remote/cc/$API_VER/rooms', urlParams: ['roomId'] },\n  CMD_GET_ALARMS: { method: 'GET', url: 'hub/remote/cc/$API_VER/alarms' },\n  CMD_CLOSE_ALARM: { method: 'PUT', url: 'hub/remote/cc/$API_VER/alarms/close', urlParams: ['alarmId'] },\n  CMD_REMOVE_ALARM: { method: 'DELETE', url: 'hub/remote/cc/$API_VER/alarms', urlParams: ['roomId'] },\n  GET_MODBUS_DEVICE_PAIRINGS: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'GET_MODBUS_PAIRINGS' },\n  SET_MODBUS_DEVICE_PAIRINGS: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'PAIR_MODBUS' },\n  ZWAVE_START_INCLUSION: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'ZWAVE_START_INCLUSION' },\n  ZWAVE_STOP_INCLUSION: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'ZWAVE_CANCEL_INCLUSION' },\n  ZWAVE_START_EXCLUSION: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'ZWAVE_START_EXCLUSION' },\n  ZWAVE_STOP_EXCLUSION: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'ZWAVE_CANCEL_EXCLUSION' },\n  ZWAVE_INCLUSION_STATUS: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'GET_ZWAVE_INCLUSION_STATUS' },\n  ZWAVE_EXCLUSION_STATUS: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'GET_ZWAVE_EXCLUSION_STATUS' },\n  ZWAVE_HEAL: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'ZWAVE_HEAL' },\n  ZWAVE_GET_NODES: { method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'ZWAVE_GET_NODES' },\n  ZWAVE_CHECK_IS_FAILED_NODE: {\n    method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'ZWAVE_CHECK_FAILED', params: ['nodeId'], timeout: 30000,\n  },\n  ZWAVE_REMOVE_FAILED_NODE: {\n    method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'ZWAVE_REMOVE_FAILED', params: ['nodeId'], timeout: 30000,\n  },\n  ZWAVE_GET_NODE_CONFIGURATION: {\n    method: 'POST', url: 'hub/remote/cc/$API_VER/hub/protocolconfig', type: 'ZWAVE_UI_GET_CONFIGURATION', params: ['nodeId', 'parameter'], timeout: 30000,\n  },\n  ZWAVE_SET_NODE_CONFIGURATION: {\n    method: 'POST',\n    url: 'hub/remote/cc/$API_VER/hub/protocolconfig',\n    type: 'ZWAVE_UI_SET_CONFIGURATION',\n    params: ['nodeId', 'parameter', 'size', 'default', 'value'],\n    timeout: 30000,\n  },\n  CMD_LIST_PLANS: {\n    method: 'GET', url: 'plans',\n  },\n  CMD_GET_PLAN: {\n    method: 'GET', url: 'plans',\n  },\n  CMD_SAVE_PLAN: {\n    method: 'POST', url: 'plans', params: ['templates', 'installations', 'locations'],\n  },\n});\n\n\n\n// type dataArray = ?Array<{ [key: string | number]: any }>\n// type dataObject = ?{ [key: string | number]: any }\n\n/**\n * COMMAND_TYPE\n *  @typedef {Object} COMMANDS_TYPE\n *  @property {COMMANDS_TYPE} [command]   - Optional command like USER_LOGIN,\n *  @property {string} [localUrl]         - Optional localUrl for direct hub access\n *  @property {string} [url]              - Optional url\n *  @property {number} [timeout]          - Optional timeout\n *  @property {string} [method]           - Optional method\n *  @property {string} [authKey]          - Optional authKey\n *  @property {string} [hubKey]           - Optional hubKey\n *  @property {Object} [config]           - Optional config that might have 'timeout' or 'responseType' configs to be used over defaults,\n *  @property {Object} [data]             - Optional data to be sent over url or body parameters (depending command)\n *  @property {string} [type]             - Optional type that defaults to 'application/json',\n *  @property {string} [hubId]            - Optional hub Id when messaging to hub\n */\n\n/**\n  * Enumeration of cloud connection state, that could be\n  * UNCONNECTED, UNAUTHENTICATED, UNAUTHORIZED, OBSOLETE_API_VERSION, LATE_PAYMENT or CONNECTED\n  * @readonly\n  * @enum {string}\n  * @typedef {string} CLOUD_CONNECTION_STATE_TYPE\n  */\nexport const CLOUD_CONNECTION_STATES = Object.freeze({\n  UNCONNECTED: 'no connection',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  OBSOLETE_API_VERSION: 'obsolete api version',\n  LATE_PAYMENT: 'late payment',\n  CONNECTED: 'connected',\n});\n\n\n/**\n  * Enumeration of HUB connection state, that could be\n  * UNCONNECTED, UNAUTHENTICATED, UNAUTHORIZED, OBSOLETE_API_VERSION, REMOTE or LOCAL\n  * @readonly\n  * @enum {string}\n  * @typedef {string} HUB_CONNECTION_STATE_TYPE\n  */\nexport const HUB_CONNECTION_STATES = Object.freeze({\n  UNCONNECTED: 'no connection',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  OBSOLETE_API_VERSION: 'obsolete api version',\n  REMOTE: 'remote',\n  LOCAL: 'local',\n});\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "CLOUD_FINGERPRINTS_SHA1",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_FINGERPRINTS_SHA1",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{CLOUD_FINGERPRINTS_SHA1}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "CLOUD_HOST",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_HOST",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "CLOUD_HOST_TEST",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_HOST_TEST",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "ONE_HOST",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~ONE_HOST",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "ONE_HOST_DEV",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~ONE_HOST_DEV",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "CLOUD_API_VERSION",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_API_VERSION",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{CLOUD_API_VERSION}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "cloudHost",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~cloudHost",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "useTestcloud",
    "memberof": "src/connection/constants.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/constants.js~useTestcloud",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{useTestcloud}",
    "description": "Method to set Cozify test-cloud as an cloud API host.\nMust be called at the early stage of SDK usage, otherwise production\ncloud is used.",
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "params": []
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "selectCloud",
    "memberof": "src/connection/constants.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/constants.js~selectCloud",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{selectCloud}",
    "description": "",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "host",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "getCloudHost",
    "memberof": "src/connection/constants.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/constants.js~getCloudHost",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{getCloudHost}",
    "description": "",
    "lineNumber": 47,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "isOneCloud",
    "memberof": "src/connection/constants.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/constants.js~isOneCloud",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{isOneCloud}",
    "description": "",
    "lineNumber": 51,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "getCloudURL",
    "memberof": "src/connection/constants.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/constants.js~getCloudURL",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{getCloudURL}",
    "description": "",
    "lineNumber": 58,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "MAX_API_VERSION",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~MAX_API_VERSION",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{MAX_API_VERSION}",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "typedef",
    "name": "COMMANDS_TYPE",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~COMMANDS_TYPE",
    "access": "public",
    "description": " Enumeration of supported API commands, that could be\n USER_LOGIN, HUB_KEYS, REFRESH_AUTHKEY, CLOUD_IP, CLOUD_META, POLL, CMD_DEVICE",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "COMMANDS_TYPE"
    }
  },
  {
    "__docId__": 74,
    "kind": "typedef",
    "name": "COMMANDS_TYPE",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~COMMANDS_TYPE",
    "access": "public",
    "description": "COMMAND_TYPE",
    "properties": [
      {
        "nullable": null,
        "types": [
          "COMMANDS_TYPE"
        ],
        "spread": false,
        "optional": true,
        "name": "command",
        "description": "Optional command like USER_LOGIN,"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "localUrl",
        "description": "Optional localUrl for direct hub access"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "url",
        "description": "Optional url"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "timeout",
        "description": "Optional timeout"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "method",
        "description": "Optional method"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "authKey",
        "description": "Optional authKey"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "hubKey",
        "description": "Optional hubKey"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "config",
        "description": "Optional config that might have 'timeout' or 'responseType' configs to be used over defaults,"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "Optional data to be sent over url or body parameters (depending command)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "Optional type that defaults to 'application/json',"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "hubId",
        "description": "Optional hub Id when messaging to hub"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "COMMANDS_TYPE"
    }
  },
  {
    "__docId__": 75,
    "kind": "typedef",
    "name": "CLOUD_CONNECTION_STATE_TYPE",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_CONNECTION_STATE_TYPE",
    "access": "public",
    "description": "Enumeration of cloud connection state, that could be\nUNCONNECTED, UNAUTHENTICATED, UNAUTHORIZED, OBSOLETE_API_VERSION, LATE_PAYMENT or CONNECTED",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "CLOUD_CONNECTION_STATE_TYPE"
    }
  },
  {
    "__docId__": 76,
    "kind": "typedef",
    "name": "HUB_CONNECTION_STATE_TYPE",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~HUB_CONNECTION_STATE_TYPE",
    "access": "public",
    "description": "Enumeration of HUB connection state, that could be\nUNCONNECTED, UNAUTHENTICATED, UNAUTHORIZED, OBSOLETE_API_VERSION, REMOTE or LOCAL",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "HUB_CONNECTION_STATE_TYPE"
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/connection/send-retry.js",
    "content": "// import isRetryAllowed from 'is-retry-allowed';\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\nconst ALL_HTTP_METHODS = IDEMPOTENT_HTTP_METHODS.concat(['post']);\n\n/*\n * @param  {Error}  error\n * @return {boolean}\n\nfunction isNetworkError(error) {\n  return (\n    !error.response\n    && isRetryAllowed(error) // Prevents retrying unsafe errors\n    && !(Boolean(error.code) && error.code === 'ECONNABORTED') // Prevents retrying timed out requests\n  );\n}\n*/\n\n/*\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isRetryableError(error) {\n  /*\n  return (\n    error.code !== 'ECONNABORTED'\n    && (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n  */\n  return (\n    (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n}\n\n/*\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n  return isRetryableError(error) && ALL_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\nconst httpRetries = {};\nconst RETRY_COUNT = 2;\n\nexport function resetRetry(url) {\n  if (httpRetries[url]) {\n    console.warn('resetRetry to 0');\n    httpRetries[url] = 0;\n    delete httpRetries[url];\n  }\n}\n/*\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function retryCondition(error) {\n  // if (error.config.url.indexOf('192.168.1.119') !== -1) debugger;\n  if (error && error.config && error.config.url) {\n    if (httpRetries[error.config.url]) {\n      if (httpRetries[error.config.url] >= RETRY_COUNT) {\n        httpRetries[error.config.url] = 0;\n        console.error('retryCondition count >', RETRY_COUNT);\n        return false;\n      }\n      httpRetries[error.config.url] += httpRetries[error.config.url];\n      console.info('retryCondition count set ', httpRetries[error.config.url]);\n    } else {\n      httpRetries[error.config.url] = 1;\n      console.info('retryCondition count set to 1');\n    }\n  } else {\n    console.error('retryCondition unknown', error);\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  if (isSafeRequestError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1) {\n    console.info('retryCondition condition true', error.config);\n  } else {\n    console.info('retryCondition condition false', error.config);\n    httpRetries[error.config.url] = 0;\n  }\n  const retVal = isSafeRequestError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n  console.info('retryCondition return ', retVal);\n  return retVal;\n}\n\n/*\n * @param  {Error}  error\n * @return {boolean}\nfunction isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n */\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/send-retry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "SAFE_HTTP_METHODS",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~SAFE_HTTP_METHODS",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "IDEMPOTENT_HTTP_METHODS",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~IDEMPOTENT_HTTP_METHODS",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "ALL_HTTP_METHODS",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~ALL_HTTP_METHODS",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "isRetryableError",
    "memberof": "src/connection/send-retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-retry.js~isRetryableError",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "isSafeRequestError",
    "memberof": "src/connection/send-retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-retry.js~isSafeRequestError",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "httpRetries",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~httpRetries",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "RETRY_COUNT",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~RETRY_COUNT",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "resetRetry",
    "memberof": "src/connection/send-retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-retry.js~resetRetry",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": "{resetRetry}",
    "description": "",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "retryCondition",
    "memberof": "src/connection/send-retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-retry.js~retryCondition",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": "{retryCondition}",
    "description": "",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/connection/send-utilities.js",
    "content": "// \n\nimport {\n  CLOUD_CONNECTION_STATES, HUB_CONNECTION_STATES, CLOUD_FINGERPRINTS_SHA1, getCloudHost,\n} from './constants';\nimport { isNode } from '../utils';\n\n\nconst SSL_CHECK_INTERVALL = 1000 * 60 * 60; // One hour\n\n/*\n * Returns > 0 if v1 > v2 and < 0 if v1 < v2 and 0 if v1 == v2\n */\nfunction compareVersions(v1, v2) {\n  const v1Parts = v1.split('.');\n  const v2Parts = v2.split('.');\n  const minLength = Math.min(v1Parts.length, v2Parts.length);\n  if (minLength > 0) {\n    for (let idx = 0; idx < minLength - 1; idx += 1) {\n      const diff = Number(v1Parts[idx]) - Number(v2Parts[idx]);\n      if (diff !== 0) {\n        return diff;\n      }\n    }\n  }\n  return v1Parts.length - v2Parts.length;\n}\n\n/*\n * Get API version, or given MAX version, from given hubVersion string\n * e.g. 1.12.0.5\n */\nexport function getAPIversion(hubVersion, maxVersion) {\n  let retVal = '0.0';\n  const majorEnd = hubVersion.indexOf('.');\n  let minorEnd = -1;\n  if (majorEnd !== -1) {\n    minorEnd = hubVersion.indexOf('.', majorEnd + 1);\n  }\n  if (minorEnd !== -1) {\n    retVal = hubVersion.substring(0, minorEnd);\n  }\n  if (compareVersions(retVal, maxVersion) > 0) {\n    retVal = maxVersion;\n  }\n  return retVal;\n}\n/*\n * Return cloud connection state based on error\n */\nexport function cloudErrorState(error) {\n  let retVal = CLOUD_CONNECTION_STATES.UNCONNECTED;\n  if (error && error.response && error.response.status === 401) {\n    // 401 Authentication information missing or expired.\n    retVal = CLOUD_CONNECTION_STATES.UNAUTHENTICATED;\n    console.error('send: authentication error ', error);\n  } else if (error && error.response && error.response.status === 403) {\n    // 402 Late payment - > no remote access\n    retVal = CLOUD_CONNECTION_STATES.LATE_PAYMENT;\n    console.error('send: unauhorized error ', error);\n  } else if (error && error.response && error.response.status === 403) {\n    // 403 Unauthorized\n    retVal = CLOUD_CONNECTION_STATES.UNAUTHORIZED;\n    console.error('send: unauhorized error ', error);\n  } else if (error && error.response && error.response.status === 410) {\n    // 410 Version problem\n    retVal = CLOUD_CONNECTION_STATES.OBSOLETE_API_VERSION;\n    console.error('send: version error ', error);\n  }\n\n  return retVal;\n}\n\n\n/*\n * Return hub connection state based on given error\n * @param  {Object} error\n * @return {string} hub's connectionState\n */\nexport function hubErrorState(error) {\n  let retVal = HUB_CONNECTION_STATES.UNCONNECTED;\n  if (error && error.response && error.response.status === 400) {\n    // no connection to offline hub\n    console.log('send: no-connection error ', error);\n  } else if (error && error.response && error.response.status === 401) {\n    // 401 Authentication information missing or expired.\n    retVal = HUB_CONNECTION_STATES.UNAUTHENTICATED;\n    console.error('send: authentication error ', error);\n  } else if (error && error.response && error.response.status === 403) {\n    // 403 Unauthorized\n    retVal = HUB_CONNECTION_STATES.UNAUTHORIZED;\n    console.error('send: unauhorized error ', error);\n  } else if (error && error.response && error.response.status === 410) {\n    // 410 Version problem\n    retVal = HUB_CONNECTION_STATES.OBSOLETE_API_VERSION;\n    console.error('send: version error ', error);\n  }\n\n  return retVal;\n}\n\n\nlet ongoingSSLCertificateCheck = false;\nlet lastSSLCertificateCheckTime = null;\n\n/*\n * Palceholder function for certificate checker\n * @return {Promise}\n */\nexport function testSSLCertificate(remoteConnection) {\n  return new Promise((resolve) => {\n    if (!remoteConnection) {\n      // All requests are now complete\n      resolve(true);\n      return;\n    }\n\n    const now = new Date().getTime();\n    if (!ongoingSSLCertificateCheck && (!lastSSLCertificateCheckTime || (now - lastSSLCertificateCheckTime > SSL_CHECK_INTERVALL))) {\n      ongoingSSLCertificateCheck = true;\n      lastSSLCertificateCheckTime = now;\n\n      // Cordova plugin?\n      if (!isNode && window && window.plugins && window.plugins.sslCertificateChecker) {\n        window.plugins.sslCertificateChecker.check(\n          () => {\n            ongoingSSLCertificateCheck = false;\n            resolve(true);\n          },\n          (errorMsg) => {\n            if (errorMsg === 'CONNECTION_NOT_SECURE') {\n              ongoingSSLCertificateCheck = false;\n              resolve(false);\n            } else {\n              ongoingSSLCertificateCheck = false;\n              lastSSLCertificateCheckTime = undefined;\n              resolve(true);\n            }\n          },\n          getCloudHost(),\n          CLOUD_FINGERPRINTS_SHA1,\n        );\n      } else {\n        setTimeout(() => { ongoingSSLCertificateCheck = false; }, SSL_CHECK_INTERVALL);\n        resolve(true);\n      }\n    } else {\n      resolve(true);\n    }\n  });\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/send-utilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "SSL_CHECK_INTERVALL",
    "memberof": "src/connection/send-utilities.js",
    "static": true,
    "longname": "src/connection/send-utilities.js~SSL_CHECK_INTERVALL",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "compareVersions",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~compareVersions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v2",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "getAPIversion",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~getAPIversion",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": "{getAPIversion}",
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubVersion",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "maxVersion",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "cloudErrorState",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~cloudErrorState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": "{cloudErrorState}",
    "description": "",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "hubErrorState",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~hubErrorState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": "{hubErrorState}",
    "description": "",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "ongoingSSLCertificateCheck",
    "memberof": "src/connection/send-utilities.js",
    "static": true,
    "longname": "src/connection/send-utilities.js~ongoingSSLCertificateCheck",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "lastSSLCertificateCheckTime",
    "memberof": "src/connection/send-utilities.js",
    "static": true,
    "longname": "src/connection/send-utilities.js~lastSSLCertificateCheckTime",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "testSSLCertificate",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~testSSLCertificate",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": "{testSSLCertificate}",
    "description": "",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "remoteConnection",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/connection/send.js",
    "content": "// \nimport isEmpty from 'lodash/isEmpty';\nimport isArray from 'lodash/isArray';\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\n// import rax from 'retry-axios';\nimport { urlBase64Decode } from '../utils';\nimport {\n  COMMANDS, CLOUD_CONNECTION_STATES, getCloudURL, isOneCloud, HUB_CONNECTION_STATES, MAX_API_VERSION,\n} from './constants';\nimport {\n  cloudErrorState, hubErrorState, testSSLCertificate, getAPIversion,\n} from './send-utilities';\nimport { setCloudConnectionState, setHubConnectionState } from './state';\nimport { userState } from '../reducers/user';\nimport { LANGUAGES } from '../user/constants';\nimport { hubsState } from '../reducers/hubs';\nimport { store } from '../store';\n\nimport { retryCondition, resetRetry } from './send-retry';\n\n\n\nexport { COMMANDS };\n\nlet refreshingToken = false;\n\n\n/* eslint no-use-before-define: [\"error\", { \"functions\": false }] */\n/*\n * Refresh Auth key call\n */\nfunction refreshAuthKey(authKey) {\n  if (!refreshingToken) {\n    refreshingToken = true;\n    send({ command: COMMANDS.REFRESH_AUTHKEY, authKey })\n      .then((response) => {\n        setTimeout(() => { refreshingToken = false; }, 1000 * 60 * 10); // 10min\n        if (response.length > 10) {\n          store.dispatch(userState.actions.setAuthKey(response));\n        }\n      })\n      .catch(() => {\n        refreshingToken = false;\n      });\n  }\n}\n\n/*\n * Token refresh\n */\nfunction testAndRefreshToken(key) {\n  let exp = null;\n  let header = {};\n  let payload = {};\n  let diff = null;\n\n  if (key) {\n    const tokenParts = key.split('.');\n\n    if (tokenParts[0]) {\n      tokenParts[0] = tokenParts[0].replace('Bearer ', '');\n      header = JSON.parse(urlBase64Decode(tokenParts[0]));\n    }\n    if (tokenParts[1]) {\n      payload = JSON.parse(urlBase64Decode(tokenParts[1]));\n    }\n  }\n\n  if ((header && header.exp) || (payload != null && payload.exp)) {\n    exp = header.exp ? header.exp : payload.exp;\n  }\n\n  if (exp) {\n    diff = exp - Math.round(new Date().getTime() / 1000);\n  }\n\n  if (!diff || diff < 0) {\n    // User is unauthenticated\n    setCloudConnectionState(CLOUD_CONNECTION_STATES.UNAUTHENTICATED);\n  } else if (!isOneCloud() && diff && diff < 5 * 24 * 60 * 60) {\n    // refresh if < 5 days to exp date\n    refreshAuthKey(key);\n  }\n}\n\n/**\n * Send multiple requests\n * @param  {Array<Oject>} requests - requests to be send\n * @return {Promise}\n */\nexport function sendAll(requests) {\n  return new Promise((resolve) => {\n    Promise.all(requests)\n      .then(() => {\n        // Use the data from the results like so:\n        // results[0].data\n        // results[1].data\n        resolve();\n      })\n      .catch(() => {\n        // do whatever\n        resolve();\n      });\n  });\n}\n\naxiosRetry(axios, {\n  // retries: 1, DOESN'T WORK, see send_retry.js\n  retryCondition,\n  shouldResetTimeout: true,\n  retryDelay: (retryCount, error) => {\n    // console.error('axiosRetry ', retryCount); DOESN'T WORK , see send_retry.js\n    console.error('axiosRetry ', error);\n    return 5000; // retryCount * 1000;\n  },\n});\n\n/* Flag to indicate SSL failures */\nlet permanentSSLFailure = false;\n\n/**\n * Send method for REST API\n * @param {COMMAND_TYPE} params\n *\n * @return {Promise}\n *\n * @example\n *   send( {command: COMMANDS.USER_LOGIN,  data:{email:email, password:password} })\n *   .then((response) => {...});\n *\n * @example\n *   send( {command: COMMANDS.CMD_DEVICE, authKey: authKey, hubKey: hubKey, data:[{id:deviceId, state:state}] })\n *   .then((response) => {...});\n *\n * @example\n *   send( {url: hubURL + \"/hub\"} )\n *   .then((hubData) => {...});\n *\n */\nexport function send({\n  command, localUrl, url, timeout, method, authKey, hubKey, type, config, data, hubId,\n}) {\n  let sendMethod = method;\n  let sendUrl = url;\n  let sendTimeout = timeout;\n  let sendAuthKey = authKey;\n  // let sendHubId = hubId;\n  let sendHubKey = hubKey;\n  let sendConfig = config;\n  let sendType = type;\n\n  if (sendMethod == null) {\n    sendMethod = 'GET';\n  }\n  if (sendType == null) {\n    sendType = 'application/json;charset=UTF-8';\n  }\n  const body = data;\n  /*\n  if (isArray(data)) {\n    body = [];\n    body.push({});\n  }\n  */\n  // console.log(\"send: command \", command);\n  // Flag to indicate are we using remote (vrs.local) connection\n  let remoteConnection = false;\n\n  // Flag to indicate are we sending hub command meaning using commandAPI (vrs. some cloud/videocloud command like login, log etc)\n  const hubCommand = !isEmpty(hubId);\n  const stateNow = store.getState();\n  const user = userState.selectors.getUser(stateNow);\n\n  // const { storedAuthKey } = user;\n\n  if (typeof command !== 'undefined' && command) {\n    if (command.method) {\n      sendMethod = command.method;\n    }\n    if (isEmpty(sendUrl) && command.url) {\n      // command with Hub API version\n      if (command.url.indexOf('$API_VER') !== -1) {\n        const hubs = hubsState.selectors.getHubs(stateNow);\n\n        if (!hubs[hubId] || (!hubs[hubId].hubKey && !isOneCloud())) {\n          return new Promise((resolve, reject) => {\n            reject(new Error('SDK Error: Send - Hub or hubKey not found error'));\n          });\n        }\n        const hub = hubs[hubId];\n        if (!hub.version || (hub.connectionState === HUB_CONNECTION_STATES.UNCONNECTED && command.url.indexOf('hub/remote/hub') === -1)) {\n          return new Promise((resolve, reject) => {\n            reject(new Error('SDK Error: Send - No Hub connection error'));\n          });\n        }\n        const hubVersion = getAPIversion(hub.version, MAX_API_VERSION);\n        sendUrl = getCloudURL().concat(command.url.replace('$API_VER', hubVersion));\n      } else {\n        sendUrl = getCloudURL().concat(command.url);\n      }\n      if (hubId && isOneCloud() && sendUrl.indexOf('hub/remote') !== -1) {\n        const index = sendUrl.indexOf('hub/remote');\n        const lastPart = sendUrl.substring(index + 10);\n        const firstPart = sendUrl.substring(0, index);\n        sendUrl = firstPart.concat('hub/').concat(hubId).concat('/remote').concat(lastPart);\n      }\n    }\n\n    if (sendUrl) {\n      const parts = sendUrl.split('hub/remote');\n      if (parts && parts[1]) {\n        if (localUrl) {\n          sendUrl = localUrl + parts[1];\n          if (sendHubKey) {\n            sendAuthKey = sendHubKey;\n            sendHubKey = null;\n          }\n        }\n      }\n      /* else {\n        sendHubId = false;\n      } */\n    }\n\n    if (sendUrl && sendUrl.indexOf(getCloudURL()) > -1) {\n      remoteConnection = true;\n    }\n\n    if (command.type && body) {\n      if (isArray(body)) {\n        if (body[0]) {\n          body[0].type = command.type;\n        } else {\n          body.push({ type: command.type });\n        }\n      } else if (body) {\n        body.type = command.type;\n      }\n    }\n\n    if (command.params) {\n      if (!command.params.includes('type')) {\n        command.params.push('type');\n      }\n      command.params.forEach((param) => {\n        if (isArray(data)) {\n          if (body && body[0] && data && data[0]) {\n            body[0][param] = data[0][param];\n          }\n        } else if (body && data) {\n          body[param] = data[param];\n        }\n      });\n    }\n\n    if (command.urlParams) {\n      const params = [];\n      command.urlParams.forEach((param) => {\n        if (data && data[param] !== undefined) {\n          params.push(`${encodeURIComponent(param)}=${encodeURIComponent(data[param])}`);\n        }\n      });\n      if (sendUrl && params.length > 0) {\n        sendUrl = `${sendUrl}?${params.join('&')}`;\n      }\n    }\n\n    if (command.timeout) {\n      sendTimeout = command.timeout;\n    }\n\n    if (command.config) {\n      sendConfig = command.config;\n    }\n  }\n\n  const bodyString = JSON.stringify(body);\n  const reqConf = {\n    timeout: sendTimeout || 15000,\n    method: sendMethod,\n    // withCredentials: false,\n    headers: {\n      Accept: 'application/json, application/binary, text/plain, */*',\n      'Content-Type': sendType,\n      Authorization: sendAuthKey || null,\n      'Accept-Language': null,\n      'X-Hub-Key': sendHubKey || null,\n    },\n    crossDomain: true,\n    responseType: 'application/json',\n    url: sendUrl,\n    data: isEmpty(bodyString) ? null : bodyString,\n  };\n\n  if (user.language && user.language !== LANGUAGES.NONE) {\n    reqConf.headers['Accept-Language'] = user.language;\n  } else {\n    delete reqConf.headers['Accept-Language'];\n  }\n\n  /*\n  if (sendHubKey){\n    reqConf.headers['X-Hub-Key'] = sendHubKey;\n  }\n  */\n  /* VLi: not needed now\n  if (sendHubId){\n    reqConf.headers['X-Hub-Id'] = sendHubId;\n  }\n  */\n\n  Object.assign(reqConf, sendConfig);\n\n  return new Promise((resolve, reject) => {\n    if (command || sendUrl) {\n      axios.interceptors.response.use((response) => {\n        if (response && response.headers && response.headers['content-type']) {\n          if (response.headers['content-type'].includes('application/json') || response.headers['content-type'].includes('application/binary')) {\n            if (sendUrl) {\n              resetRetry(sendUrl);\n            }\n            return response;\n          }\n          console.error('send: unknown response type');\n        } else {\n            // return even if no reply content-type\n            if (sendUrl) {\n              resetRetry(sendUrl);\n            }\n            return response;\n        }\n        return response; // Promise.reject(response);\n      }, (error) => Promise.reject(error));\n      /*\n      axios.interceptors.request.use((reqConfig) => {\n        //if (reqConfig.url.indexOf('192.168.1.119') !== -1) debugger;\n        const rConfig = reqConfig;\n        const retryState = rConfig['axios-retry'] || {};\n        if (retryState.retryCount > 0) {\n          rConfig.headers['x-retry-count'] = retryState.retryCount;\n        }\n        return rConfig;\n      });\n      */\n      // retries if it is a network error or a 5xx error on an idempotent request (GET, HEAD, OPTIONS, PUT or DELETE).\n      // axiosRetry(axios, {\n      //  retries: 3, shouldResetTimeout: false, retryDelay: axiosRetry.exponentialDelay, retryCondition,\n      // });\n      //\n      testSSLCertificate(!!(remoteConnection && sendUrl && !isOneCloud()))\n        .then((status) => {\n        // Cancel request if SSL Certificate status is invalid\n          if (!status || permanentSSLFailure) {\n            permanentSSLFailure = true;\n            reject(new Error('SDK Error: SSL failure.'));\n          } else {\n            // SSL is ok,\n            // check if auth Key needs to be refreshed\n            if (sendAuthKey) {\n              testAndRefreshToken(sendAuthKey);\n            }\n\n            // Send command\n            // See options: https://github.com/axios/axios#request-config\n            axios(reqConf)\n              .then((response) => {\n                // console.error(\"send: response \", response);\n                if (remoteConnection) {\n                  setCloudConnectionState(CLOUD_CONNECTION_STATES.CONNECTED);\n                } else if (hubId) {\n                  setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.LOCAL });\n                }\n                resolve(response.data);\n              })\n              .catch((error) => {\n                let errorMsg = 'SDK Send error:';\n                if (error && error.response) {\n                  // The request was made and the server responded with a status code\n                  // that falls out of the range of 2xx\n\n                  if (error.response.data && error.response.data.message) {\n                    errorMsg = errorMsg.concat(error.response.data.message);\n                  }\n                  if (error.response.status) {\n                    errorMsg = errorMsg.concat(`Status: ${error.response.status}`);\n                  }\n\n                  if (remoteConnection) {\n                    if (command !== COMMANDS.CLOUD_META) {\n                      setCloudConnectionState(cloudErrorState(error));\n                    }\n                    if (hubCommand && hubId) {\n                      setHubConnectionState({ hubId, state: hubErrorState(error) });\n                    }\n                  } else {\n                    // Local connection\n                    // 401 means also cloud auth refresh is required\n                    if (error && error.response && error.response.status === 401) {\n                      setCloudConnectionState(cloudErrorState(error));\n                    }\n                    if (hubCommand && hubId) {\n                      setHubConnectionState({ hubId, state: hubErrorState(error) });\n                    }\n                  }\n                } else if (error.request) {\n                  // The request was made but no response was received\n                  // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n                  // http.ClientRequest in node.js\n                  if (remoteConnection) {\n                    setCloudConnectionState(CLOUD_CONNECTION_STATES.UNCONNECTED);\n                    if (hubCommand && hubId) {\n                      setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.UNCONNECTED });\n                    }\n                    errorMsg = errorMsg.concat(`Cloud unconnected in remote. Status ${error.request.status}`);\n                  } else if (hubCommand && hubId) {\n                    // Local connection\n                    setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.UNCONNECTED });\n                    errorMsg = errorMsg.concat(`Hub unconnected. Status ${error.request.status}`);\n                  }\n                } else if (remoteConnection) {\n                  // Something happened in setting up the request that triggered an Error\n                  setCloudConnectionState(CLOUD_CONNECTION_STATES.UNCONNECTED);\n                  errorMsg = errorMsg.concat('Cloud unconnected in remote');\n                  if (hubCommand && hubId) {\n                    setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.UNCONNECTED });\n                    errorMsg = errorMsg.concat('Hub unconnected in remote');\n                  }\n                } else if (hubCommand && hubId) {\n                  // Local connection\n                  setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.UNCONNECTED });\n                  errorMsg = errorMsg.concat('Hub unconnected');\n                }\n                console.error(errorMsg);\n                reject(error);\n              });\n          }\n        });\n    } else {\n      reject(new Error('SDK Error: Command or Command API URL not found.'));\n    }\n  });\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/send.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "refreshingToken",
    "memberof": "src/connection/send.js",
    "static": true,
    "longname": "src/connection/send.js~refreshingToken",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "refreshAuthKey",
    "memberof": "src/connection/send.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send.js~refreshAuthKey",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "authKey",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "testAndRefreshToken",
    "memberof": "src/connection/send.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send.js~testAndRefreshToken",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "sendAll",
    "memberof": "src/connection/send.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send.js~sendAll",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": "{sendAll}",
    "description": "Send multiple requests",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Oject>"
        ],
        "spread": false,
        "optional": false,
        "name": "requests",
        "description": "requests to be send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "permanentSSLFailure",
    "memberof": "src/connection/send.js",
    "static": true,
    "longname": "src/connection/send.js~permanentSSLFailure",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "send",
    "memberof": "src/connection/send.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send.js~send",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": "{send}",
    "description": "Send method for REST API",
    "examples": [
      "  send( {command: COMMANDS.USER_LOGIN,  data:{email:email, password:password} })\n  .then((response) => {...});",
      "  send( {command: COMMANDS.CMD_DEVICE, authKey: authKey, hubKey: hubKey, data:[{id:deviceId, state:state}] })\n  .then((response) => {...});",
      "  send( {url: hubURL + \"/hub\"} )\n  .then((hubData) => {...});"
    ],
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "COMMAND_TYPE"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/connection/state.js",
    "content": "// \n\nimport { connectionsState } from '../reducers/connections';\nimport { hubsState } from '../reducers/hubs';\nimport { store } from '../store';\nimport { HUB_CONNECTION_STATES } from './constants';\n\n\n/**\n * Change Cloud connection state\n * @param {HUB_CONNECTION_STATE_TYPE} state\n */\nexport function setCloudConnectionState(state) {\n  store.dispatch(connectionsState.actions.setCloudConnectionState(state));\n}\n\n/**\n * Get Cloud connection state\n * @return {CLOUD_CONNECTION_STATE_TYPE}\n */\nexport function getCloudConnectionState() {\n  const stateNow = store.getState();\n  return connectionsState.selectors.getConnections(stateNow).cloudState;\n}\n\n/**\n * Change hub connection state\n * @param {{hubId: string, state: HUB_CONNECTION_STATE_TYPE}} hubAndState - hubId and new state\n */\nexport function setHubConnectionState(paramHubAndState) {\n  const stateNow = store.getState();\n  const storedHubs = hubsState.selectors.getHubs(stateNow);\n  const hubAndState = paramHubAndState;\n  /* If hub is unconnected, lets try remote */\n  if (hubAndState.state === HUB_CONNECTION_STATES.UNCONNECTED && storedHubs[hubAndState.hubId]) {\n    if (storedHubs[hubAndState.hubId].connectionState === HUB_CONNECTION_STATES.REMOTE) {\n      hubAndState.state = HUB_CONNECTION_STATES.LOCAL;\n    }\n  }\n  store.dispatch(hubsState.actions.setHubConnectionState(hubAndState));\n}\n/**\n * Get hub connection state by hub id\n * @param  {string} hubId\n * @return {HUB_CONNECTION_STATE_TYPE}\n */\nexport function getHubConnectionState(hubId) {\n  const stateNow = store.getState();\n  if (hubsState.selectors.getHubs(stateNow)[hubId]) {\n    return hubsState.selectors.getHubs(stateNow)[hubId].connectionState;\n  }\n  return HUB_CONNECTION_STATES.UNCONNECTED;\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/state.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "setCloudConnectionState",
    "memberof": "src/connection/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/state.js~setCloudConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/state.js",
    "importStyle": "{setCloudConnectionState}",
    "description": "Change Cloud connection state",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "HUB_CONNECTION_STATE_TYPE"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "getCloudConnectionState",
    "memberof": "src/connection/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/state.js~getCloudConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/state.js",
    "importStyle": "{getCloudConnectionState}",
    "description": "Get Cloud connection state",
    "lineNumber": 21,
    "return": {
      "nullable": null,
      "types": [
        "CLOUD_CONNECTION_STATE_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "setHubConnectionState",
    "memberof": "src/connection/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/state.js~setHubConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/state.js",
    "importStyle": "{setHubConnectionState}",
    "description": "Change hub connection state",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "{hubId: string, state: HUB_CONNECTION_STATE_TYPE}"
        ],
        "spread": false,
        "optional": false,
        "name": "hubAndState",
        "description": "hubId and new state"
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "getHubConnectionState",
    "memberof": "src/connection/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/state.js~getHubConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/state.js",
    "importStyle": "{getHubConnectionState}",
    "description": "Get hub connection state by hub id",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HUB_CONNECTION_STATE_TYPE"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/devices/constants.js",
    "content": "// \n//\n\n\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/devices/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "src/devices/device.js",
    "content": "\n// \nimport isEmpty from 'lodash/isEmpty';\nimport pick from 'lodash/pick';\n\n\nimport { send, COMMANDS } from '../connection/send';\nimport { store } from '../store';\nimport { userState } from '../reducers/user';\nimport { hubsState } from '../reducers/hubs';\nimport { HUB_CONNECTION_STATES, isOneCloud } from '../connection/constants';\n// import type { COMMAND_TYPE } from '../connection/constants';\n\n/**\n * Device state command to be sent\n * @param  {string} hubId\n * @param  {string} deviceId\n * @param  {Object} state\n * @param  {Array<string>} properties - optional properties\n * @return {Promise}\n */\nexport function sendDeviceStateCmd(hubId, deviceId, state, properties) {\n  return new Promise((resolve, reject) => {\n    const stateNow = store.getState();\n    const user = userState.selectors.getUser(stateNow);\n    if (!user || !user.authKey) {\n      console.error('SDK sendDeviceStateCmd error: No userKey!');\n      reject(new Error('Device command error: No userKey!'));\n      return;\n    }\n\n    const hubs = hubsState.selectors.getHubs(stateNow);\n    if (!hubs[hubId] || (!hubs[hubId].hubKey && !isOneCloud())) {\n      console.error('SDK sendDeviceStateCmd error: No hubKey!');\n      reject(new Error('Device command error: No hubKey!'));\n      return;\n    }\n\n    const { authKey } = user;\n    const { hubKey } = hubs[hubId];\n    let sendState = state;\n    if (!isEmpty(properties)) {\n      sendState = pick(sendState, properties);\n    }\n\n    send({\n      command: COMMANDS.CMD_DEVICE_STATE, authKey, hubId, hubKey, data: [{ id: deviceId, state: sendState }],\n    })\n      .then((response) => {\n        console.debug('SDK sendDeviceCmd ok', response);\n        resolve(response);\n      })\n      .catch((error) => {\n        console.error(error);\n        console.error('SDK sendDeviceStateCmd error:', error);\n        reject(new Error('Device state command error!'));\n      });\n  });\n}\n\n/**\n * General device command to be sent\n * @param  {string} hubId\n * @param  {string} deviceId\n * @param  {Object} state\n * @param  {Array<string>} properties - optional properties\n * @return {Promise}\n */\nexport function sendDeviceCmd(hubId, deviceId, commandType, data, properties) {\n  return new Promise((resolve, reject) => {\n    const stateNow = store.getState();\n    const user = userState.selectors.getUser(stateNow);\n    if (!user || !user.authKey) {\n      console.error('SDK sendDeviceCmd error: No userKey!');\n      reject(new Error('Device command error: No userKey!'));\n      return;\n    }\n\n    const hubs = hubsState.selectors.getHubs(stateNow);\n    const hub = hubs[hubId];\n    let hubKey;\n    if (hub && hub.hubKey) {\n      hubKey = hub.hubKey;\n    }\n    if (!hub || (!hubKey && !isOneCloud())) {\n      console.error('SDK sendDeviceCmd error: No hubKey!');\n      reject(new Error('Device command error: No hubKey!'));\n      return;\n    }\n\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.error('SDK sendDeviceCmd error: No Hub connection');\n      reject(new Error('Device command error: No hub connection'));\n      return;\n    }\n\n\n    const { authKey } = user;\n    if (!authKey) {\n      console.error('SDK sendDeviceCmd error: No authKey!');\n      reject(new Error('Device command error: No authKey!'));\n      return;\n    }\n\n    let sendData = data;\n    if (!isEmpty(properties)) {\n      sendData = pick(sendData, properties);\n    }\n    if (commandType) {\n      send({\n        command: commandType, method: undefined, authKey, hubId, localUrl: hub.url, hubKey, data: [sendData],\n      })\n        .then((response) => {\n          console.debug('SDK sendDeviceCmd ok', response);\n          resolve(response);\n        })\n        .catch((error) => {\n          console.error('SDK sendDeviceCmd error:', error);\n          reject(new Error('Device command error!'));\n        });\n    }\n  });\n}\n\nexport function setDeviceVisibility(hubId, deviceId, visible) {\n  return sendDeviceCmd(hubId, deviceId, COMMANDS.CMD_DEVICE_VISIBILITY, { id: deviceId, visible });\n}\nexport function setDeviceLocked(hubId, deviceId, locked) {\n  return sendDeviceCmd(hubId, deviceId, COMMANDS.CMD_DEVICE_LOCK, { id: deviceId, locked });\n}\nexport function setDeviceHotWater(hubId, deviceId, hotWater) {\n  return sendDeviceCmd(hubId, deviceId, COMMANDS.CMD_DEVICE_HOT_WATER, { id: deviceId, hotWater });\n}\n/**\n * Unpair device\n * @param  {string} hubId\n * @param  {string} deviceId\n * @return {Promise}\n */\nexport function unpairDevice(hubId, deviceId) {\n  return sendDeviceCmd(hubId, deviceId, COMMANDS.CMD_DEVICE_IGNORE, { id: deviceId });\n}\n\n/**\n * Identify device\n * @param  {string} hubId\n * @param  {string} deviceId\n * @return {Promise}\n */\nexport function identifyDevice(hubId, deviceId) {\n  return sendDeviceCmd(hubId, deviceId, COMMANDS.CMD_DEVICE_IDENTIFY, { id: deviceId });\n}\n\n/**\n * Identify device\n * @param  {string} hubId\n * @param  {string} deviceId\n * @param  {string} name\n * @param  {Array<string>} roomId\n * @return {Promise}\n */\nexport function setDeviceMeta(hubId, deviceId, name, rooms) {\n  return sendDeviceCmd(hubId, deviceId, COMMANDS.CMD_DEVICE_META, { id: deviceId, name, room: rooms });\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/devices/device.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "sendDeviceStateCmd",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~sendDeviceStateCmd",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{sendDeviceStateCmd}",
    "description": "Device state command to be sent",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "optional properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "sendDeviceCmd",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~sendDeviceCmd",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{sendDeviceCmd}",
    "description": "General device command to be sent",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "optional properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "setDeviceVisibility",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~setDeviceVisibility",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{setDeviceVisibility}",
    "description": "",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visible",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "setDeviceLocked",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~setDeviceLocked",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{setDeviceLocked}",
    "description": "",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "locked",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "setDeviceHotWater",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~setDeviceHotWater",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{setDeviceHotWater}",
    "description": "",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hotWater",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "unpairDevice",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~unpairDevice",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{unpairDevice}",
    "description": "Unpair device",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "identifyDevice",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~identifyDevice",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{identifyDevice}",
    "description": "Identify device",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "setDeviceMeta",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~setDeviceMeta",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{setDeviceMeta}",
    "description": "Identify device",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "roomId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/devices/devices.js",
    "content": "// \nimport { store } from '../store';\nimport { devicesState } from '../reducers/devices';\nimport { pairingsState } from '../reducers/pairings';\n\n\n\n/**\n * Get devices of all selected hubs\n * @return {HUB_DEVICES_MAP_TYPE}\n */\nexport function getDevices() {\n  const stateNow = store.getState();\n  return devicesState.selectors.getDevices(stateNow);\n}\n\n/**\n * Get pairing devices of all selected hubs\n * @return {HUB_DEVICES_MAP_TYPE}\n */\nexport function getPairingDevices() {\n  const stateNow = store.getState();\n  return pairingsState.selectors.getPairings(stateNow);\n}\n\n/**\n * Get devices of given hub\n * @param  {string} hubId\n * @return {DEVICES_MAP_TYPE}\n */\nexport function getHubDevices(hubId) {\n  let retVal;\n  const devices = getDevices();\n  if (devices && devices[hubId]) {\n    retVal = devices[hubId];\n  }\n  return retVal;\n}\n\n/**\n * Get pairing devices of given hub\n * @param  {string} hubId\n * @return {DEVICES_MAP_TYPE}\n */\nexport function getHubPairingDevices(hubId) {\n  let retVal;\n  const devices = getPairingDevices();\n  if (devices && devices[hubId]) {\n    retVal = devices[hubId];\n  }\n  return retVal;\n}\n\n/**\n * Device handler for poll delta results\n * @param  {string} hubId\n * @param  {boolean} reset\n * @param  {Object} devices\n */\nexport function devicesDeltaHandler(hubId, reset, devices) {\n  let oldHubDevices = {};\n  const storedDevices = getDevices();\n  if (storedDevices && storedDevices[hubId]) {\n    oldHubDevices = storedDevices[hubId];\n  }\n\n  if (reset) {\n    // If reset then set  devices as they are received\n    const stateDevices = {\n      hubId,\n      devices,\n    };\n    store.dispatch(devicesState.actions.setDevices(stateDevices));\n  } else {\n    // Loop devices to check could it be added or should be removed\n    Object.entries(devices).forEach(([key, device]) => {\n      const stateDevice = {\n        hubId,\n        device,\n      };\n      if (key && device) {\n        store.dispatch(devicesState.actions.setDevice(stateDevice));\n      } else if (key && oldHubDevices[key]) {\n        store.dispatch(devicesState.actions.deleteDevice(key));\n      }\n    });\n  }\n}\n\n/**\n * Device handler for poll delta results\n * @param  {string} hubId\n * @param  {boolean} reset\n * @param  {Array} pairingDevices\n */\nexport function pairingDevicesDeltaHandler(hubId, reset, pairingDevices) {\n  let oldPairingDevices = {};\n  const storedPairingDevices = getPairingDevices();\n  if (storedPairingDevices && storedPairingDevices[hubId]) {\n    oldPairingDevices = storedPairingDevices[hubId];\n  }\n\n  // If reset then set  devices as they are received\n  const statePairingDevices = {\n    hubId,\n    devices: {},\n  };\n  pairingDevices.map((device) => {\n    const deviceProps = { ...device.status };\n\n\n    // TODO: Start of remove when hub 'device.status.state.state'-bug fixed\n    /*\n    let deviceState = { ...device.status.state };\n    if (device.status.state.state){\n      deviceState = { ...device.status.state.state}\n      delete device.status.state.state\n    }\n    deviceProps.status.state ={ ...deviceState}\n    */\n    // TODO: end of remove when hub bug fixed\n    const deviceToHandle = device;\n    delete deviceToHandle.status;\n    const deviceToPair = { ...deviceToHandle, ...deviceProps };\n    statePairingDevices.devices[device.id] = deviceToPair;\n    return true;\n  });\n\n  if (reset) {\n    // If reset then set  devices as they are received\n    store.dispatch(pairingsState.actions.setPairingDevices(statePairingDevices));\n  } else {\n    // Loop devices to check could it be added or should be removed\n    Object.entries(statePairingDevices.devices).forEach(([key, device]) => {\n      const statePairingDevice = {\n        hubId,\n        device,\n      };\n      /*\n      for(devRoom in device.status.room){\n        for room in _rooms when devRoom is room.id\n            device.status.room = angular.copy room\n      }\n      */\n      if (key && device) {\n        store.dispatch(pairingsState.actions.setPairingDevice(statePairingDevice));\n      } else if (key && oldPairingDevices[key]) {\n        store.dispatch(pairingsState.actions.deletePairingDevice(key));\n      }\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/devices/devices.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "getDevices",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~getDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{getDevices}",
    "description": "Get devices of all selected hubs",
    "lineNumber": 12,
    "return": {
      "nullable": null,
      "types": [
        "HUB_DEVICES_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "getPairingDevices",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~getPairingDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{getPairingDevices}",
    "description": "Get pairing devices of all selected hubs",
    "lineNumber": 21,
    "return": {
      "nullable": null,
      "types": [
        "HUB_DEVICES_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "getHubDevices",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~getHubDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{getHubDevices}",
    "description": "Get devices of given hub",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DEVICES_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "getHubPairingDevices",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~getHubPairingDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{getHubPairingDevices}",
    "description": "Get pairing devices of given hub",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DEVICES_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "devicesDeltaHandler",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~devicesDeltaHandler",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{devicesDeltaHandler}",
    "description": "Device handler for poll delta results",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "devices",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "pairingDevicesDeltaHandler",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~pairingDevicesDeltaHandler",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{pairingDevicesDeltaHandler}",
    "description": "Device handler for poll delta results",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "pairingDevices",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/hubs/constants.js",
    "content": "// \n//\n/**\n  * Enumeration of hub state, that could be\n  * UNCLAIMED, CLAIMED, TOO_NEW_VERSION, NO_ACCESS or CONNECTED\n  * @readonly\n  * @enum {string}\n  */\nexport const HUB_STATES = Object.freeze({\n  UNCLAIMED: 'unclaimed',\n  CLAIMED: 'claimed',\n  TOO_NEW_VERSION: 'new version',\n  NO_ACCESS: 'no access',\n  CONNECTED: 'connected',\n});\n\nexport const ZWAVE_INCLUSION_STATUS = Object.freeze({\n  NOT_PAIRING: 'NOT_PAIRING', // Inclusion is not running\n  IDLE: 'IDLE', // Inclusion is not running\n  RUNNING: 'RUNNING', // Inclusion is running\n  TIMEOUT: 'TIMEOUT', // Inclusion timed out and finished\n  SUCCESS: 'SUCCESS', // Inclusion finished, a device was added\n  CANCEL: 'CANCEL', // Inclusion was cancelled\n  NO_ZWAVE: 'NO_ZWAVE', // ZWave not available\n  ERROR: 'ERROR', // General error\n});\n\n\nexport const ZWAVE_EXCLUSION_STATUS = Object.freeze({\n  IDLE: 'IDLE', // Exclusion is not running\n  RUNNING: 'RUNNING', // Exclusion is running\n  TIMEOUT: 'TIMEOUT', // Exclusion timed out and finished\n  SUCCESS: 'SUCCESS', // Exclusion finished, a device was added\n  CANCEL: 'CANCEL', // Exclusion was cancelled\n  NO_ZWAVE: 'NO_ZWAVE', // ZWave not available\n  ERROR: 'ERROR', // General error\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n * Intervall defining how often hubkeys and metadatas are fetched\n */\nexport const DISCOVERY_INTERVAL_MS = 45 * 1000;\n\n/*\n * Interval defining how often hubs are polled at max\n * This value is used as is in local connection, and multiplied in remote connection\n */\nexport const POLL_INTERVAL_MS = 1 * 1000;\n\n/*\n * Interval defining how often hubs are polled when paired\n */\nexport const PAIRING_POLL_INTERVAL_MS = 3 * 1000;\n\n/*\n * Interval defining how often zwave statuses are polled\n */\nexport const ZWAVE_INCLUSION_INTERVAL_MS = 3 * 1000;\nexport const ZWAVE_EXCLUSION_INTERVAL_MS = 3 * 1000;\n\nexport const HUB_PROTOCOL = 'http://';\nexport const HUB_PORT = '8893';\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/hubs/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "HUB_STATES",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~HUB_STATES",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{HUB_STATES}",
    "description": "Enumeration of hub state, that could be\nUNCLAIMED, CLAIMED, TOO_NEW_VERSION, NO_ACCESS or CONNECTED",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "ZWAVE_INCLUSION_STATUS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~ZWAVE_INCLUSION_STATUS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{ZWAVE_INCLUSION_STATUS}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "ZWAVE_EXCLUSION_STATUS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~ZWAVE_EXCLUSION_STATUS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{ZWAVE_EXCLUSION_STATUS}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "DISCOVERY_INTERVAL_MS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~DISCOVERY_INTERVAL_MS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{DISCOVERY_INTERVAL_MS}",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "POLL_INTERVAL_MS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~POLL_INTERVAL_MS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{POLL_INTERVAL_MS}",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "PAIRING_POLL_INTERVAL_MS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~PAIRING_POLL_INTERVAL_MS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{PAIRING_POLL_INTERVAL_MS}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "ZWAVE_INCLUSION_INTERVAL_MS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~ZWAVE_INCLUSION_INTERVAL_MS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{ZWAVE_INCLUSION_INTERVAL_MS}",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "ZWAVE_EXCLUSION_INTERVAL_MS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~ZWAVE_EXCLUSION_INTERVAL_MS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{ZWAVE_EXCLUSION_INTERVAL_MS}",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "HUB_PROTOCOL",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~HUB_PROTOCOL",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{HUB_PROTOCOL}",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "HUB_PORT",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~HUB_PORT",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{HUB_PORT}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/hubs/hubs.js",
    "content": "// \nimport isEmpty from 'lodash/isEmpty';\nimport {\n  DISCOVERY_INTERVAL_MS, POLL_INTERVAL_MS, PAIRING_POLL_INTERVAL_MS, HUB_PROTOCOL, HUB_PORT,\n} from './constants';\nimport { USER_STATES, ROLES } from '../user/constants';\nimport { HUB_CONNECTION_STATES } from '../connection/constants';\nimport { COMMANDS, send, sendAll } from '../connection/send';\n\nimport { devicesDeltaHandler, pairingDevicesDeltaHandler } from '../devices/devices';\nimport { roomsDeltaHandler } from '../rooms/rooms';\nimport { alarmsDeltaHandler } from '../alarms/alarms';\nimport { urlBase64Decode } from '../utils';\nimport { store, watchChanges } from '../store';\nimport { hubsState } from '../reducers/hubs';\nimport { userState } from '../reducers/user';\n\n\n\nlet hubsMap = {};\n\n\n/*\n * Helper method to extract hub info from JWT based hub keys\n */\nfunction extractHubInfo(HUBKeys) {\n  const hubs = {};\n  if (HUBKeys) {\n    Object.keys(HUBKeys).forEach((hubKey) => {\n      if (HUBKeys[hubKey]) {\n        const coded = HUBKeys[hubKey].split('.')[1];\n        const decoded = urlBase64Decode(coded);\n        const payload = JSON.parse(decoded);\n        const info = {};\n        info.id = payload.hubId || payload.hub_id;\n        info.name = payload.hubName || payload.hub_name;\n        info.hubKey = HUBKeys[hubKey];\n        info.connectionState = HUB_CONNECTION_STATES.UNCONNECTED;\n        if (payload.role) {\n          info.role = payload.role;\n          info.roleString = '';\n          Object.keys(ROLES).forEach((roleKey) => {\n            if (ROLES[roleKey] === info.role) info.roleString = roleKey;\n          });\n        }\n        hubs[info.id] = info;\n      } else {\n        hubs[hubKey] = {\n          id: hubKey,\n          connectionState: HUB_CONNECTION_STATES.UNCONNECTED,\n        };\n      }\n    });\n  }\n  return hubs;\n}\n\n\n/*\n * Hub metadata is received and will be stored\n */\nfunction updateFoundHub(hubURL, hub) {\n  const foundHub = hub;\n  // Hub keys returns ids, idQuerys return hubId\n  if (foundHub.hubId) {\n    foundHub.id = foundHub.hubId;\n    delete foundHub.hubId;\n  }\n  if (!foundHub.id) {\n    return;\n  }\n\n  if (!hubsMap[foundHub.id]) {\n    hubsMap[foundHub.id] = {\n      id: foundHub.id,\n      name: foundHub.name || '',\n    };\n  }\n  hubsMap[foundHub.id].name = foundHub.name;\n  hubsMap[foundHub.id].connected = foundHub.connected;\n  hubsMap[foundHub.id].features = foundHub.features;\n  hubsMap[foundHub.id].state = foundHub.state;\n  hubsMap[foundHub.id].version = foundHub.version;\n  hubsMap[foundHub.id].connectionState = foundHub.connected ? HUB_CONNECTION_STATES.REMOTE : HUB_CONNECTION_STATES.UNCONNECTED;\n  if (hubURL) {\n    hubsMap[foundHub.id].connectionState = HUB_CONNECTION_STATES.LOCAL;\n    hubsMap[foundHub.id].url = hubURL;\n  } else {\n    hubsMap[foundHub.id].url = undefined;\n  }\n}\n\n/*\n * Remote hub backup and lock request\n */\nexport function lockAndBackup(hubId, authKey, hubKey) {\n  return new Promise((resolve, reject) => {\n    send({\n      command: COMMANDS.HUB_LOCK_BACKUP, authKey, hubKey, hubId,\n    })\n      .then((status) => {\n        resolve(status);\n      })\n      .catch((error) => {\n        console.log(`lockAndBackup ${hubId} error `, error.message);\n        reject(error);\n      });\n  });\n}\n\n/*\n * Remote hub metamata request for version etc information\n */\nexport function doRemoteIdQuery(hubId, authKey, hubKey) {\n  return new Promise((resolve, reject) => {\n    send({\n      command: COMMANDS.CLOUD_META, authKey, hubKey, hubId,\n    })\n      .then((hubData) => {\n        updateFoundHub(undefined, hubData);\n        resolve(hubData);\n      })\n      .catch((error) => {\n        console.log(`doRemoteIdQuery ${hubId} error `, error.message);\n        reject(hubId);\n      });\n  });\n}\n\n/*\n * Local hub metadata request for version etc information\n */\nfunction doLocalIdQuery(ip) {\n  return new Promise((resolve) => {\n    if (ip) {\n      const hubURL = `${HUB_PROTOCOL + ip}:${HUB_PORT}`;\n      const url = `${hubURL}/hub`;\n      send({ url, timeout: 500 })\n        .then((hubData) => {\n          updateFoundHub(hubURL, hubData);\n          resolve(ip);\n        })\n        .catch((error) => {\n          console.log(`doLocalIdQuery ${ip} error `, error.message);\n          resolve(ip);\n        });\n    } else {\n      resolve();\n    }\n  });\n}\n\n/**\n * Helper to get current hubs from state\n * @return {HUBS_MAP_TYPE} - hubs\n */\nexport function getHubs() {\n  return hubsState.selectors.getHubs(store.getState());\n}\n\n/*\n * Check hubs that are currently selected and mark them selected also in map of given hubs\n */\nfunction setSelectedHubs(newHubs) {\n  const hubs = getHubs();\n  (Object.values(hubs)).forEach((hub) => {\n    if (hub.selected) {\n      const selectedNewHub = newHubs[hub.id];\n      if (selectedNewHub) {\n        selectedNewHub.selected = true;\n      }\n    }\n  });\n}\n\n/*\n * Fetch HUB IP addresses and metadata of those in the same network\n */\nfunction doCloudDiscovery() {\n  return new Promise((resolve) => {\n    send({ command: COMMANDS.CLOUD_IP })\n      .then((ips) => {\n        const queries = [];\n        if (ips && !isEmpty(ips)) {\n          ips.forEach((ip) => {\n            queries.push(doLocalIdQuery(ip));\n          });\n        }\n        sendAll(queries)\n          .finally(() => {\n            // mark selected hubs to be selected after\n            setSelectedHubs(hubsMap);\n            store.dispatch(hubsState.actions.updateHubs(hubsMap));\n            resolve('ok');\n          });\n      })\n      .catch((error) => {\n        console.error('doCloudDiscovery error: ', error.message);\n        store.dispatch(hubsState.actions.updateHubs(hubsMap));\n        resolve('error');\n      });\n  });\n}\n\n/*\n * Fetch hub metadatas from Cloud\n */\nfunction fetchCloudMetaData(hubs, authKey) {\n  return new Promise((resolve) => {\n    const queries = [];\n    (Object.values(hubs)).forEach((hub) => {\n      // if (hub.hubKey) {\n      queries.push(doRemoteIdQuery(hub.id, authKey, hub.hubKey));\n      // }\n    });\n    sendAll(queries)\n      .then((values) => {\n        console.debug('fetchCloudMetaData values', values);\n      })\n      .catch((error) => {\n        console.error('fetchCloudMetaData error', error);\n      })\n      .finally(() => {\n        resolve();\n      });\n  });\n}\n\n\n/**\n * Helper to get current user from state\n */\nfunction storedUser() {\n  return userState.selectors.getUser(store.getState());\n}\n\n/*\n * Make hubsMap by fetching hub meta data from cloud and local\n */\nfunction makeHubsMap(tokens, isCloudDiscovery = true, isSynchnonously = false) {\n  const { authKey } = storedUser();\n  return new Promise((resolve) => {\n    hubsMap = extractHubInfo(tokens);\n    store.dispatch(hubsState.actions.updateHubs(hubsMap));\n    fetchCloudMetaData(hubsMap, authKey)\n      .finally(() => {\n        // Hubs map may be changed during fetching cloud metadata\n        store.dispatch(hubsState.actions.updateHubs(hubsMap));\n        if (isSynchnonously) {\n          if (isCloudDiscovery) {\n            doCloudDiscovery()\n              .then(() => {\n                resolve(getHubs());\n              })\n              .catch(() => {\n                resolve(getHubs());\n              });\n          } else {\n            resolve(getHubs());\n          }\n        } else {\n          if (isCloudDiscovery) {\n            doCloudDiscovery();\n          }\n          resolve(getHubs());\n        }\n      });\n  });\n}\n\n/*\n * Fetch Hub keys by user authKey and start fetching hub meta datas\n */\nexport function fetchHubs() {\n  const { authKey } = storedUser();\n  return new Promise((resolve, reject) => {\n    if (!authKey) {\n      reject(new Error('No userKey!'));\n      return;\n    }\n    send({ command: COMMANDS.HUB_KEYS, authKey })\n      .then((tokens) => {\n        if (tokens) {\n          makeHubsMap(tokens).then((hubs) => resolve(hubs));\n        } else {\n          resolve(getHubs());\n        }\n      })\n      .catch((error) => {\n        console.error('fetchHubTokens error: ', error.message);\n        reject(error);\n      });\n  });\n}\n\n\nlet discoveryInterval;\n\n/**\n * Start discovering hubs every DISCOVERY_INTERVAL_MS\n * Sequence includes requests of hub-keys, remote meta-infos, lan-ips and local meta-infos\n */\nexport function startDiscoveringHubs() {\n  if (!discoveryInterval) {\n    // call immediately...\n    fetchHubs();\n    // and then every DISCOVERY_INTERVAL_MS (30s?)\n    discoveryInterval = setInterval(fetchHubs, DISCOVERY_INTERVAL_MS);\n  }\n}\n\n/**\n * Stop discovering hubs\n */\nexport function stopDiscoveringHubs() {\n  clearInterval(discoveryInterval);\n}\n\n/*\n** Pairing\n */\n\nconst pairingIntervals = {};\nconst pairingStopped = {};\nconst pairingTimeStamp = {};\nconst pairingInAction = {};\n\n\n/*\n * Do pairing of given hub if hub connection is ok\n * Remote pairing is executed only every second call\n * @param {string} hubId\n * @param {booleam} reset - set true for full scan, false if delta only\n * @return {Promise}\n */\nfunction doPairingById(hubId, reset = false) {\n  return new Promise((resolve, reject) => {\n    let doReset = reset;\n    if (pairingStopped[hubId]) {\n      console.debug('doPairing: pairing stopped');\n      reject(new Error('pairing stopped'));\n      return;\n    }\n    if (!pairingTimeStamp[hubId]) {\n      pairingTimeStamp[hubId] = 0;\n    }\n\n    const hub = getHubs()[hubId];\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    console.debug('doPairing connection state: ', hub.connectionState);\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.warn('SDK doPairing: no Hub connection');\n      reject(new Error('no hub connection'));\n      return;\n    }\n\n    if (pairingInAction[hubId]) {\n      reject(new Error('pairing already in action'));\n      return;\n    }\n    pairingInAction[hubId] = true;\n\n    if (doReset) pairingTimeStamp[hubId] = 0;\n    doReset = pairingTimeStamp[hubId] === 0;\n\n    send({\n      command: COMMANDS.PAIR_START, hubId, authKey, hubKey, localUrl: hub.url, data: { ts: pairingTimeStamp[hubId] },\n    })\n      .then((delta) => {\n        if (delta) {\n          pairingTimeStamp[hubId] = delta.timestamp;\n          switch (delta.type) {\n            case 'SCAN_DELTA': {\n              pairingDevicesDeltaHandler(hubId, doReset, delta.devices);\n              break;\n            }\n            default: {\n              break;\n            }\n          }\n        }\n        pairingInAction[hubId] = false;\n        resolve('ok');\n      })\n      .catch((error) => {\n      // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK: doPairing error: ', error.message);\n        pairingInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Set pairing ignore flag of given device in given hub\n * @param {string} hubId\n * @param {string} deviceId\n * @param {boolean} ignore\n * @return {Promise}\n */\nexport function ignorePairingByIds(hubId, deviceId, ignore) {\n  const { authKey } = storedUser();\n  const hub = getHubs()[hubId];\n  const { hubKey } = hub;\n  return send({\n    command: COMMANDS.PAIR_IGNORE, hubId, authKey, hubKey, localUrl: hub.url, data: { id: deviceId, ignored: ignore },\n  });\n}\n\n\n/**\n * Start pairing on given hub\n * @param {string} hubId\n * @param {booleam} reset - set true for full scan, false if delta only\n * @return {Promise}\n */\nexport function startPairingById(hubId, reset) {\n  const intervalTime = PAIRING_POLL_INTERVAL_MS;\n  pairingStopped[hubId] = false;\n  const doPairing = (callHubId, callReset) => doPairingById(callHubId, callReset).then(() => {}).catch(() => {});\n  try {\n    pairingIntervals[hubId] = setInterval(doPairing, intervalTime, hubId, reset);\n  } catch (error) {\n    console.error('Catch startPairingById: ', error);\n  }\n  return doPairingById(hubId, reset);\n}\n\nconst stopPairingInAction = {};\n/**\n * Stop pairing on given hub\n * @param {string} hubId\n * @return {Promise}\n */\nexport function stopPairingById(hubId) {\n  return new Promise((resolve, reject) => {\n    if (stopPairingInAction[hubId]) {\n      reject(new Error('already stopping'));\n      return;\n    }\n    stopPairingInAction[hubId] = true;\n\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n\n\n    clearInterval(pairingIntervals[hubId]);\n\n    send({\n      command: COMMANDS.PAIR_STOP, hubId, authKey, hubKey, localUrl: hub.url,\n    })\n      .then((data) => {\n        console.debug('SDK: pairingStopped: Ok , data: ', data);\n        pairingStopped[hubId] = true;\n        stopPairingInAction[hubId] = false;\n        pairingDevicesDeltaHandler(hubId, true, []);\n        resolve('ok');\n      })\n      .catch((error) => {\n      // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK: pairingStopped error: ', error.message);\n        stopPairingInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Stop pairing on all hubs\n * @return none\n */\nexport function stopPairings() {\n  const hubs = getHubs();\n  (Object.values(hubs)).forEach((hub) => {\n    stopPairingById(hub.id)\n      .then(() => console.debug('SDK: pairingStopped: ', hub.id))\n      .catch(() => console.log('SDK: pairingStopped error: ', hub.id));\n  });\n}\n\n/*\n** Polling\n*/\nconst pollIntervals = {};\nconst pollingStopped = {};\nconst pollTimeStamp = {};\nconst pollInAction = {};\nconst secondPoll = {};\n\n\n/**\n * Do poll on given hub if hub connection is ok.\n * Remote polls are executed only every second call.\n * @param {string} hubId\n * @param {booleam} reset - set true for full scan, false if delta only\n * @return {Promise} status or error\n */\nexport function doPoll(hubId, reset = false) {\n  return new Promise((resolve, reject) => {\n    let doReset = reset;\n    if (doReset) pollTimeStamp[hubId] = 0;\n    doReset = pollTimeStamp[hubId] === 0;\n\n    if (pollingStopped[hubId]) {\n      console.debug('doPolling: polling stopped');\n      resolve('stopped');\n      return;\n    }\n    if (!pollTimeStamp[hubId]) {\n      pollTimeStamp[hubId] = 0;\n    }\n    const hub = getHubs()[hubId];\n\n    if (!hub || (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE)) {\n      console.warn('SDK doPoll: No Hub connection');\n      reject(new Error('doPoll error: No Hub connection'));\n      return;\n    }\n\n    console.debug('doPoll connection state: ', hub.connectionState);\n\n    // just return every second -> not doing so often as in local connection\n    if (hub.connectionState === HUB_CONNECTION_STATES.REMOTE && !doReset) {\n      if (secondPoll[hubId]) {\n        secondPoll[hubId] = false;\n        resolve('skipped');\n        return;\n      }\n      secondPoll[hubId] = true;\n    }\n\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    if (pollInAction[hubId]) {\n      reject(new Error('doPoll error: Already polling'));\n      return;\n    }\n    pollInAction[hubId] = true;\n\n    send({\n      command: COMMANDS.POLL, hubId, authKey, hubKey, localUrl: hub.url, data: { ts: pollTimeStamp[hubId] },\n    })\n      .then((deltas) => {\n        if (deltas) {\n        // console.log(JSON.stringify(deltas));\n        // Return can be null poll, even if not asked that\n          if (pollTimeStamp[hubId] === 0 || deltas.full) {\n            doReset = true;\n          }\n\n          pollTimeStamp[hubId] = deltas.timestamp;\n\n          deltas.polls.forEach((delta) => {\n            switch (delta.type) {\n              case 'DEVICE_DELTA': {\n                devicesDeltaHandler(hubId, doReset, delta.devices);\n                break;\n              }\n              case 'GROUP_DELTA': {\n                break;\n              }\n              case 'SCENE_DELTA': {\n                break;\n              }\n              case 'RULE_DELTA': {\n                break;\n              }\n              case 'USERS_DELTA': {\n                break;\n              }\n              case 'ROOM_DELTA': {\n                roomsDeltaHandler(hubId, doReset, delta.rooms);\n                break;\n              }\n              case 'ZONE_DELTA': {\n                break;\n              }\n              case 'USER_ALERTS': {\n                // alertsDeltaHandler(hubId, doReset, delta.alerts);\n                break;\n              }\n              case 'ALARM_DELTA': {\n                alarmsDeltaHandler(hubId, doReset, delta.alarms);\n                break;\n              }\n              default: {\n                break;\n              }\n            }\n          });\n        }\n        pollInAction[hubId] = false;\n        resolve(deltas);\n      })\n      .catch((error) => {\n      // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK doPoll error: ', error.message);\n        pollInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n\n/**\n * Start polling on given hub\n * @param {string} hubId\n * @return {Promise} status or error\n */\nexport function startPollingById(hubId) {\n  pollingStopped[hubId] = false;\n  const intervalTime = POLL_INTERVAL_MS;\n  const pollCall = (callHubId) => doPoll(callHubId).then(() => {}).catch(() => {});\n  try {\n    pollIntervals[hubId] = setInterval(pollCall, intervalTime, hubId);\n  } catch (error) {\n    console.error('Catch startPollingById: ', error);\n  }\n  return doPoll(hubId);\n}\n\n/**\n * Stop polling on given hub\n * @param {string} hubId   - hub id to be selected\n * @return none\n */\nexport function stopPollingById(hubId) {\n  pollingStopped[hubId] = true;\n  clearInterval(pollIntervals[hubId]);\n}\n\n\n/**\n * Select hub by id, starts hub polling\n * @param  {string} hubId\n * @param  {boolean} poll - flag to start polling when connected, defaults to false\n * @return {Promise} status or error\n */\nexport function selectHubById(hubId, poll = false) {\n  return new Promise((resolve, reject) => {\n    const hubs = getHubs();\n    if (!isEmpty(hubs)) {\n      let pollingHub = null;\n      const error = null;\n      (Object.values(hubs)).every((hub) => {\n        if (hubId === hub.id) {\n          store.dispatch(hubsState.actions.selectHub({ hubId: hub.id }));\n          if (poll) {\n            pollingHub = startPollingById(hub.id);\n            return false; // break\n          }\n          console.debug('SDK selectHubById: Ready to start polling');\n          return false; // break\n        }\n        return true; // continue\n      });\n      if (pollingHub) {\n        return pollingHub.then((status) => resolve(status)).catch(() => resolve('polling started'));\n      }\n      if (error) {\n        reject(error);\n      } else if (!pollingHub && poll) {\n        reject(new Error('hub not found'));\n      } else {\n        resolve('ready to poll');\n      }\n      return true;\n    }\n    reject(new Error('no hubs'));\n    return true;\n  });\n}\n\n\n/**\n * Unselect hub by id, stops hub polling\n * @param  {string} hubId   - hub id to be selected\n * @return none\n */\nexport function unSelectHubById(hubId) {\n  const hubs = getHubs();\n  (Object.values(hubs)).forEach((hub) => {\n    if (hubId === hub.id) {\n      store.dispatch(hubsState.actions.unSelectHub({ hubId: hub.id }));\n      stopPollingById(hub.id);\n    }\n  });\n}\n\n/**\n * Unselect hubs, stops hub pollings\n * @return none\n */\nexport function unSelectHubs() {\n  const hubs = getHubs();\n  (Object.values(hubs)).forEach((hub) => {\n    store.dispatch(hubsState.actions.unSelectHub({ hubId: hub.id }));\n    stopPollingById(hub.id);\n  });\n}\n\n/**\n * Connect to the given hub - local or remote.\n * @param  {string} hubId\n * @param  {string} hubKey\n * @param  {boolean} discovery true to make remote discovery, false to start without discovery\n * @param  {boolean} sync true to wait local hubs reply (in case of discovery), false to start with remote connection\n * @return {Promise} current hubs, should not reject never\n */\nexport function connectHubByTokens(hubId, hubKey, discovery = false, sync = true) {\n  return new Promise((resolve, reject) => {\n    const { authKey } = storedUser();\n    if (!hubId) reject(new Error('No Hub Id'));\n    if (!hubKey) reject(new Error('No hubKey'));\n    if (!authKey) reject(new Error('No AuthKey'));\n    const tokens = {};\n    makeHubsMap(tokens, discovery, sync).then(() => {\n      selectHubById(hubId, false).then(() => {\n        resolve(getHubs());\n      }).catch((error) => reject(error));\n    }).catch((error) => reject(error));\n  });\n}\n\nexport function connectHubBySite(hubId, siteId, discovery = false, sync = true) {\n  return new Promise((resolve, reject) => {\n    const { authKey } = storedUser();\n    if (!hubId) reject(new Error('No Hub Id'));\n    if (!authKey) reject(new Error('No AuthKey'));\n    const tokens = {};\n    tokens[hubId] = null;\n    makeHubsMap(tokens, discovery, sync).then(() => {\n      selectHubById(hubId, false).then(() => {\n        resolve(getHubs());\n      }).catch((error) => reject(error));\n    }).catch((error) => reject(error));\n  });\n}\n/*\n * Listener of User state changes\n * Hub discovery is started when user's new state is AUTHENTICATED\n */\nwatchChanges('user.state', (newState) => {\n  // Start discovery when user is authenticated\n  if (newState === USER_STATES.AUTHENTICATED) {\n    startDiscoveringHubs();\n  }\n});\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/hubs/hubs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "hubsMap",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~hubsMap",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "extractHubInfo",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~extractHubInfo",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "HUBKeys",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "updateFoundHub",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~updateFoundHub",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubURL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hub",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "lockAndBackup",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~lockAndBackup",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{lockAndBackup}",
    "description": "",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "authKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubKey",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "doRemoteIdQuery",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doRemoteIdQuery",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{doRemoteIdQuery}",
    "description": "",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "authKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubKey",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "doLocalIdQuery",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doLocalIdQuery",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ip",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "getHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~getHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{getHubs}",
    "description": "Helper to get current hubs from state",
    "lineNumber": 157,
    "return": {
      "nullable": null,
      "types": [
        "HUBS_MAP_TYPE"
      ],
      "spread": false,
      "description": "hubs"
    },
    "params": []
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "setSelectedHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~setSelectedHubs",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newHubs",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "doCloudDiscovery",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doCloudDiscovery",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 179,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "fetchCloudMetaData",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~fetchCloudMetaData",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubs",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "authKey",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "storedUser",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~storedUser",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "Helper to get current user from state ",
    "lineNumber": 233,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "makeHubsMap",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~makeHubsMap",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "isCloudDiscovery",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "isSynchnonously",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "fetchHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~fetchHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{fetchHubs}",
    "description": "",
    "lineNumber": 274,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "startDiscoveringHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~startDiscoveringHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{startDiscoveringHubs}",
    "description": "Start discovering hubs every DISCOVERY_INTERVAL_MS\nSequence includes requests of hub-keys, remote meta-infos, lan-ips and local meta-infos",
    "lineNumber": 303,
    "params": [],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "stopDiscoveringHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~stopDiscoveringHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{stopDiscoveringHubs}",
    "description": "Stop discovering hubs",
    "lineNumber": 315,
    "params": [],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "pairingIntervals",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pairingIntervals",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "pairingStopped",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pairingStopped",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 324,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "pairingTimeStamp",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pairingTimeStamp",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "pairingInAction",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pairingInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "doPairingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doPairingById",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "reset",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "ignorePairingByIds",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~ignorePairingByIds",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{ignorePairingByIds}",
    "description": "Set pairing ignore flag of given device in given hub",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "ignore",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "startPairingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~startPairingById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{startPairingById}",
    "description": "Start pairing on given hub",
    "lineNumber": 419,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "booleam"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": "set true for full scan, false if delta only"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "stopPairingInAction",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~stopPairingInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "stopPairingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~stopPairingById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{stopPairingById}",
    "description": "Stop pairing on given hub",
    "lineNumber": 437,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "stopPairings",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~stopPairings",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{stopPairings}",
    "description": "Stop pairing on all hubs",
    "lineNumber": 475,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "none"
    },
    "params": []
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "pollIntervals",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pollIntervals",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 487,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "pollingStopped",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pollingStopped",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "pollTimeStamp",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pollTimeStamp",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 489,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "pollInAction",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pollInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 490,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "secondPoll",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~secondPoll",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 491,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "doPoll",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doPoll",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{doPoll}",
    "description": "Do poll on given hub if hub connection is ok.\nRemote polls are executed only every second call.",
    "lineNumber": 501,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "booleam"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": "set true for full scan, false if delta only"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "status or error"
    }
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "startPollingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~startPollingById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{startPollingById}",
    "description": "Start polling on given hub",
    "lineNumber": 614,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "status or error"
    }
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "stopPollingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~stopPollingById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{stopPollingById}",
    "description": "Stop polling on given hub",
    "lineNumber": 631,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": "hub id to be selected"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "none"
    }
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "selectHubById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~selectHubById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{selectHubById}",
    "description": "Select hub by id, starts hub polling",
    "lineNumber": 643,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "poll",
        "description": "flag to start polling when connected, defaults to false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "status or error"
    }
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "unSelectHubById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~unSelectHubById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{unSelectHubById}",
    "description": "Unselect hub by id, stops hub polling",
    "lineNumber": 684,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": "hub id to be selected"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "none"
    }
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "unSelectHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~unSelectHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{unSelectHubs}",
    "description": "Unselect hubs, stops hub pollings",
    "lineNumber": 698,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "none"
    },
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "connectHubByTokens",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~connectHubByTokens",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{connectHubByTokens}",
    "description": "Connect to the given hub - local or remote.",
    "lineNumber": 714,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "discovery",
        "description": "true to make remote discovery, false to start without discovery"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "sync",
        "description": "true to wait local hubs reply (in case of discovery), false to start with remote connection"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "current hubs, should not reject never"
    }
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "connectHubBySite",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~connectHubBySite",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{connectHubBySite}",
    "description": "",
    "lineNumber": 729,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "siteId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "discovery",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "sync",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/hubs/modbus.js",
    "content": "// \n// import isEmpty from 'lodash/isEmpty';\nimport { HUB_CONNECTION_STATES } from '../connection/constants';\nimport { COMMANDS, send } from '../connection/send';\nimport { store } from '../store';\nimport { hubsState } from '../reducers/hubs';\nimport { userState } from '../reducers/user';\n\n\n\n/**\n * Helper to get current user from state\n */\nfunction storedUser() {\n  return userState.selectors.getUser(store.getState());\n}\n\n/**\n * Helper to get current hubs from state\n * @return {HUBS_MAP_TYPE} - hubs\n */\nexport function getHubs() {\n  return hubsState.selectors.getHubs(store.getState());\n}\n\n// const modbusDevices: Object = {};\n\n/*\n * Get hub modbus devices\n * @param {string} hubId\n * @return {Promise}\n */\nexport async function getModbusDevicePairings(hubId) {\n  return new Promise((resolve, reject) => {\n    const hub = getHubs()[hubId];\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    console.debug('getModbusDevices connection state: ', hub.connectionState);\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.warn('SDK getModbusDevices: no Hub connection');\n      reject(new Error('no hub connection'));\n      return;\n    }\n\n    send({\n      command: COMMANDS.GET_MODBUS_DEVICE_PAIRINGS, hubId, authKey, hubKey, localUrl: hub.url, data: [],\n    })\n      .then((data) => {\n        console.info('SDK: getModbusDevicePairings success: ', data);\n        return resolve(data);\n      })\n      .catch((error) => {\n        console.error('SDK: getModbusDevicePairings error: ', error.message);\n        reject(error);\n      });\n  });\n}\n\n/*\n * Set hub modbus devices\n * @param {string} hubId\n * @param {MODBUS_DEVICE_PAIRING_TYPES} modbusDevices\n * @return {Promise}\n */\nexport async function setModbusDevicePairings(hubId, modbusDevices) {\n  return new Promise((resolve, reject) => {\n    const hub = getHubs()[hubId];\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    console.debug('setModbusDevices connection state: ', hub.connectionState);\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.warn('SDK setModbusDevices: no Hub connection');\n      reject(new Error('no hub connection'));\n      return;\n    }\n\n    let invalidData = false;\n    const data = [];\n    modbusDevices.map((device) => {\n      if (!device.address) {\n        invalidData = true;\n        reject(new Error('Invalid address'));\n      }\n      if (!device.deviceType) {\n        invalidData = true;\n        reject(new Error('Invalid device type'));\n      }\n      const item = {\n        address: Number(device.address),\n        deviceType: device.deviceType,\n        name: device.name || '',\n        readDeviceIdSupported: device.readDeviceIdSupported,\n        registerRequired: device.registerRequired,\n        register: undefined,\n        registerType: undefined,\n        normallyOff: false,\n        type: 'PAIR_MODBUS',\n      };\n      if (device.deviceType === 'RELAY' || device.deviceType === 'SIGNAL') {\n        item.normallyOff = !!device.normallyOff;\n      }\n      if ((device.name != null) && (device.name.length > 0) && (device.address != null) && ((device.address <= 247) && (device.address > 0))) {\n        if (device.registerRequired) {\n          if ((device.register != null) && (device.register >= 0) && (device.register <= 65535) && device.registerType) {\n            item.registerRequired = true;\n            item.register = Number(device.register);\n            item.registerType = Number(device.registerType);\n          } else {\n            invalidData = true;\n            reject(new Error('Invalid register data'));\n          }\n        } else {\n          item.registerRequired = false;\n        }\n      } else {\n        invalidData = true;\n        reject(new Error('Invalid name or address data'));\n      }\n      data.push(item);\n      return true;\n    });\n\n    if (!invalidData && data.length > 0) {\n      send({\n        command: COMMANDS.SET_MODBUS_DEVICE_PAIRINGS, hubId, authKey, hubKey, localUrl: hub.url, data,\n      })\n        .then((reply) => {\n          console.info('SDK: setModbusDevicePairings success: ', reply);\n          if (reply && reply === true) {\n            return resolve(reply);\n          }\n          return reject(new Error(reply ? reply.message : 'unknown error'));\n        })\n        .catch((error) => {\n          console.error('SDK: setModbusDevicePairings error: ', error.message);\n          reject(error);\n        });\n    } else {\n      reject(new Error('Invalid data'));\n    }\n  });\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/hubs/modbus.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "storedUser",
    "memberof": "src/hubs/modbus.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/modbus.js~storedUser",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/modbus.js",
    "importStyle": null,
    "description": "Helper to get current user from state ",
    "lineNumber": 14,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "getHubs",
    "memberof": "src/hubs/modbus.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/modbus.js~getHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/modbus.js",
    "importStyle": "{getHubs}",
    "description": "Helper to get current hubs from state",
    "lineNumber": 22,
    "return": {
      "nullable": null,
      "types": [
        "HUBS_MAP_TYPE"
      ],
      "spread": false,
      "description": "hubs"
    },
    "params": []
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "getModbusDevicePairings",
    "memberof": "src/hubs/modbus.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/modbus.js~getModbusDevicePairings",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/modbus.js",
    "importStyle": "{getModbusDevicePairings}",
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "setModbusDevicePairings",
    "memberof": "src/hubs/modbus.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/modbus.js~setModbusDevicePairings",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/modbus.js",
    "importStyle": "{setModbusDevicePairings}",
    "description": "",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modbusDevices",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/hubs/zwave.js",
    "content": "\n// \n// import isEmpty from 'lodash/isEmpty';\nimport {\n  ZWAVE_INCLUSION_STATUS, ZWAVE_EXCLUSION_STATUS, ZWAVE_INCLUSION_INTERVAL_MS, ZWAVE_EXCLUSION_INTERVAL_MS,\n} from './constants';\n// import { USER_STATES, ROLES } from '../user/constants';\nimport { HUB_CONNECTION_STATES } from '../connection/constants';\nimport { COMMANDS, send } from '../connection/send';\nimport { store } from '../store';\nimport { hubsState } from '../reducers/hubs';\nimport { userState } from '../reducers/user';\n\n\n\n/**\n * Helper to get current user from state\n */\nfunction storedUser() {\n  return userState.selectors.getUser(store.getState());\n}\n\n/**\n * Helper to get current hubs from state\n * @return {HUBS_MAP_TYPE} - hubs\n */\nexport function getHubs() {\n  return hubsState.selectors.getHubs(store.getState());\n}\n\n/*\n** Z-wave inclusion\n */\n\nconst inclusionStopped = {};\nconst inclusionInAction = {};\nconst stopInclusionInAction = {};\nconst inclusionState = {};\n\n\n/*\n * Start inclusion of given hub if hub connection is ok\n * @param {string} hubId\n * @return {Promise}\n */\nfunction startZwaveInclusion(hubId) {\n  return new Promise((resolve, reject) => {\n    if (inclusionStopped[hubId]) {\n      console.debug('startZwaveInclusion: inclusion stopped');\n      reject(new Error('inclusion stopped'));\n      return;\n    }\n    const hub = getHubs()[hubId];\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    console.debug('startZwaveInclusion connection state: ', hub.connectionState);\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.warn('SDK startZwaveInclusion: no Hub connection');\n      reject(new Error('no hub connection'));\n      return;\n    }\n\n    if (inclusionInAction[hubId]) {\n      reject(new Error('inclusion already in action'));\n      return;\n    }\n    inclusionInAction[hubId] = true;\n\n    send({\n      command: COMMANDS.ZWAVE_START_INCLUSION, hubId, authKey, hubKey, localUrl: hub.url, data: [],\n    })\n      .then((state) => {\n        inclusionState[hubId] = state;\n        inclusionInAction[hubId] = false;\n        if (state) {\n          if (state.status === ZWAVE_INCLUSION_STATUS.RUNNING) {\n            resolve(state);\n          } else {\n            reject(state);\n          }\n        } else {\n          reject(new Error('No inclusion state received'));\n        }\n      })\n      .catch((error) => {\n      // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK: startZwaveInclusion error: ', error.message);\n        inclusionInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/*\n * Ask inclusion status of given hub if hub connection is ok\n * @param {string} hubId\n * @return {Promise}\n */\nfunction askZwaveInclusionStatus(hubId) {\n  return new Promise((resolve, reject) => {\n    if (inclusionStopped[hubId]) {\n      console.debug('askZwaveInclusionStatus: inclusion stopped');\n      reject(new Error('inclusion stopped'));\n      return;\n    }\n    const hub = getHubs()[hubId];\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    console.debug('askZwaveInclusionStatus connection state: ', hub.connectionState);\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.warn('SDK askZwaveInclusionStatus: no Hub connection');\n      reject(new Error('no hub connection'));\n      return;\n    }\n\n    if (inclusionInAction[hubId]) {\n      reject(new Error('inclusion already in action'));\n      return;\n    }\n    inclusionInAction[hubId] = true;\n\n    send({\n      command: COMMANDS.ZWAVE_INCLUSION_STATUS, hubId, authKey, hubKey, localUrl: hub.url, data: [],\n    })\n      .then((state) => {\n        inclusionState[hubId] = state;\n        inclusionInAction[hubId] = false;\n        resolve(state);\n      })\n      .catch((error) => {\n      // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK: askZwaveInclusionStatus error: ', error.message);\n        inclusionInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n\nfunction askZwaveInclusionStatusPromise(hubId, resolve, reject) {\n  askZwaveInclusionStatus(hubId)\n    .then((state) => {\n      if (state && state.status) {\n        switch (state.status) {\n          case ZWAVE_INCLUSION_STATUS.RUNNING: {\n            // sleep 5s and try again\n            setTimeout(() => {\n              askZwaveInclusionStatusPromise(hubId, resolve, reject);\n            }, ZWAVE_INCLUSION_INTERVAL_MS);\n            break;\n          }\n          case ZWAVE_INCLUSION_STATUS.SUCCESS: {\n            resolve(true);\n            break;\n          }\n          case ZWAVE_INCLUSION_STATUS.TIMEOUT: {\n            resolve(false);\n            break;\n          }\n          case ZWAVE_INCLUSION_STATUS.CANCEL: {\n            resolve(false);\n            break;\n          }\n          default: {\n            reject(new Error('Invalid inclusion state'));\n            break;\n          }\n        }\n      } else {\n        reject(new Error('Invalid inclusion state'));\n      }\n    })\n    .catch((error) => {\n      console.error('Error in askZwaveInclusionStatusPromise: ', error);\n      reject(error);\n    });\n}\n\n\n/**\n * Start zwave inclusion on given hub\n * @param {string} hubId\n * @return {Promise} that resolves true if device found and false if not\n */\nexport async function doZwaveInclusion(hubId) {\n  return new Promise((resolve, reject) => {\n    inclusionStopped[hubId] = false;\n\n    startZwaveInclusion(hubId)\n      .then((state) => {\n        if (state && state.status === ZWAVE_INCLUSION_STATUS.RUNNING) {\n          new Promise((r, j) => {\n            askZwaveInclusionStatusPromise(hubId, r, j);\n          }).then((result) => {\n            resolve(result);\n          }).catch((error) => {\n            reject(error);\n          });\n        } else {\n          reject(new Error('Wrong inclusion status'));\n        }\n      })\n      .catch((error) => {\n        console.error('Error in doZwavePairing: ', error);\n        reject(error);\n      });\n  });\n}\n\n\n/**\n * Stop zwave inclusion on given hub\n * @param {string} hubId\n * @return {Promise}\n */\nexport async function stopZwaveInclusion(hubId) {\n  return new Promise((resolve, reject) => {\n    if (stopInclusionInAction[hubId]) {\n      reject(new Error('stopInclusionById already stopping'));\n      return;\n    }\n    stopInclusionInAction[hubId] = true;\n\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n\n    send({\n      command: COMMANDS.ZWAVE_STOP_INCLUSION, hubId, authKey, hubKey, localUrl: hub.url, data: [],\n    })\n      .then((status) => {\n        console.debug('SDK: stopZwavePairing: Ok , status: ', status);\n        inclusionStopped[hubId] = true;\n        stopInclusionInAction[hubId] = false;\n        resolve('ok');\n      })\n      .catch((error) => {\n        console.error('SDK: stopZwavePairing error: ', error.message);\n        stopInclusionInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Test if zwave of given hub is enabled\n * @param {string} hubId\n * @return {Promise} that resolves true if zwave is enabled\n\nexport async function isZwaveEnabled(hubId: string): Promise<Object> {\n  return new Promise((resolve, reject) => {\n    askZwaveInclusionStatus(hubId)\n      .then((state) => {\n        if (state !== ZWAVE_INCLUSION_STATES.NO_ZWAVE) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      })\n      .catch((error) => {\n        console.error('Error in isZwaveById: ', error);\n        reject(error);\n      });\n  });\n}\n*/\n\n\n/*\n**\n** Z-wave exclusion\n**\n */\n\n\nconst exclusionStopped = {};\nconst exclusionInAction = {};\nconst stopExclusionInAction = {};\nconst exclusionState = {};\n\n/*\n * Start exclusion of given hub if hub connection is ok\n * @param {string} hubId\n * @return {Promise}\n */\nfunction startZwaveExclusion(hubId) {\n  return new Promise((resolve, reject) => {\n    if (exclusionStopped[hubId]) {\n      console.debug('startZwaveExclusion: exclusion stopped');\n      reject(new Error('exclusion stopped'));\n      return;\n    }\n    const hub = getHubs()[hubId];\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    console.debug('startZwaveExclusion connection state: ', hub.connectionState);\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.warn('SDK startZwaveExclusion: no Hub connection');\n      reject(new Error('no hub connection'));\n      return;\n    }\n\n    if (exclusionInAction[hubId]) {\n      reject(new Error('exclusion already in action'));\n      return;\n    }\n    exclusionInAction[hubId] = true;\n    send({\n      command: COMMANDS.ZWAVE_START_EXCLUSION, hubId, authKey, hubKey, localUrl: hub.url, data: [],\n    })\n      .then((state) => {\n        exclusionState[hubId] = state;\n        exclusionInAction[hubId] = false;\n        if (state.status === ZWAVE_EXCLUSION_STATUS.RUNNING) {\n          resolve(state);\n        } else {\n          console.error('SDK: doExclusionById - wrong state: ', state);\n          reject(state);\n        }\n      })\n      .catch((error) => {\n        // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK: doExclusionById error: ', error.message);\n        exclusionInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/*\n * Ask exclusion status of given hub if hub connection is ok\n * @param {string} hubId\n * @return {Promise}\n */\nfunction askZwaveExclusionStatus(hubId) {\n  return new Promise((resolve, reject) => {\n    if (exclusionStopped[hubId]) {\n      console.debug('askZwaveExclusionStatus: exclusion stopped');\n      reject(new Error('exclusion stopped'));\n      return;\n    }\n    const hub = getHubs()[hubId];\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    console.debug('askZwaveExclusionStatus connection state: ', hub.connectionState);\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.warn('SDK askZwaveExclusionStatus: no Hub connection');\n      reject(new Error('no hub connection'));\n      return;\n    }\n    if (exclusionInAction[hubId]) {\n      reject(new Error('exclusion already in action'));\n      return;\n    }\n    exclusionInAction[hubId] = true;\n    send({\n      command: COMMANDS.ZWAVE_EXCLUSION_STATUS, hubId, authKey, hubKey, localUrl: hub.url, data: [],\n    })\n      .then((state) => {\n        exclusionState[hubId] = state;\n        exclusionInAction[hubId] = false;\n        resolve(state);\n      })\n      .catch((error) => {\n        // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK: askZwaveExclusionStatus error: ', error.message);\n        exclusionInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n\nfunction askZwaveExclusionStatusPromise(hubId, resolve, reject) {\n  askZwaveExclusionStatus(hubId)\n    .then((state) => {\n      if (state && state.status) {\n        switch (state.status) {\n          case ZWAVE_EXCLUSION_STATUS.RUNNING: {\n            // sleep 5s and try again\n            setTimeout(() => {\n              askZwaveExclusionStatusPromise(hubId, resolve, reject);\n            }, ZWAVE_EXCLUSION_INTERVAL_MS);\n            break;\n          }\n          case ZWAVE_EXCLUSION_STATUS.SUCCESS: {\n            resolve(true);\n            break;\n          }\n          case ZWAVE_EXCLUSION_STATUS.TIMEOUT: {\n            resolve(false);\n            break;\n          }\n          case ZWAVE_EXCLUSION_STATUS.CANCEL: {\n            resolve(false);\n            break;\n          }\n          default: {\n            reject(new Error('Wrong exclusion status'));\n            break;\n          }\n        }\n      } else {\n        reject(new Error('Wrong exclusion status'));\n      }\n    })\n    .catch((error) => {\n      console.error('Error in askZwaveExclusionStatusPromise: ', error);\n      reject(error);\n    });\n}\n\n\n/**\n * Start zwave exclusion on given hub\n * @param {string} hubId\n * @return {Promise} that resolves true if device found and false if not\n */\nexport async function doZwaveExclusion(hubId) {\n  return new Promise((resolve, reject) => {\n    exclusionStopped[hubId] = false;\n\n    startZwaveExclusion(hubId)\n      .then((state) => {\n        if (state && state.status === ZWAVE_EXCLUSION_STATUS.RUNNING) {\n          new Promise((r, j) => {\n            askZwaveExclusionStatusPromise(hubId, r, j);\n          }).then((result) => {\n            resolve(result);\n          }).catch((error) => {\n            reject(error);\n          });\n        } else {\n          reject(new Error('Wrong exclusion status'));\n        }\n      })\n      .catch((error) => {\n        console.error('Error in doZwaveExclusion: ', error);\n        reject(error);\n      });\n  });\n}\n\n\n/**\n * Stop zwave exclusion on given hub\n * @param {string} hubId\n * @return {Promise}\n */\nexport async function stopZwaveExclusion(hubId) {\n  return new Promise((resolve, reject) => {\n    if (stopExclusionInAction[hubId]) {\n      reject(new Error('stopExclusionById already stopping'));\n      return;\n    }\n    stopExclusionInAction[hubId] = true;\n\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n\n    send({\n      command: COMMANDS.ZWAVE_STOP_EXCLUSION, hubId, authKey, hubKey, localUrl: hub.url, data: [],\n    })\n      .then((status) => {\n        console.debug('SDK: stopZwaveExclusion: Ok , status: ', status);\n        exclusionStopped[hubId] = true;\n        stopExclusionInAction[hubId] = false;\n        resolve('ok');\n      })\n      .catch((error) => {\n        console.error('SDK: stopZwaveExclusion error: ', error.message);\n        stopExclusionInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Test if zwave of given hub is enabled\n * @param {string} hubId\n * @return {Promise} that resolves true if zwave is enabled\n */\nexport async function isZwaveEnabled(hubId) {\n  return new Promise((resolve, reject) => {\n    askZwaveExclusionStatus(hubId)\n      .then((state) => {\n        if (state) {\n          if (state.status !== ZWAVE_EXCLUSION_STATUS.NO_ZWAVE) {\n            resolve(true);\n          } else {\n            resolve(false);\n          }\n        } else {\n          resolve(false);\n        }\n      })\n      .catch((error) => {\n        console.error('Error in isZwaveEnabled: ', error);\n        reject(error);\n      });\n  });\n}\n\n\n/*\n**\n** Z-wave healing\n**\n */\n\nconst healingInAction = {};\n\n\n/**\n * Start healing of Zwave network\n * @param {string} hubId\n * @return {Promise} that resolves true when done\n */\nexport async function healZwave(hubId) {\n  return new Promise((resolve, reject) => {\n    if (healingInAction[hubId]) {\n      reject(new Error('healingInAction already in action'));\n      return;\n    }\n    healingInAction[hubId] = true;\n\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n\n    send({\n      command: COMMANDS.ZWAVE_HEAL, hubId, authKey, hubKey, localUrl: hub.url, data: [],\n    })\n      .then((status) => {\n        console.debug('SDK: healZwave: Ok , status: ', status);\n        healingInAction[hubId] = false;\n        resolve('ok');\n      })\n      .catch((error) => {\n        console.error('SDK: healZwave error: ', error.message);\n        healingInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/*\n**\n** Z-wave nodes\n**\n */\n\nconst nodesInAction = {};\n\n\n/**\n * Get Z-Wave nodes\n * @param {string} hubId\n * @return {Promise} that resolves node list when done\n */\nexport async function getZwaveNodes(hubId) {\n  return new Promise((resolve, reject) => {\n    if (nodesInAction[hubId]) {\n      reject(new Error('nodesInAction already in action'));\n      return;\n    }\n    nodesInAction[hubId] = true;\n\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n\n    send({\n      command: COMMANDS.ZWAVE_GET_NODES, hubId, authKey, hubKey, localUrl: hub.url, data: [],\n    })\n      .then((data) => {\n        console.debug('SDK: getZwaveNodes: Ok , data: ', data);\n        nodesInAction[hubId] = false;\n        resolve(data);\n      })\n      .catch((error) => {\n        console.error('SDK: getZwaveNodes error: ', error.message);\n        nodesInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n\n/**\n * Get Z-Wave nodes\n * @param {string} hubId\n * @param {string} nodeId\n * @return {Promise} that resolves node list when done\n */\nexport async function checkIsFailedZWaveNode(hubId, nodeId) {\n  return new Promise((resolve, reject) => {\n    /*\n    if (nodesInActionNode[hubId]) {\n      reject(new Error('nodesInAction already in action'));\n      return;\n    }\n    nodesInAction[hubId] = true;\n    */\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n\n    send({\n      command: COMMANDS.ZWAVE_CHECK_IS_FAILED_NODE, hubId, authKey, hubKey, localUrl: hub.url, data: [{ nodeId }],\n    })\n      .then((data) => {\n        console.debug('SDK: checkIsFailedZWaveNode: Ok , data: ', data);\n        if (data && data.status === 0) {\n          nodesInAction[hubId] = false;\n          if (data.isFailed) {\n            resolve(true);\n          } else {\n            resolve(false);\n          }\n        } else {\n          console.error('SDK: checkIsFailedZWaveNode error: ', data ? data.status : 'unknown');\n          nodesInAction[hubId] = false;\n          reject(data.status);\n        }\n      })\n      .catch((error) => {\n        console.error('SDK: checkIsFailedZWaveNode error: ', error.message);\n        nodesInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n\n/**\n * Get Z-Wave nodes\n * @param {string} hubId\n * @param {string} nodeId\n * @return {Promise} that resolves node list when done\n */\nexport async function removeFailedZWaveNode(hubId, nodeId) {\n  return new Promise((resolve, reject) => {\n    /*\n    if (nodesInAction[hubId]) {\n      reject(new Error('nodesInAction already in action'));\n      return;\n    }\n    nodesInAction[hubId] = true;\n    */\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n\n    send({\n      command: COMMANDS.ZWAVE_REMOVE_FAILED_NODE, hubId, authKey, hubKey, localUrl: hub.url, data: [{ nodeId }],\n    })\n      .then((data) => {\n        console.debug('SDK: removeFailedZWaveNode: Ok , data: ', data);\n        if (data && data.status === 1) {\n          nodesInAction[hubId] = false;\n          resolve(true);\n        } else {\n          console.error('SDK: removeFailedZWaveNode error: ', data ? data.status : 'unknown');\n          nodesInAction[hubId] = false;\n          reject(data.status);\n        }\n      })\n      .catch((error) => {\n        console.error('SDK: removeFailedZWaveNode error: ', error.message);\n        nodesInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Get Z-Wave node parameter\n * @param {string} hubId\n * @param {string} nodeId\n * @param {number} parameter\n * @return {Promise} that resolves node list when done\n */\nexport async function getZWaveNodeParameter(hubId, nodeId, parameter) {\n  return new Promise((resolve, reject) => {\n    /*\n    if (nodesInAction[hubId]) {\n      reject(new Error('nodesInAction already in action'));\n      return;\n    }\n    nodesInAction[hubId] = true;\n    */\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n\n    send({\n      command: COMMANDS.ZWAVE_GET_NODE_CONFIGURATION, hubId, authKey, hubKey, localUrl: hub.url, data: [{ nodeId, parameter }],\n    })\n      .then((data) => {\n        if (data && data.status === 0) {\n          console.debug('SDK: getZWaveNodeParameter: Ok , data: ', data);\n          // nodesInAction[hubId] = false;\n          resolve(data);\n        } else {\n          console.error('SDK: getZWaveNodeParameter error: ', data ? data.status : 'unknown');\n          // nodesInAction[hubId] = false;\n          reject(new Error(`Getting ZWave node parem failed`));\n        }\n      })\n      .catch((error) => {\n        console.error('SDK: getZWaveNodeParameter error: ', error.message);\n        // nodesInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Set Z-Wave node parameter\n * @param {string} hubId\n * @param {string} nodeId\n * @param {number} parameter\n * @param {size} parameter\n * @param {boolean} default\n * @param {number} value\n * @return {Promise} that resolves node list when done\n */\nexport async function setZWaveNodeParameter(hubId, nodeId, parameter, size, def, val) {\n  return new Promise((resolve, reject) => {\n    /*\n    if (nodesInAction[hubId]) {\n      reject(new Error('nodesInAction already in action'));\n      return;\n    }\n    nodesInAction[hubId] = true;\n    */\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n    let value = val;\n    if (def) {\n      value = null;\n    }\n\n    send({\n      command: COMMANDS.ZWAVE_SET_NODE_CONFIGURATION,\n      hubId,\n      authKey,\n      hubKey,\n      localUrl: hub.url,\n      data: [{\n        nodeId, parameter, size, default: def, value,\n      }],\n    })\n      .then((data) => {\n        if (data && data.status === 0) {\n          console.debug('SDK: setZWaveNodeParameter: Ok , data: ', data);\n          // nodesInAction[hubId] = false;\n          resolve(data);\n        } else {\n          console.error('SDK: setZWaveNodeParameter error: ', data ? data.status : 'unknown');\n          // nodesInAction[hubId] = false;\n          reject(new Error(`Setting ZWave node parem failed`));\n        }\n        // nodesInAction[hubId] = false;\n        resolve(data);\n      })\n      .catch((error) => {\n        console.error('SDK: setZWaveNodeParameter error: ', error.message);\n        // nodesInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/hubs/zwave.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "storedUser",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/zwave.js~storedUser",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": "Helper to get current user from state ",
    "lineNumber": 19,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "getHubs",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/zwave.js~getHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{getHubs}",
    "description": "Helper to get current hubs from state",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "HUBS_MAP_TYPE"
      ],
      "spread": false,
      "description": "hubs"
    },
    "params": []
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "inclusionStopped",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~inclusionStopped",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "inclusionInAction",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~inclusionInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "stopInclusionInAction",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~stopInclusionInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "inclusionState",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~inclusionState",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "startZwaveInclusion",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/zwave.js~startZwaveInclusion",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "askZwaveInclusionStatus",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/zwave.js~askZwaveInclusionStatus",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "askZwaveInclusionStatusPromise",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/zwave.js~askZwaveInclusionStatusPromise",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "resolve",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reject",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "doZwaveInclusion",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~doZwaveInclusion",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{doZwaveInclusion}",
    "description": "Start zwave inclusion on given hub",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves true if device found and false if not"
    }
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "stopZwaveInclusion",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~stopZwaveInclusion",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{stopZwaveInclusion}",
    "description": "Stop zwave inclusion on given hub",
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "exclusionStopped",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~exclusionStopped",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": "Test if zwave of given hub is enabled",
    "lineNumber": 278,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves true if zwave is enabled\n\nexport async function isZwaveEnabled(hubId: string): Promise<Object> {\nreturn new Promise((resolve, reject) => {\naskZwaveInclusionStatus(hubId)\n.then((state) => {\nif (state !== ZWAVE_INCLUSION_STATES.NO_ZWAVE) {\nresolve(true);\n} else {\nresolve(false);\n}\n})\n.catch((error) => {\nconsole.error('Error in isZwaveById: ', error);\nreject(error);\n});\n});\n}"
    },
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "exclusionInAction",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~exclusionInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "stopExclusionInAction",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~stopExclusionInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "exclusionState",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~exclusionState",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "startZwaveExclusion",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/zwave.js~startZwaveExclusion",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "askZwaveExclusionStatus",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/zwave.js~askZwaveExclusionStatus",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "askZwaveExclusionStatusPromise",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/zwave.js~askZwaveExclusionStatusPromise",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 378,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "resolve",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reject",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "doZwaveExclusion",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~doZwaveExclusion",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{doZwaveExclusion}",
    "description": "Start zwave exclusion on given hub",
    "lineNumber": 423,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves true if device found and false if not"
    }
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "stopZwaveExclusion",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~stopZwaveExclusion",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{stopZwaveExclusion}",
    "description": "Stop zwave exclusion on given hub",
    "lineNumber": 454,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "isZwaveEnabled",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~isZwaveEnabled",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{isZwaveEnabled}",
    "description": "Test if zwave of given hub is enabled",
    "lineNumber": 488,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves true if zwave is enabled"
    }
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "healingInAction",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~healingInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 516,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "healZwave",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~healZwave",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{healZwave}",
    "description": "Start healing of Zwave network",
    "lineNumber": 524,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves true when done"
    }
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "nodesInAction",
    "memberof": "src/hubs/zwave.js",
    "static": true,
    "longname": "src/hubs/zwave.js~nodesInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 558,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "getZwaveNodes",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~getZwaveNodes",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{getZwaveNodes}",
    "description": "Get Z-Wave nodes",
    "lineNumber": 566,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves node list when done"
    }
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "checkIsFailedZWaveNode",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~checkIsFailedZWaveNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{checkIsFailedZWaveNode}",
    "description": "Get Z-Wave nodes",
    "lineNumber": 601,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves node list when done"
    }
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "removeFailedZWaveNode",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~removeFailedZWaveNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{removeFailedZWaveNode}",
    "description": "Get Z-Wave nodes",
    "lineNumber": 647,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves node list when done"
    }
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "getZWaveNodeParameter",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~getZWaveNodeParameter",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{getZWaveNodeParameter}",
    "description": "Get Z-Wave node parameter",
    "lineNumber": 689,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "parameter",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves node list when done"
    }
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "setZWaveNodeParameter",
    "memberof": "src/hubs/zwave.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/hubs/zwave.js~setZWaveNodeParameter",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/zwave.js",
    "importStyle": "{setZWaveNodeParameter}",
    "description": "Set Z-Wave node parameter",
    "lineNumber": 734,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "parameter",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "size"
        ],
        "spread": false,
        "optional": false,
        "name": "parameter",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "default",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves node list when done"
    }
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/index.js",
    "content": "// \n\n// try { process.env.NODE_ENV } catch(e) { var process = { env: { NODE_ENV: 'production' } }; }\n\n\nimport rootReducer from './reducers';\n\nexport { rootReducer as cozifyReducer };\nexport { store, watchChanges } from './store';\n\n// import logger from 'redux-logger'\n// const middleware = [...getDefaultMiddleware(), logger]\n\nexport {\n  CLOUD_CONNECTION_STATES, HUB_CONNECTION_STATES, useTestcloud, selectCloud,\n} from './connection/constants';\nexport { LANGUAGES, USER_STATES, ROLES } from './user/constants';\nexport { HUB_STATES, ZWAVE_INCLUSION_STATUS, ZWAVE_EXCLUSION_STATUS } from './hubs/constants';\n\nexport { getCloudConnectionState, getHubConnectionState } from './connection/state';\nexport {\n  changeLanguage, doPwLogin, setAuthenticated, acceptEula, getUserState,\n} from './user/user';\n\nexport {\n  fetchHubs,\n  getHubs, selectHubById, unSelectHubById, unSelectHubs, connectHubByTokens, connectHubBySite,\n  lockAndBackup,\n  startDiscoveringHubs, stopDiscoveringHubs,\n  startPollingById, stopPollingById,\n  startPairingById, stopPairingById, ignorePairingByIds, stopPairings,\n  doPoll, doRemoteIdQuery,\n} from './hubs/hubs';\nexport {\n  isZwaveEnabled,\n  doZwaveInclusion,\n  stopZwaveInclusion,\n  doZwaveExclusion,\n  stopZwaveExclusion,\n  healZwave,\n  getZwaveNodes,\n  checkIsFailedZWaveNode,\n  removeFailedZWaveNode,\n  getZWaveNodeParameter,\n  setZWaveNodeParameter,\n} from './hubs/zwave';\nexport {\n  getModbusDevicePairings, setModbusDevicePairings,\n} from './hubs/modbus';\nexport {\n  getDevices, getHubDevices,\n  getPairingDevices, getHubPairingDevices,\n} from './devices/devices';\nexport {\n  sendDeviceStateCmd, sendDeviceCmd,\n  unpairDevice, identifyDevice, setDeviceMeta,\n  setDeviceVisibility, setDeviceLocked,\n  setDeviceHotWater,\n} from './devices/device';\n\nexport {\n  getRooms, getHubRooms,\n  addRoom, editRoom, removeRoom,\n} from './rooms/rooms';\n\nexport {\n  getAlarms, getHubAlarms,\n  closeAlarm, removeAlarm,\n} from './alarms/alarms';\n\n\nexport {\n  reactSelectAllPlans,\n  reactSubscribePlans,\n  reactFetchPlans,\n  reactInsertPlan,\n  reactUpdatePlan,\n  reactRemovePlan,\n} from './reducers/plans';\n\nexport {\n  reactSelectAllDocuments,\n  reactSubscribePlanDocuments,\n  reactSelectPlanDocuments,\n  reactFetchPlanDocuments,\n  reactInsertPlanDocument,\n  reactUpdatePlanDocument,\n  reactRemovePlanDocument,\n} from './reducers/planDocuments';\n\nexport {\n  reactSelectAllDocumentNodes,\n  reactSubscribePlanDocumentNodes,\n  reactSelectPlanDocumentNodes,\n  reactFetchPlanDocumentNodes,\n  reactInsertPlanDocumentNode,\n  reactUpdatePlanDocumentNode,\n  reactRemovePlanDocumentNode,\n} from './reducers/planDocumentNodes';\n\nexport { PLAN_NODES } from './plans/constants';\n\nexport {\n  urlBase64Decode,\n} from './utils';\n\nexport { devicesState, setDevices, deleteDevice } from './reducers/devices';\nexport { hubsState, updateHubs } from './reducers/hubs';\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/plans/constants.js",
    "content": "// \nexport const PLAN_NODES = Object.freeze({\n  LOCATION: 'LOCATION',\n  TEMPLATE: 'TEMPLATE',\n  HUB: 'HUB',\n});\n\n\nexport const DUMMY = Object.freeze({\n  DUMMY: 'DUMMY',\n});\n\n\n\n\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/plans/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "PLAN_NODES",
    "memberof": "src/plans/constants.js",
    "static": true,
    "longname": "src/plans/constants.js~PLAN_NODES",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/constants.js",
    "importStyle": "{PLAN_NODES}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "DUMMY",
    "memberof": "src/plans/constants.js",
    "static": true,
    "longname": "src/plans/constants.js~DUMMY",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/constants.js",
    "importStyle": "{DUMMY}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/plans/plans.js",
    "content": "// \n// import isEmpty from 'lodash/isEmpty';\n// import isArray from 'lodash/isArray';\n// import pick from 'lodash/pick';\nimport { store } from '../store';\n// import { userState } from '../reducers/user';\nimport { plansState, reactFetchPlans } from '../reducers/plans';\nimport { planDocumentsState, reactFetchPlanDocuments } from '../reducers/planDocuments';\n// import { send, COMMANDS } from '../connection/send';\n// import uuid from 'uuid'\n\nexport function getPlans() {\n  const stateNow = store.getState();\n  return plansState.selectors.getPlans(stateNow);\n}\n\nexport function setPlans(plans) {\n  store.dispatch(plansState.actions.setPlansState(plans));\n}\n\nexport async function fetchPlans() {\n  return new Promise((resolve, reject) => {\n    try {\n      store.dispatch(reactFetchPlans());\n      // const stateNow = store.getState();\n      resolve(getPlans());\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n\nexport async function insertPlan() {\n  return new Promise((resolve, reject) => {\n    reject(new Error('removePlan TBD'));\n    /*  Was just test implementation of qql\n    client.mutate({\n      variables: {\n        \"object\": {\n          \"name\": \"uusi\",\n          \"documents\": {\n            \"data\": [\n              {\n                \"nodes\": {\n                  \"data\": [\n                    {\n                      \"data\": {\n                        \"rooms\": [\n                          \"$LIVINGROOM\"\n                        ],\n                        \"devices\": [],\n                        \"rules\": [],\n                        \"scenes\": [],\n                        \"type\": \"HUB\",\n                        \"name\": \"HUB 123\"\n                      }\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      },\n      mutation: INSERT_PLAN\n    })\n    .then((result) => {\n        debugger;\n        console.log(result.data.insert_t_plan_one)\n        // TODO Should list documents of plan\n        resolve({});\n      }).catch((error) => {\n        debugger;\n        console.error('SDK listPlans error:', error);\n        reject(error);\n      });\n    */\n  });\n}\n// const plansUrl = \"http://localhost:3001/plans\"\n// const plansUrl = 'https://localhost:8449/cc/0.1/partner/plans';\n\n\nexport function getPlanDocuments(planId) {\n  const stateNow = store.getState();\n  // const array = planDocumentsState.selectors.selectAll(stateNow);\n  // const entities = planDocumentsState.selectors.selectEntities(stateNow);\n  // const id = planDocumentsState.selectors.selectById(stateNow, \"d39e6ddc-6220-4c20-8c7d-9d01e65192de\");\n  // const idsAndEntities = planDocumentsState.selectors.getDocuments(stateNow);\n  return planDocumentsState.selectors.selectByPlanId(stateNow, planId);\n}\n\nexport async function fetchPlanDocuments(planId) {\n  return new Promise((resolve, reject) => {\n    try {\n      store.dispatch(reactFetchPlanDocuments(planId));\n      // const stateNow = store.getState();\n      resolve(getPlanDocuments(planId));\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function setPlanDocuments(plans) {\n  store.dispatch(planDocumentsState.actions.setPlanDocumentsState(plans));\n}\n\n\nexport function addRoomName(newName) {\n  store.dispatch(plansState.actions.addRoomName(newName));\n}\n\nexport function removeRoomName(newName) {\n  store.dispatch(plansState.actions.removeRoomName(newName));\n}\n\nexport function addDeviceType(newName) {\n  store.dispatch(plansState.actions.addDeviceType(newName));\n}\n\nexport function removeDeviceType(newName) {\n  store.dispatch(plansState.actions.removeDeviceType(newName));\n}\n\nexport function addSceneType(newName) {\n  store.dispatch(plansState.actions.addSceneType(newName));\n}\n\nexport function removeSceneType(newName) {\n  store.dispatch(plansState.actions.removeSceneType(newName));\n}\n\nexport function addRuleType(newName) {\n  store.dispatch(plansState.actions.addRuleType(newName));\n}\n\nexport function removeRuleType(newName) {\n  store.dispatch(plansState.actions.removeRuleType(newName));\n}\n\nexport function addTemplate(newTemplate) {\n  store.dispatch(plansState.actions.addTemplate(newTemplate));\n}\n\nexport function setTemplate(template) {\n  store.dispatch(plansState.actions.setTemplate(template));\n}\n\nexport function removeTemplate(template) {\n  store.dispatch(plansState.actions.removeTemplate(template));\n}\n\n\nexport function addLocationNode(parentId, newNode) {\n  store.dispatch(plansState.actions.addLocationNode({ parentId, newNode }));\n}\n\nexport function setLocationNode(nodeToBeSet) {\n  store.dispatch(plansState.actions.setLocationNode(nodeToBeSet));\n}\n\nexport function removeLocationNode(nodeId) {\n  store.dispatch(plansState.actions.removeLocationNode(nodeId));\n}\n\n\nexport function simplifyPlans() {\n  const nodes = getPlans();\n  const nodesCopy = {};\n  // nodesCopy.roomNames = { ...nodes.roomNames };\n  // nodesCopy.templates = { ...nodes.templates };\n\n  function simplifyNode(childNode) {\n    console.log('simply id', childNode.id);\n    console.log('simply data', childNode.data);\n    const nodesTree = [];\n    for (let i = 0; i < childNode.childIds.length; i += 1) {\n      const { childIds } = childNode;\n      const hasChildren = childIds !== undefined && childIds.length > 0;\n      if (nodes.locations[childNode.childIds[i]] && nodes.locations[childNode.childIds[i]].data) {\n        nodesTree[i] = { ...nodes.locations[childNode.childIds[i]].data };\n        nodesTree[i].id = childNode.childIds[i];\n        nodesTree[i].child = hasChildren ? simplifyNode(nodes.locations[childNode.childIds[i]]) : undefined;\n      }\n      /*\n      if (nodesCopy2[i].data.type === 'HUB'){}\n      nodesCopy2[i] = {\n        id: childNode.childIds[i],\n        data: childNode.data || null,\n        childs: hasChildren ? simplifyNode(nodes.locations[childNode.childIds[i]]) : undefined,\n      };\n      */\n    }\n    console.log(`simply ${childNode.id} return`, nodesTree);\n    return nodesTree;\n  }\n  nodesCopy.locations = simplifyNode(nodes.locations.root);\n  return nodesCopy;\n}\n\n/**\n * Save plans\n * @return {PLANS_TYPE}\n */\n/*\nexport async function savePlans(): Promise<PLANS_TYPE> {\n  return new Promise((resolve, reject) => {\n    const stateNow = store.getState();\n    const user = userState.selectors.getUser(stateNow);\n    if (!user || !user.authKey) {\n      console.error('SDK savePlans error: No userKey!');\n      reject(new Error('Save plans error: No userKey!'));\n      return;\n    }\n    const { authKey } = user;\n    if (!authKey) {\n      console.error('SDK savePlans error: No authKey!');\n      reject(new Error('Save plans error: No authKey!'));\n      return;\n    }\n\n    const plansToBeSaved = getPlans();\n    const data = {\n      sceneTypes: plansToBeSaved.sceneTypes,\n      deviceTypes: plansToBeSaved.deviceTypes,\n      ruleTypes: plansToBeSaved.ruleTypes,\n      roomNames: plansToBeSaved.roomNames,\n      templates: plansToBeSaved.templates,\n      locations: plansToBeSaved.locations,\n    };\n\n    send({\n      command: COMMANDS.CMD_SAVE_PLAN, authKey, data, url: plansUrl,\n    })\n      .then((status) => {\n        console.debug('SDK savePlans ok', status);\n        // store.dispatch(setPlans(plans));\n        resolve(status);\n      })\n      .catch((error) => {\n        // eslint-disable-next-line\n        debugger;\n        console.error('SDK savePlans error:', error);\n        reject(error);\n      });\n  });\n} */\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/plans/plans.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "getPlans",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~getPlans",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{getPlans}",
    "description": "",
    "lineNumber": 12,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "setPlans",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~setPlans",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{setPlans}",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "plans",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "fetchPlans",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/plans/plans.js~fetchPlans",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{fetchPlans}",
    "description": "",
    "lineNumber": 21,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "insertPlan",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/plans/plans.js~insertPlan",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{insertPlan}",
    "description": "",
    "lineNumber": 34,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "getPlanDocuments",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~getPlanDocuments",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{getPlanDocuments}",
    "description": "",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "fetchPlanDocuments",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/plans/plans.js~fetchPlanDocuments",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{fetchPlanDocuments}",
    "description": "",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "setPlanDocuments",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~setPlanDocuments",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{setPlanDocuments}",
    "description": "",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "plans",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "addRoomName",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~addRoomName",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{addRoomName}",
    "description": "",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "removeRoomName",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~removeRoomName",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{removeRoomName}",
    "description": "",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "addDeviceType",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~addDeviceType",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{addDeviceType}",
    "description": "",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "removeDeviceType",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~removeDeviceType",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{removeDeviceType}",
    "description": "",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "addSceneType",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~addSceneType",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{addSceneType}",
    "description": "",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "removeSceneType",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~removeSceneType",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{removeSceneType}",
    "description": "",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "addRuleType",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~addRuleType",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{addRuleType}",
    "description": "",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "removeRuleType",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~removeRuleType",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{removeRuleType}",
    "description": "",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "addTemplate",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~addTemplate",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{addTemplate}",
    "description": "",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newTemplate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "setTemplate",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~setTemplate",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{setTemplate}",
    "description": "",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "removeTemplate",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~removeTemplate",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{removeTemplate}",
    "description": "",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "addLocationNode",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~addLocationNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{addLocationNode}",
    "description": "",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "parentId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newNode",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "setLocationNode",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~setLocationNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{setLocationNode}",
    "description": "",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeToBeSet",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "removeLocationNode",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~removeLocationNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{removeLocationNode}",
    "description": "",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nodeId",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "simplifyPlans",
    "memberof": "src/plans/plans.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plans/plans.js~simplifyPlans",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/plans/plans.js",
    "importStyle": "{simplifyPlans}",
    "description": "",
    "lineNumber": 169,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "src/qql.js",
    "content": "\n// Whole file was just for qql testing\n/*\nimport { ApolloClient, split, HttpLink, InMemoryCache } from '@apollo/client';\nimport {GraphQLNormalizr} from 'graphql-normalizr'\nimport { gql } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/link-ws';\n*/\n\n/*\nimport { SubscriptionClient } from 'graphql-subscriptions-client';\n// set up the client, which can be reused\nconst qqlSubscriptionClient = new SubscriptionClient('ws://localhost:8080/v1/graphql', {\n  reconnect: true,\n});\n*/\n\n/*\nCommented out as graphql not used\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:8080/v1/graphql'\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:8080/v1/graphql`,\n  options: {\n    reconnect: true\n  }\n});\n\n\n// The split function takes three parameters:\n//\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nexport const isAuth = (state) => {\n  const { user } = state\n  const { authKey } = user;\n  if (!user || !user.authKey) {\n    // Already fetched or in progress, don't need to re-fetch\n    console.error('SDK listPlans error: No userKey!');\n    return false;\n  }\n  return true;\n}\n\nconst createApolloClient = (authToken) => {\n  if (window && window.location && window.location.hostname === 'localhost') {\n    return new ApolloClient({\n      link: splitLink,\n      cache: new InMemoryCache(),\n    });\n  }\n  return null;\n};\n\nexport const qqlClient = createApolloClient(null);\n\n\nexport const { normalize } = new GraphQLNormalizr(\n  {\n    idKey: 'uid',\n    exclude: { t_plan_document_node: [ 'data' ] },\n    typeMap: {\n      t_plan: 'plans',\n      t_plan_document: 'documents',\n      t_plan_document_node: 'nodes',\n    }\n});\n*/\n\n// Fake client\n/*\nexport const qqlClient = {\n  query: () => {},\n  subscribe: () => {},\n  mutate: () => {}\n}\nexport const { normalize } =  () => {};\nexport const isAuth = (state) => {};\n\n\nexport const GET_PLAN_DOCUMENTs_AND_NODES = gql`\n  query ListPlansDocumentAndNodes {\n    t_plan {\n      uid\n      name\n      created_at\n      changed_at\n      documents {\n        uid\n        plan_id\n        changed_at\n        created_at\n        device_types\n        scene_types\n        template_types\n        room_types\n        rule_types\n        nodes {\n          uid\n          data\n          parent_id\n          child {\n            uid\n            parent_id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const SUBS_PLANS = gql`\n  subscription SubsPlans {\n     t_plan {\n      uid\n      name\n      created_at\n      changed_at\n    }\n  }\n`;\n\n\nexport const GET_PLANS = gql`\n  query ListPlans {\n    t_plan {\n      uid\n      name\n      created_at\n      changed_at\n    }\n  }\n`;\n\n\nexport const INSERT_PLAN = gql`\n mutation InsertPlanWithDocument($object: t_plan_insert_input!) {\n  insert_t_plan_one(object: $object) {\n    changed_at\n    created_at\n    uid\n    documents {\n      uid\n      name\n      nodes {\n        uid\n      }\n      changed_at\n      created_at\n    }\n  }\n}\n`;\n\n\nexport const UPDATE_PLAN = gql`\n  mutation UpdatePlan($uid: String, $changes: t_plan_set_input) {\n    update_t_plan(where: {uid: {_eq: $uid}}, _set: $changes) {\n      affected_rows\n      returning {\n        uid\n        name\n        created_at\n        changed_at\n      }\n    }\n  }\n`;\n\nexport const REMOVE_PLAN = gql`\n  mutation DeletePlan($uid: String!) {\n    delete_t_plan_by_pk(uid: $uid) {\n      name\n    }\n  }\n`;\n\n\nexport const GET_PLAN_DOCUMENTS = gql`\n  query ListDocuments($plan_id: String) {\n    t_plan_document(where: {plan_id: {_eq: $plan_id}}) {\n      uid\n      author\n      name\n      created_at\n      changed_at\n      plan_id\n    }\n  }\n`;\n\nexport const SUBS_PLAN_DOCUMENTS = gql`\n  subscription SubsPlanDocuments($plan_id: String)  {\n    t_plan_document(where: {plan_id: {_eq: $plan_id}}) {\n      uid\n      author\n      name\n      created_at\n      changed_at\n      plan_id\n    }\n  }\n`;\nexport const INSERT_PLAN_DOCUMENT = gql`\n  mutation InsertDocumentToPlan($object: t_plan_document_insert_input!) {\n    insert_t_plan_document_one(object: $object) {\n      uid\n      name\n      author\n      changed_at\n      created_at\n      nodes {\n        changed_at\n        created_at\n        data\n      }\n    }\n  }\n`;\n\n//\n// export const UPDATE_PLAN_DOCUMENT = gql`\n//   mutation UpdateDocument($room_types: jsonb, $rule_types: jsonb, $uid: String) {\n//     update_t_plan_document(where: {uid: {_eq: $uid}}, _set: {room_types: $room_types, rule_types: $rule_types}) {\n//       affected_rows\n//       returning {\n//         uid\n//         room_types\n//         rule_types\n//         scene_types\n//         template_types\n//         device_types\n//       }\n//     }\n//   }\n// `;\n//\nexport const UPDATE_PLAN_DOCUMENT = gql`\n  mutation UpdatePlanDocument($uid: String, $changes: t_plan_document_set_input) {\n    update_t_plan_document(where: {uid: {_eq: $uid}}, _set: $changes) {\n      affected_rows\n      returning {\n        uid\n        name\n        author\n        created_at\n        changed_at\n      }\n    }\n  }\n`;\n\nexport const REMOVE_PLAN_DOCUMENT = gql`\n  mutation DeleteDocumentAndAllNodes($uid: String!) {\n    delete_t_plan_document_node(where: {document_id: {_eq: $uid}}) {\n      affected_rows\n    }\n    delete_t_plan_document(where: {uid: {_eq: $uid}}){\n      affected_rows\n    }\n  }\n`;\n\n// Nodes\nexport const GET_PLAN_DOCUMENT_NODES = gql`\n  query ListNodess($document_id: String) {\n    t_plan_document_node(where: {document_id: {_eq: $document_id}}) {\n      uid\n      created_at\n      changed_at\n      document_id\n      data\n    }\n  }\n`;\n\nexport const SUBS_PLAN_DOCUMENT_NODES = gql`\n  subscription SubsPlanDocuments($document_id: String)  {\n    t_plan_document_node(where: {document_id: {_eq: $document_id}}) {\n      uid\n      parent_id\n      child{\n        uid\n      }\n      created_at\n      changed_at\n      document_id\n      data\n    }\n  }\n`;\n\n\nexport const INSERT_PLAN_DOCUMENT_NODE = gql`\n  mutation InsertNode($object: t_plan_document_node_insert_input!) {\n    insert_t_plan_document_node_one(object: $object) {\n      uid\n      changed_at\n      created_at\n      data\n    }\n  }\n`;\n\n\n// export const UPDATE_PLAN_DOCUMENT_NODE = gql`\n//   mutation UpdateDocument($room_types: jsonb, $rule_types: jsonb, $uid: String) {\n//     update_t_plan_document_node(where: {uid: {_eq: $uid}}, _set: {room_types: $room_types, rule_types: $rule_types}) {\n//       affected_rows\n//       returning {\n//         uid\n//       }\n//     }\n//   }\n// `;\n\nexport const UPDATE_PLAN_DOCUMENT_NODE = gql`\n  mutation UpdateDocumentNode($uid: String, $changes: t_plan_document_node_set_input) {\n    update_t_plan_document_node(where: {uid: {_eq: $uid}}, _set: $changes) {\n      returning {\n        data\n        changed_at\n        created_at\n      }\n      affected_rows\n    }\n  }\n`;\n\nexport const REMOVE_PLAN_DOCUMENT_NODE = gql`\n  mutation DeletePlanDocumentNode($uid: String!) {\n    delete_t_plan_document_node_by_pk(uid: $uid) {\n      uid\n    }\n  }\n`;\n\n*/\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/qql.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "src/reducers/alarms.js",
    "content": "\n// \nimport { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\n\n\n/**\n * Alarms action creators object\n * @see  https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md\n * @return { {\n *   name : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const alarmsState = createSlice({\n  name: 'alarms',\n  initialState: {},\n  reducers: {\n\n    /*\n     * Reducer action of setting alarms state - sets all given alarms of given hub, keeps existing states\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setAlarms(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { alarms } = action.payload;\n      const hubAlarms = {};\n\n      Object.entries(alarms).forEach((entry) => {\n        const [id, alarm] = entry;\n        hubAlarms[id] = { ...alarm };\n      });\n      stateToSet[hubId] = { ...hubAlarms };\n    },\n\n\n    /*\n     * Reducer action of set alarm state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setAlarm(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { alarm } = action.payload;\n      if (hubId && stateToSet[hubId]) {\n        stateToSet[hubId][alarm.id] = { ...alarm };\n      }\n    },\n\n    /*\n     * Reducer action of removing alarm state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    removeAlarm(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { alarmId } = action.payload;\n      if (hubId && alarmId && stateToSet[hubId] && stateToSet[hubId][alarmId]) {\n        delete stateToSet[hubId][alarmId];\n      }\n    },\n  },\n});\n\n/*\ntodos.selectors.getCompletedTodoCount = createSelector(\n  [todos.selectors.getTodos],\n  todos =>\n    todos.reduce((count, todo) => (todo.completed ? count + 1 : count), 0)\n);\n*/\n\nconst adapter = createEntityAdapter();\nexport const {\n  selectById: selectAlarmById,\n  selectIds: selectAlarmIds,\n  selectEntities: selectAlarmEntities,\n  selectAll: selectAllAlarms,\n  selectTotal: selectTotalAlarms,\n} = adapter.getSelectors((state) => state.alarms);\n\nalarmsState.selectors = adapter.getSelectors((state) => state.alarms);\nalarmsState.selectors.getAlarms = createSelector(\n  [(state) => state.alarms],\n  (alarms) => alarms,\n);\n\nconst { actions, reducer } = alarmsState;\n\n/**\n * Devices reducer\n * @type {function} reducer\n */\nexport { reducer as alarmsReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(addDevice({ id: 123, name: 'Unnamed device' }))\n{type : \"devices/addDevice\", payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const {\n  setAlarms, setAlarm, removeAlarm,\n} = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/alarms.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "alarmsState",
    "memberof": "src/reducers/alarms.js",
    "static": true,
    "longname": "src/reducers/alarms.js~alarmsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/alarms.js",
    "importStyle": "{alarmsState}",
    "description": "Alarms action creators object",
    "see": [
      " https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 16,
    "return": {
      "nullable": null,
      "types": [
        " {\n  name : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "name": "adapter",
    "memberof": "src/reducers/alarms.js",
    "static": true,
    "longname": "src/reducers/alarms.js~adapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/alarms.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/alarms.js",
    "static": true,
    "longname": "src/reducers/alarms.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/alarms.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/alarms.js",
    "static": true,
    "longname": "src/reducers/alarms.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/alarms.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "setAlarms",
    "memberof": "src/reducers/alarms.js",
    "static": true,
    "longname": "src/reducers/alarms.js~setAlarms",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/alarms.js",
    "importStyle": "{setAlarms}",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "src/reducers/connections.js",
    "content": "// \n\nimport { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { CLOUD_CONNECTION_STATES } from '../connection/constants';\n// import type { CLOUD_CONNECTION_STATE_TYPE } from '../connection/constants';\n\n\n/**\n * Connections action creators object\n * @see  https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md\n * @return { {\n *   slice : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const connectionsState = createSlice({\n  name: 'connections',\n  initialState: {\n    cloudState: CLOUD_CONNECTION_STATES.UNCONNECTED,\n  },\n  reducers: {\n    /*\n     * Reducer action of cloud connection state\n     * @param {Object} state\n     * @param {CLOUD_CONNECTION_STATES} action\n     */\n    setCloudConnectionState(state, action) {\n      const stateToSet = state;\n      const newState = action.payload;\n      const oldState = state.cloudState;\n      if (Object.values(CLOUD_CONNECTION_STATES).indexOf(newState) > -1) {\n        if (oldState !== newState) {\n          console.log(`CLOUD connection state ${oldState} -> ${newState}`);\n          stateToSet.cloudState = newState;\n        }\n      }\n    },\n\n\n  },\n});\n\nconst adapter = createEntityAdapter();\nexport const {\n  selectById: selectConnectionById,\n  selectIds: selectConnectionIds,\n  selectEntities: selectConnectionEntities,\n  selectAll: selectAllConnections,\n  selectTotal: selectTotalConnections,\n} = adapter.getSelectors((state) => state.hubs);\n\nconnectionsState.selectors = adapter.getSelectors((state) => state.connections);\nconnectionsState.selectors.getConnections = createSelector(\n  [(state) => state.connections],\n  (connections) => connections,\n);\n\nconst { actions, reducer } = connectionsState;\n/**\n * Connections reducer\n * @type {function} reducer\n */\nexport { reducer as connectionsReducer };\n\n// Extract and export each action creator by name\nexport const { setCloudConnectionState } = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/connections.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "variable",
    "name": "connectionsState",
    "memberof": "src/reducers/connections.js",
    "static": true,
    "longname": "src/reducers/connections.js~connectionsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/connections.js",
    "importStyle": "{connectionsState}",
    "description": "Connections action creators object",
    "see": [
      " https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 18,
    "return": {
      "nullable": null,
      "types": [
        " {\n  slice : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "variable",
    "name": "adapter",
    "memberof": "src/reducers/connections.js",
    "static": true,
    "longname": "src/reducers/connections.js~adapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/connections.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/connections.js",
    "static": true,
    "longname": "src/reducers/connections.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/connections.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/connections.js",
    "static": true,
    "longname": "src/reducers/connections.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/connections.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "setCloudConnectionState",
    "memberof": "src/reducers/connections.js",
    "static": true,
    "longname": "src/reducers/connections.js~setCloudConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/connections.js",
    "importStyle": "{setCloudConnectionState}",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "src/reducers/devices.js",
    "content": "// \n\nimport { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\n\n/**\n * Devices action creators object\n * @see  https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md\n * @return { {\n *   name : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const devicesState = createSlice({\n  name: 'devices',\n  initialState: {},\n  reducers: {\n    /*\n     * Reducer action of setting devices state - sets all given devices of given hub, keeps existing states\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setDevices(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { devices } = action.payload;\n      const hubDevices = {};\n\n\n      Object.entries(devices).forEach((entry) => {\n        const [id, device] = entry;\n        hubDevices[id] = { ...device };\n      });\n      stateToSet[hubId] = { ...hubDevices };\n    },\n\n    /*\n     * Reducer action of setting device state - sets  given device of given hub, keeps existing states\n     * @param {Object} state\n     * @param {payload:{Object{hubId:string, device:Object}}} action\n     */\n    setDevice(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { device } = action.payload;\n      if (stateToSet[hubId]) {\n        stateToSet[hubId][device.id] = { ...device };\n      }\n    },\n\n    /*\n     * Reducer action to remove device from state - sets all given devices of given hub, keeps existing states\n     * @param {Object} state\n     * @param {payload:{Object{hubId:string, device:Object}}} action\n     */\n    deleteDevice(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { deviceId } = action.payload;\n\n      if (hubId && deviceId && stateToSet[hubId] && stateToSet[hubId][deviceId]) {\n        delete stateToSet[hubId][deviceId];\n      }\n    },\n  },\n});\n\nconst adapter = createEntityAdapter();\nexport const {\n  selectById: selectDeviceById,\n  selectIds: selectDeviceIds,\n  selectEntities: selectDeviceEntities,\n  selectAll: selectAllDevicess,\n  selectTotal: selectTotalDevices,\n} = adapter.getSelectors((state) => state.devices);\n\ndevicesState.selectors = adapter.getSelectors((state) => state.devices);\ndevicesState.selectors.getDevices = createSelector(\n  [(state) => state.devices],\n  (devices) => devices,\n);\n\nconst { actions, reducer } = devicesState;\n\n/**\n * Devices reducer\n * @type {function} reducer\n */\nexport { reducer as devicesReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(addDevice({ id: 123, name: 'Unnamed device' }))\n{type : \"devices/addDevice\", payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const { setDevices, deleteDevice } = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/devices.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "devicesState",
    "memberof": "src/reducers/devices.js",
    "static": true,
    "longname": "src/reducers/devices.js~devicesState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/devices.js",
    "importStyle": "{devicesState}",
    "description": "Devices action creators object",
    "see": [
      " https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 15,
    "return": {
      "nullable": null,
      "types": [
        " {\n  name : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "name": "adapter",
    "memberof": "src/reducers/devices.js",
    "static": true,
    "longname": "src/reducers/devices.js~adapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/devices.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/devices.js",
    "static": true,
    "longname": "src/reducers/devices.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/devices.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/devices.js",
    "static": true,
    "longname": "src/reducers/devices.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/devices.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "setDevices",
    "memberof": "src/reducers/devices.js",
    "static": true,
    "longname": "src/reducers/devices.js~setDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/devices.js",
    "importStyle": "{setDevices}",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "file",
    "name": "src/reducers/hubs.js",
    "content": "// \n\n// This actionreducer uses internally https://github.com/mweststrate/immer, so it's safe to modify given state directly\nimport { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { HUB_CONNECTION_STATES } from '../connection/constants';\n\n\n/**\n * Hubs action creators object\n * @see  https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md\n * @return { {\n *   name : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const hubsState = createSlice({\n  name: 'hubs',\n  initialState: {},\n  reducers: {\n    /*\n     * Reducer action of setting many hubs to state\n     * @param  {Object} state\n     * @param  {payload:{hubs:HUBS_MAP_TYPE}} action\n     */\n    updateHubs(state, action) {\n      const stateToSet = state;\n      const hubs = action.payload;\n      console.log('updateHubs', hubs);\n      Object.entries(hubs).forEach((entry) => {\n        const [id, hub] = entry;\n        stateToSet[id] = { ...state[id], ...hub };\n      });\n    },\n\n\n    /*\n     * Reducer action of setting hub state to selected\n     * @param  {Object} state\n     * @param  {payload:{hubId:string}} action\n     */\n    selectHub(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      console.log('selectHub', hubId);\n      if (state[hubId]) {\n        stateToSet[hubId].selected = true;\n        console.log('selectHub', state[hubId]);\n      }\n    },\n\n    /*\n     * Reducer action of setting hub state to unselected\n     * @param  {Object} state\n     * @param  {payload:{hubId:string}} action\n     */\n    unSelectHub(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      if (state[hubId]) {\n        stateToSet[hubId].selected = false;\n        // console.log(\"selectHub\", state[action.payload]);\n      }\n    },\n\n    /*\n     * Reducer action of setting hub connection state\n     * @param  {Object} state\n     * @param  {payload:{hubId:string, state:HUB_STATES_TYPE}} action\n     */\n    setHubConnectionState(state, action) {\n      const { hubId } = action.payload;\n      const stateToSet = state;\n      const newState = action.payload.state;\n      const oldState = state[hubId] ? state[hubId].connectionState : undefined;\n      if (Object.values(HUB_CONNECTION_STATES).indexOf(newState) > -1) {\n        if (oldState && oldState !== newState) {\n          // console.log (`HUB ${hubId} connection state ${oldState} -> ${newState}`);\n          stateToSet[hubId].connectionState = newState;\n        }\n      }\n    },\n  },\n});\n\nconst adapter = createEntityAdapter();\nexport const {\n  selectById: selectHubById,\n  selectIds: selectHubIds,\n  selectEntities: selectHubEntities,\n  selectAll: selectAllHubs,\n  selectTotal: selectTotalHubs,\n} = adapter.getSelectors((state) => state.hubs);\n\nhubsState.selectors = adapter.getSelectors((state) => state.hubs);\nhubsState.selectors.getHubs = createSelector(\n  [(state) => state.hubs],\n  (hubs) => hubs,\n);\n// console.log(\"hubsState.selectors\", hubsState.selectors );\n\n// console.log('hubsState ', hubsState)\nconst { actions, reducer } = hubsState;\n\n/**\n * Hubs reducer\n * @type {function} reducer\n */\nexport { reducer as hubsReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(updateHubs({ id: 123, name: 'Unnamed device' }))\n{type : \"hubs/updateHubs, payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const {\n  updateHubs, selectHub, unSelectHub, setHubConnectionState,\n} = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/hubs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "hubsState",
    "memberof": "src/reducers/hubs.js",
    "static": true,
    "longname": "src/reducers/hubs.js~hubsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/hubs.js",
    "importStyle": "{hubsState}",
    "description": "Hubs action creators object",
    "see": [
      " https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 18,
    "return": {
      "nullable": null,
      "types": [
        " {\n  name : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "adapter",
    "memberof": "src/reducers/hubs.js",
    "static": true,
    "longname": "src/reducers/hubs.js~adapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/hubs.js",
    "static": true,
    "longname": "src/reducers/hubs.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/hubs.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/hubs.js",
    "static": true,
    "longname": "src/reducers/hubs.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 261,
    "kind": "variable",
    "name": "updateHubs",
    "memberof": "src/reducers/hubs.js",
    "static": true,
    "longname": "src/reducers/hubs.js~updateHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/hubs.js",
    "importStyle": "{updateHubs}",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "src/reducers/idea.js",
    "content": "\n// \nimport {\n  createSlice,\n  createEntityAdapter,\n  // createAsyncThunk,\n  createSelector,\n} from '@reduxjs/toolkit';\nimport isArray from 'lodash/isArray';\nimport { PLAN_NODES } from '../plans/constants';\n\n/*\n* Helpers\n*/\n\n/*\nconst setId = (idObj: Object) => {\n  const givenObject = idObj;\n  if (!givenObject.id) {\n    givenObject.id = Date.now();\n  }\n  return givenObject;\n};\n*/\n\nconst setId = (parentTempId, newItem) => {\n  const item = { ...newItem };\n  if (item.id) {\n    item.id = parentTempId.concat(':').concat(item.id);\n  } else if (item.data && item.data.name) {\n    item.id = parentTempId.concat(':').concat(item.data.name.replace(/\\s+/g, '').replace(/\\./g, '').replace(/:/g, ''));\n  } else {\n    item.id = parentTempId.concat(':?');\n  }\n  return item;\n};\n\nconst getAllDescendantIds = (state, nodeId) => (\n  (state[nodeId] && state[nodeId].childIds) ? state[nodeId].childIds.reduce((acc, childId) => (\n    [...acc, childId, ...getAllDescendantIds(state, childId)]\n  ), []) : []\n);\n\nconst deleteMany = (givenState, ids) => {\n  const state = { ...givenState };\n  ids.forEach((id) => delete state[id]);\n  return state;\n};\n\n\n\nconst findChild = (state, id) => {\n  let found;\n  (Object.values(state)).forEach((node) => {\n    if (!found) {\n      if (node && node.childIds) {\n        // console.error(`FIND ${id} in ${JSON.stringify(node.childIds)} when node ${JSON.stringify(node)}`);\n        if (isArray(node.childIds)) {\n          if (node.childIds.includes(id)) {\n            found = node;\n          }\n        }\n      }\n    }\n  });\n  // console.error(`FOUND ${id} => ${JSON.stringify(found)}`);\n  return found;\n};\n\n/**\n * Plans action creators object\n * @see  https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md\n * @return { {\n *   name : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const plansState = createSlice({\n  name: 'plans',\n  initialState: {\n    roomNames: [],\n    sceneTypes: [],\n    deviceTypes: [],\n    ruleTypes: [],\n    templates: {},\n    locations: {\n      root: {\n        id: 'root',\n        childIds: [],\n        data: {\n          name: 'root',\n        },\n        open: false,\n      },\n    },\n  },\n  reducers: {\n\n    setPlansState(state, action) {\n      const stateToSet = state;\n      const newState = action.payload;\n      const oldState = stateToSet.plansState;\n      console.log(`SDK setPlansState: PLANS state ${oldState} -> ${newState}`);\n      stateToSet.templates = { ...newState.templates };\n      stateToSet.locations = { ...newState.locations };\n      stateToSet.roomNames = [...newState.roomNames || []];\n      stateToSet.sceneTypes = [...newState.sceneTypes || []];\n      stateToSet.deviceTypes = [...newState.deviceTypes || []];\n      stateToSet.ruleTypes = [...newState.ruleTypes || []];\n    },\n\n    /*\n     * Reducer action of adding room name\n     * @param {Object} state\n     * @param {Object} action\n    */\n    addRoomName(state, action) {\n      const stateToSet = state;\n      const newName = action.payload;\n      if (!stateToSet.roomNames.includes(newName)) {\n        stateToSet.roomNames.push(newName);\n      }\n    },\n\n    /*\n     * Reducer action of removing room name\n     * @param {Object} state\n     * @param {Object} action\n    */\n    removeRoomName(state, action) {\n      const stateToSet = state;\n      stateToSet.roomNames = stateToSet.roomNames.filter((room) => room !== action.payload);\n    },\n\n    /*\n     * Reducer action of adding device type\n     * @param {Object} state\n     * @param {Object} action\n    */\n    addDeviceType(state, action) {\n      const stateToSet = state;\n      const newDevice = action.payload;\n      // todo check\n      stateToSet.deviceTypes.push(newDevice);\n    },\n\n    /*\n     * Reducer action of removing device type\n     * @param {Object} state\n     * @param {Object} action\n    */\n    removeDeviceType(state, action) {\n      const stateToSet = state;\n      stateToSet.deviceTypes = stateToSet.sceneTypes.filter((deviceType) => deviceType.id !== action.payload);\n    },\n\n    /*\n     * Reducer action of adding scene type\n     * @param {Object} state\n     * @param {Object} action\n    */\n    addSceneType(state, action) {\n      const stateToSet = state;\n      const newScene = action.payload;\n      // todo check\n      stateToSet.sceneTypes.push(newScene);\n    },\n\n    /*\n     * Reducer action of removing scene type\n     * @param {Object} state\n     * @param {Object} action\n    */\n    removeSceneType(state, action) {\n      const stateToSet = state;\n      stateToSet.sceneTypes = stateToSet.sceneTypes.filter((sceneType) => sceneType.id !== action.payload);\n    },\n\n    /*\n     * Reducer action of adding scene type\n     * @param {Object} state\n     * @param {Object} action\n    */\n    addRuleType(state, action) {\n      const stateToSet = state;\n      const newRule = action.payload;\n      // todo check\n      stateToSet.ruleTypes.push(newRule);\n    },\n\n    /*\n     * Reducer action of removing scene type\n     * @param {Object} state\n     * @param {Object} action\n    */\n    removeRuleType(state, action) {\n      const stateToSet = state;\n      stateToSet.ruleTypes = stateToSet.ruleTypes.filter((ruleType) => ruleType.id !== action.payload);\n    },\n\n    /*\n     * Reducer action of setting all templates state\n     * @param {Object} state\n     * @param {Object} action\n    */\n    setTemplates(state, action) {\n      const stateToSet = state;\n\n      const { templates } = action.payload;\n      const newTemplates = {};\n\n      Object.values(templates).forEach((entry) => {\n        const newTemplate = setId(PLAN_NODES.TEMPLATE, entry);\n        // console.log(JSON.stringify(newTemplate));\n        newTemplates[newTemplate.id] = { ...newTemplate };\n      });\n      stateToSet.templates = { ...newTemplates };\n    },\n\n\n    /*\n     * Reducer action of adding template state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    addTemplate(state, action) {\n      const stateToSet = state;\n      const parentTempId = PLAN_NODES.TEMPLATE;\n      const newTemplate = setId(parentTempId, action.payload);\n\n      // Check that node doesn't already exist\n      if (!newTemplate || !newTemplate.id) {\n        throw new Error('SDK addTemplate - no new template given');\n      }\n      if (stateToSet.templates[newTemplate.id]) {\n        throw new Error(`SDK addTemplate - template ${newTemplate.id} already exist`);\n      }\n      stateToSet.templates[newTemplate.id] = { ...newTemplate };\n    },\n\n\n    /*\n     * Reducer action of setting template state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setTemplate(state, action) {\n      const stateToSet = state;\n      const template = action.payload;\n      if (!template || !template.id) {\n        throw new Error('SDK setTemplate - no template given');\n      }\n      if (!stateToSet.templates[template.id]) {\n        throw new Error(`SDK setTemplate - template ${template.id} does not exist`);\n      }\n      const parentTempId = PLAN_NODES.TEMPLATE;\n      if (template.data && template.data.name) {\n        const oldId = template.id;\n        const templateToBeSet = { ...template };\n        templateToBeSet.id = null;\n        const setNode = setId(parentTempId, templateToBeSet);\n        if (setNode && oldId !== setNode.id && stateToSet.templates[oldId]) {\n          delete stateToSet.templates[oldId];\n          stateToSet.templates[setNode.id] = { ...setNode };\n        } else if (setNode && setNode.id && stateToSet.templates[setNode.id]) {\n          stateToSet.templates[setNode.id] = { ...setNode };\n        } else {\n          throw new Error(`SDK setTemplate - template ${template.id} could not be set`);\n        }\n      } else if (template.id && stateToSet.templates[template.id]) {\n        stateToSet.templates[template.id] = { ...template };\n      } else {\n        throw new Error(`SDK setTemplate - template ${template.id} could not be set`);\n      }\n    },\n\n    /*\n     * Reducer action of removing plan state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    removeTemplate(state, action) {\n      const stateToSet = state;\n\n      const templateId = action.payload;\n      if (!templateId) {\n        throw new Error('SDK removeLocationNode - no templateId given');\n      }\n      if (!stateToSet.templates[templateId]) {\n        throw new Error(`SDK removeLocationNode - template ${templateId} doesnt exist`);\n      }\n      delete stateToSet.templates[templateId];\n    },\n\n    /*\n     * Reducer action of adding location node state\n     *\n     * addLocationNode({parentId: parent, data:{}})\n     *\n     * addLocationNode({ parentId: null, newNode: country }));\n     *\n     */\n    addLocationNode(state, action) {\n      const stateToSet = state;\n      const { parentId } = action.payload;\n      const parentTempId = parentId || 'root';\n      const newNode = setId(parentTempId, action.payload.newNode);\n\n      // Check that node doesn't already exist\n      if (!newNode || !newNode.id) {\n        throw new Error('SDK addLocationNode - no new node given');\n      }\n      if (stateToSet.locations[newNode.id]) {\n        throw new Error(`SDK addLocationNode - node ${newNode.id} already exist`);\n      }\n\n      if (!newNode.childIds) {\n        newNode.childIds = [];\n      }\n\n      if (stateToSet.locations[parentTempId] && newNode && newNode.id) {\n        if (!stateToSet.locations[parentTempId].childIds) {\n          stateToSet.locations[parentTempId].childIds = [];\n        }\n        stateToSet.locations[parentTempId].childIds = [...stateToSet.locations[parentTempId].childIds, newNode.id];\n        stateToSet.locations[newNode.id] = { ...newNode };\n      }\n    },\n\n    /*\n     * setLocationNode(node)\n     */\n    setLocationNode(state, action) {\n      const stateToSet = state;\n      const node = action.payload;\n\n      if (!node || !node.id) {\n        throw new Error('SDK setLocationNode - no node given');\n      }\n      if (!stateToSet.locations[node.id]) {\n        throw new Error(`SDK setLocationNode - node ${node.id} does not exist`);\n      }\n\n      if (!node.childIds) {\n        node.childIds = [];\n      }\n\n      let descendantIds = [];\n      if (stateToSet.locations[node.id]) {\n        descendantIds = getAllDescendantIds(stateToSet.locations, node.id);\n      }\n      const parentTempId = node.id.substr(0, node.id.lastIndexOf(':'));\n      if (node.data && node.data.name) {\n        const oldId = node.id;\n        const nodeToBeSet = { ...node };\n\n        nodeToBeSet.id = null;\n        const setNode = setId(parentTempId, nodeToBeSet);\n        if (setNode && oldId !== setNode.id && stateToSet.locations[oldId]) {\n          // all child nodes\n          descendantIds.map((childId) => {\n            if (childId.indexOf(oldId) !== -1) {\n              const newId = childId.replace(oldId, setNode.id);\n              const child = { ...stateToSet.locations[childId] };\n              child.id = newId;\n              // and it's childs\n              child.childIds = child.childIds.map((id) => id.replace(oldId, setNode.id));\n\n              delete stateToSet.locations[childId];\n              stateToSet.locations[newId] = { ...child };\n            }\n            return true;\n          });\n          // own childs\n          setNode.childIds = setNode.childIds.map((id) => id.replace(oldId, setNode.id));\n\n          // parent\n          stateToSet.locations[parentTempId].childIds = stateToSet.locations[parentTempId].childIds.filter((id) => id !== oldId);\n          stateToSet.locations[parentTempId].childIds.push(setNode.id);\n\n\n          // current\n          delete stateToSet.locations[oldId];\n          stateToSet.locations[setNode.id] = { ...setNode };\n        } else if (setNode && setNode.id && stateToSet.locations[setNode.id]) {\n          stateToSet.locations[setNode.id] = { ...setNode };\n        } else {\n          throw new Error(`SDK setLocationNode - node ${node.id} could not be set`);\n        }\n      } else {\n        stateToSet.locations[node.id] = { ...node };\n      }\n    },\n\n\n    /*\n     * removeLocationNode\n     */\n    removeLocationNode(state, action) {\n      const stateToSet = state;\n      const nodeId = action.payload;\n      if (!nodeId) {\n        throw new Error('SDK removeLocationNode - no nodeId given');\n      }\n      if (!stateToSet.locations[nodeId]) {\n        throw new Error(`SDK removeLocationNode - node ${nodeId} doesnt exist`);\n      }\n      // console.info('removeLocationNode ', nodeId);\n      if (nodeId && nodeId !== 'root') {\n        const descendantIds = getAllDescendantIds(stateToSet.locations, nodeId);\n        // console.info('descendantIds', descendantIds);\n        const parent = findChild(stateToSet.locations, nodeId);\n        // console.info('PARENT', JSON.stringify(parent));\n        if (parent && parent.id) {\n          stateToSet.locations = deleteMany(stateToSet.locations, [nodeId, ...descendantIds]);\n          // console.info('child not yet removed', JSON.stringify(stateToSet.locations[parent.id].childIds));\n          stateToSet.locations[parent.id].childIds = stateToSet.locations[parent.id].childIds.filter((id) => id !== nodeId);\n          // console.info('child removed', JSON.stringify(stateToSet.locations[parent.id].childIds));\n        } else {\n          throw new Error(`SDK removeLocationNode - node ${nodeId} parent does not exist`);\n        }\n      }\n    },\n  },\n});\n\n\nconst adapter = createEntityAdapter();\nexport const {\n  selectById: selectPlanById,\n  selectIds: selectPlanIds,\n  selectEntities: selectPlanEntities,\n  selectAll: selectAllPlans,\n  selectTotal: selectTotalPlans,\n} = adapter.getSelectors((state) => state.plans);\n\nplansState.selectors = adapter.getSelectors((state) => state.plans);\nplansState.selectors.getPlans = createSelector(\n  [(state) => state.plans],\n  (plans) => plans,\n);\n\nconst { actions, reducer } = plansState;\n\n/**\n * Devices reducer\n * @type {function} reducer\n */\nexport { reducer as plansReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(addDevice({ id: 123, name: 'Unnamed device' }))\n{type : \"devices/addDevice\", payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const {\n  addRoomName, removeRoomName,\n  setTemplates, addTemplate, setTemplate, removeTemplate,\n  setInstallations, addInstallation, setInstallation, removeInstallation,\n  addLocationCountry, setLocationCountry, removeLocationCountry,\n  addLocationNode, setLocationNode, removeLocationNode,\n} = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/idea.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "setId",
    "memberof": "src/reducers/idea.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/reducers/idea.js~setId",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/idea.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "parentTempId",
        "types": [
          "*"
        ]
      },
      {
        "name": "newItem",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "getAllDescendantIds",
    "memberof": "src/reducers/idea.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/reducers/idea.js~getAllDescendantIds",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/idea.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodeId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "deleteMany",
    "memberof": "src/reducers/idea.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/reducers/idea.js~deleteMany",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/idea.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "givenState",
        "types": [
          "*"
        ]
      },
      {
        "name": "ids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "findChild",
    "memberof": "src/reducers/idea.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/reducers/idea.js~findChild",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/idea.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "name": "plansState",
    "memberof": "src/reducers/idea.js",
    "static": true,
    "longname": "src/reducers/idea.js~plansState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/idea.js",
    "importStyle": "{plansState}",
    "description": "Plans action creators object",
    "see": [
      " https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        " {\n  name : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "variable",
    "name": "adapter",
    "memberof": "src/reducers/idea.js",
    "static": true,
    "longname": "src/reducers/idea.js~adapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/idea.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 430,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/idea.js",
    "static": true,
    "longname": "src/reducers/idea.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/idea.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/idea.js",
    "static": true,
    "longname": "src/reducers/idea.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/idea.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 445,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "variable",
    "name": "addRoomName",
    "memberof": "src/reducers/idea.js",
    "static": true,
    "longname": "src/reducers/idea.js~addRoomName",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/idea.js",
    "importStyle": "{addRoomName}",
    "description": null,
    "lineNumber": 458,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "src/reducers/index.js",
    "content": "import { alarmsReducer } from './alarms';\nimport { connectionsReducer } from './connections';\nimport { pairingsReducer } from './pairings';\nimport { devicesReducer } from './devices';\nimport { hubsReducer } from './hubs';\nimport { userReducer } from './user';\nimport { roomsReducer } from './rooms';\nimport { plansReducer } from './plans';\nimport { planDocumentsReducer } from './planDocuments';\nimport { planDocumentNodesReducer } from './planDocumentNodes';\n\n/**\n * Root reducer\n * @type {Object}\n */\nconst rootReducer = {\n  alarms: alarmsReducer,\n  connections: connectionsReducer,\n  pairings: pairingsReducer,\n  devices: devicesReducer,\n  hubs: hubsReducer,\n  user: userReducer,\n  rooms: roomsReducer,\n  plans: plansReducer,\n  documents: planDocumentsReducer,\n  nodes: planDocumentNodesReducer,\n};\n\nexport default rootReducer;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "rootReducer",
    "memberof": "src/reducers/index.js",
    "static": true,
    "longname": "src/reducers/index.js~rootReducer",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/index.js",
    "importStyle": "rootReducer",
    "description": "Root reducer",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 274,
    "kind": "file",
    "name": "src/reducers/pairings.js",
    "content": "// \n\nimport { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\n\n/**\n * Devices action creators object\n * @see  https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md\n * @return { {\n *   name : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const pairingsState = createSlice({\n  name: 'pairings',\n  initialState: {},\n  reducers: {\n    /*\n     * Reducer action of setting pairing devices state - sets all given devices of given hub, keeps existing states\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setPairingDevices(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { devices } = action.payload;\n      const hubPairingDevices = {};\n\n\n      Object.entries(devices).forEach((entry) => {\n        const [id, device] = entry;\n        hubPairingDevices[id] = { ...device };\n      });\n      stateToSet[hubId] = { ...hubPairingDevices };\n    },\n\n    /*\n     * Reducer action of setting device state - sets  given device of given hub, keeps existing states\n     * @param {Object} state\n     * @param {payload:{Object{hubId:string, device:Object}}} action\n     */\n    setPairingDevice(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { device } = action.payload;\n      if (stateToSet[hubId]) {\n        stateToSet[hubId][device.id] = { ...device };\n      }\n    },\n\n    /*\n     * Reducer action to remove device from state - sets all given devices of given hub, keeps existing states\n     * @param {Object} state\n     * @param {payload:{Object{hubId:string, device:Object}}} action\n     */\n    deletePairingDevice(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { deviceId } = action.payload;\n      if (hubId && deviceId && stateToSet[hubId] && stateToSet[hubId][deviceId]) {\n        delete stateToSet[hubId][deviceId];\n      }\n    },\n  },\n});\n\nconst adapter = createEntityAdapter();\nexport const {\n  selectById: selectPairingById,\n  selectIds: selectPairingIds,\n  selectEntities: selectPairingEntities,\n  selectAll: selectAllPairings,\n  selectTotal: selectTotalPairings,\n} = adapter.getSelectors((state) => state.hubs);\n\npairingsState.selectors = adapter.getSelectors((state) => state.pairings);\npairingsState.selectors.getPairings = createSelector(\n  [(state) => state.pairings],\n  (pairings) => pairings,\n);\nconst { actions, reducer } = pairingsState;\n\n/**\n * Devices reducer\n * @type {function} reducer\n */\nexport { reducer as pairingsReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(addDevice({ id: 123, name: 'Unnamed device' }))\n{type : \"devices/addDevice\", payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const { setPairingDevices, deletePairingDevice } = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/pairings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "pairingsState",
    "memberof": "src/reducers/pairings.js",
    "static": true,
    "longname": "src/reducers/pairings.js~pairingsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/pairings.js",
    "importStyle": "{pairingsState}",
    "description": "Devices action creators object",
    "see": [
      " https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 15,
    "return": {
      "nullable": null,
      "types": [
        " {\n  name : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "name": "adapter",
    "memberof": "src/reducers/pairings.js",
    "static": true,
    "longname": "src/reducers/pairings.js~adapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/pairings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/pairings.js",
    "static": true,
    "longname": "src/reducers/pairings.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/pairings.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/pairings.js",
    "static": true,
    "longname": "src/reducers/pairings.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/pairings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "setPairingDevices",
    "memberof": "src/reducers/pairings.js",
    "static": true,
    "longname": "src/reducers/pairings.js~setPairingDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/pairings.js",
    "importStyle": "{setPairingDevices}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "src/reducers/planDocumentNodes.js",
    "content": "// \nimport {\n  createSlice,\n  createEntityAdapter,\n  createAsyncThunk,\n  createSelector,\n} from '@reduxjs/toolkit';\n\n\n/* import {\n  GET_PLAN_DOCUMENT_NODES,\n  SUBS_PLAN_DOCUMENT_NODES,\n  INSERT_PLAN_DOCUMENT_NODE,\n  UPDATE_PLAN_DOCUMENT_NODE,\n  REMOVE_PLAN_DOCUMENT_NODE,\n  qqlClient,\n  normalize,\n  isAuth\n} from '../qql.js'\n*/\n\nconst planDocumentNodesAdapter = createEntityAdapter({\n  // Assume IDs are stored in a field uid\n  selectId: (node) => node.uid,\n  // Keep the \"all IDs\" array sorted based on document\n  sortComparer: (a, b) => a.document_id.localeCompare(b.document_id),\n});\n\n// Fetch\nasync function fetchPlanDocumentNodes(documentId) {\n  return new Promise((resolve, reject) => {\n    reject(new Error(`fetchPlanDocuments documentId: ${documentId} TBD`));\n    /*  Was just test implementation of qql\n    qqlClient.query({\n      variables: {\n        \"document_id\": documentId\n      },\n      query: GET_PLAN_DOCUMENT_NODES\n    })\n    .then((result) => {\n      const queryResults = normalize(result);\n      console.debug('SDK fetchPlanDocumentNodes ok', queryResults);\n      resolve(queryResults.nodes);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK fetchPlanDocumentNodes error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\nexport const reactFetchPlanDocumentNodes = createAsyncThunk(\n  'plans/fetchPlanDocumentNodes',\n  async (documentId, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('fetchPlanDocuments state: ', ThunkAPI.getState());\n    return fetchPlanDocumentNodes(documentId);\n  },\n\n);\n\n// Subscribe\nexport const reactSubscribePlanDocumentNodes = createAsyncThunk(\n  'plans/subscribePlanDocumentNodes',\n  async (params, ThunkAPI) => new Promise((resolve, reject) => {\n    console.debug('reactSubscribePlanDocumentNodes state: ', ThunkAPI.getState());\n    reject(new Error('reactSubscribePlanDocumentNodes TBD'));\n    /*  Was just test implementation of qql\n      if (isAuth(ThunkAPI.getState())) {\n        const {documentId} = params;\n        const subsHandle = qqlClient.subscribe({\n          query: SUBS_PLAN_DOCUMENT_NODES,\n          variables: {\"document_id\": documentId },\n        }).subscribe({\n          next(data) {\n            try {\n              if (data && data.data && data.data.t_plan_document_node && data.data.t_plan_document_node.length > 0) {\n                const results = normalize(data);\n                ThunkAPI.dispatch(planDocumentNodesState.actions.setPlanDocumentNodesState(results.nodes));\n              } else {\n                ThunkAPI.dispatch(planDocumentNodesState.actions.setPlanDocumentNodesState({nodes:{}}));\n              }\n              resolve()\n            } catch(e) {\n              reject(e)\n              debugger\n              console.error('reactSubscribePlanDocumentNodes exception', e);\n            }\n          },\n          error(err) {\n            reject(err)\n            debugger\n            console.error('reactSubscribePlanDocumentNodes err', err);\n          }\n        })\n      } else {\n        reject()\n      }\n    }\n    */\n  }),\n);\n\n\n/*\nalinode\n{\n  \"object\": {\n    \"document_id\": \"d39e6ddc-6220-4c20-8c7d-9d01e65192de\",\n    \"parent_id\": \"0d62e0bc-1c29-4cb9-bc79-a39a9b59768f\",\n    \"data\": {\n      \"type\": \"TEST0.1\"\n    }\n  }\n}\n\npäätason\n{\n  \"object\": {\n    \"document_id\": \"d39e6ddc-6220-4c20-8c7d-9d01e65192de\",\n    \"parent_id\": null,\n    \"data\": {\n      \"type\": \"TEST2\"\n    }\n  }\n}\n */\n// Insert\nasync function insertPlanDocumentNode(documentId, parentId, changes) {\n  const changesToBeMade = changes;\n  if (changes && changes.type) {\n    // eslint-disable-next-line\n    changesToBeMade.__typename = changes.type;\n  }\n  return new Promise((resolve, reject) => {\n    reject(new Error(`insertPlanDocumentNode docId: ${documentId}, parentId: ${parentId} TBD, changes: ${changesToBeMade}`));\n    /*  Was just test implementation of qql\n    qqlClient.mutate({\n      variables: {\n        object: {\n          document_id: documentId,\n          parent_id: parentId,\n          data: changesToBeMade\n        }\n      },\n      mutation: INSERT_PLAN_DOCUMENT_NODE\n    })\n    .then((result) => {\n      const queryResults = normalize(result);\n      console.debug('SDK insertPlanDocumentNode ok', queryResults);\n      resolve(queryResults.nodes);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK insertPlanDocumentNode error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\nexport const reactInsertPlanDocumentNode = createAsyncThunk(\n  'plans/insertPlanDocumentNode',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('reactInsertPlanDocumentNode state:', ThunkAPI.getState());\n    const { documentId, parentId, changes } = params;\n    return insertPlanDocumentNode(documentId, parentId, changes);\n    // }\n  },\n);\n\n/* {\n  \"uid\": \"e1727bae-cd29-4a77-8234-a6528fda48fc\",\n  \"changes\": {\n    \"data\": {\n      \"name\": \"HUB 2.0\"\n    }\n  }\n} */\n// Update\nasync function updatePlanDocumentNode(uid, changes) {\n  return new Promise((resolve, reject) => {\n    reject(new Error(`updatePlanDocumentNode uid: ${uid} TBD, changes: ${changes}`));\n    /*  Was just test implementation of qql\n    qqlClient.mutate({\n      variables: {\n        uid: uid,\n        changes: changes\n      },\n      mutation: UPDATE_PLAN_DOCUMENT_NODE\n    })\n    .then((result) => {\n      debugger\n      const queryResults = normalize(result);\n      console.debug('SDK updatePlanDocumentNode ok', queryResults);\n      resolve(queryResults.nodes);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK updatePlanDocumentNode error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\n\nexport const reactUpdatePlanDocumentNode = createAsyncThunk(\n  'plans/updatePlanDocumentNode',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('reactUpdatePlanDocumentNode state: ', ThunkAPI.getState());\n    const { uid, changes } = params;\n    return updatePlanDocumentNode(uid, changes);\n    // }\n  },\n);\n\n// Remove Plan\nasync function removePlanDocumentNode(uid) {\n  return new Promise((resolve, reject) => {\n    reject(new Error(`removePlanDocumentNode uid: ${uid} TBD`));\n    /*  Was just test implementation of qql\n    qqlClient.mutate({\n      variables: {\n        \"uid\": uid,\n      },\n      mutation: REMOVE_PLAN_DOCUMENT_NODE\n    })\n    .then((result) => {\n      debugger\n      console.debug('SDK removePlanDocumentNode ok', result);\n      resolve(result);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK removePlanDocumentNode error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\n\nexport const reactRemovePlanDocumentNode = createAsyncThunk(\n  'plans/removePlanDocumentNode',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('reactRemovePlanDocumentNode state: ', ThunkAPI.getState());\n    const { uid } = params;\n    return removePlanDocumentNode(uid);\n    // }\n  },\n);\n\nexport const planDocumentNodesState = createSlice({\n  name: 'nodes',\n  initialState: planDocumentNodesAdapter.getInitialState(),\n  reducers: {\n    setPlanDocumentNodesState(state, action) {\n      const stateToSet = state;\n      const newState = action.payload;\n      planDocumentNodesAdapter.setAll(stateToSet, newState);\n    },\n  },\n  extraReducers: {\n    // Add reducers for additional action types here, and handle loading state as needed\n    [reactFetchPlanDocumentNodes.fulfilled]: (state, action) => {\n      planDocumentNodesAdapter.upsertMany(state, action.payload);\n    },\n    [reactFetchPlanDocumentNodes.rejected]: (state, action) => {\n      console.error('SDK reactFetchPlanDocumentNodes rejected state: ', state);\n      console.error('SDK reactFetchPlanDocumentNodes rejected action: ', action);\n    },\n    [reactInsertPlanDocumentNode.fulfilled]: (state, action) => {\n      planDocumentNodesAdapter.updateOne(state, action.payload);\n    },\n    [reactInsertPlanDocumentNode.rejected]: (state, action) => {\n      console.error('SDK reactInsertPlanDocumentNode rejected state: ', state);\n      console.error('SDK reactInsertPlanDocumentNode rejected action: ', action);\n    },\n    [reactUpdatePlanDocumentNode.fulfilled]: (state, action) => {\n      planDocumentNodesAdapter.updateOne(state, action.payload);\n    },\n    [reactUpdatePlanDocumentNode.rejected]: (state, action) => {\n      console.error('SDK reactUpdatePlanDocumentNode rejected state: ', state);\n      console.error('SDK reactUpdatePlanDocumentNode rejected action: ', action);\n    },\n    [reactRemovePlanDocumentNode.fulfilled]: (state, action) => {\n      planDocumentNodesAdapter.updateOne(state, action.payload);\n    },\n    [reactRemovePlanDocumentNode.rejected]: (state, action) => {\n      console.error('SDK reactRemovePlanDocumentNode rejected state: ', state);\n      console.error('SDK reactRemovePlanDocumentNode rejected action: ', action);\n    },\n  },\n});\n\n\nplanDocumentNodesState.selectors = planDocumentNodesAdapter.getSelectors((state) => state.nodes);\nplanDocumentNodesState.selectors.selectPlanDocumentNodes = createSelector(\n  [(state) => state.nodes, (state, documentId) => documentId],\n  (nodes, documentId) => {\n    const ids = nodes.ids.filter((id) => nodes.entities[id].document_id === documentId);\n    const entities = [];\n    ids.forEach((id) => {\n      entities.push(nodes.entities[id]);\n    });\n    return entities;\n  },\n);\n\nexport const {\n  selectById: reactSelectDocumentNodeById,\n  selectIds: reactSelectDocumentNodeIds,\n  selectEntities: reactSelectDocumentNodeEntities,\n  selectAll: reactSelectAllDocumentNodes,\n  selectTotal: reactSelectTotalDocumentNodes,\n} = planDocumentNodesAdapter.getSelectors((state) => state.nodes);\nexport const reactSelectPlanDocumentNodes = planDocumentNodesState.selectors.selectPlanDocumentNodes;\n\n\n// const { actions, reducer } = planDocumentNodesState;\nconst { reducer } = planDocumentNodesState;\n\n/**\n * Plan Documents reducer\n * @type {function} reducer\n */\nexport { reducer as planDocumentNodesReducer };\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/planDocumentNodes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "name": "planDocumentNodesAdapter",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~planDocumentNodesAdapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "fetchPlanDocumentNodes",
    "memberof": "src/reducers/planDocumentNodes.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~fetchPlanDocumentNodes",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "documentId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "name": "reactFetchPlanDocumentNodes",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~reactFetchPlanDocumentNodes",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": "{reactFetchPlanDocumentNodes}",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "reactSubscribePlanDocumentNodes",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~reactSubscribePlanDocumentNodes",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": "{reactSubscribePlanDocumentNodes}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "insertPlanDocumentNode",
    "memberof": "src/reducers/planDocumentNodes.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~insertPlanDocumentNode",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "documentId",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentId",
        "types": [
          "*"
        ]
      },
      {
        "name": "changes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "name": "reactInsertPlanDocumentNode",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~reactInsertPlanDocumentNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": "{reactInsertPlanDocumentNode}",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "function",
    "name": "updatePlanDocumentNode",
    "memberof": "src/reducers/planDocumentNodes.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~updatePlanDocumentNode",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [
      {
        "name": "uid",
        "types": [
          "*"
        ]
      },
      {
        "name": "changes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "variable",
    "name": "reactUpdatePlanDocumentNode",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~reactUpdatePlanDocumentNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": "{reactUpdatePlanDocumentNode}",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "removePlanDocumentNode",
    "memberof": "src/reducers/planDocumentNodes.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~removePlanDocumentNode",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "params": [
      {
        "name": "uid",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "variable",
    "name": "reactRemovePlanDocumentNode",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~reactRemovePlanDocumentNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": "{reactRemovePlanDocumentNode}",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "variable",
    "name": "planDocumentNodesState",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~planDocumentNodesState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": "{planDocumentNodesState}",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "variable",
    "name": "reactSelectPlanDocumentNodes",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~reactSelectPlanDocumentNodes",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": "{reactSelectPlanDocumentNodes}",
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "variable",
    "name": "reducer",
    "memberof": "src/reducers/planDocumentNodes.js",
    "static": true,
    "longname": "src/reducers/planDocumentNodes.js~reducer",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocumentNodes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 295,
    "kind": "file",
    "name": "src/reducers/planDocuments.js",
    "content": "// \nimport {\n  createSlice,\n  createEntityAdapter,\n  createAsyncThunk,\n  createSelector,\n} from '@reduxjs/toolkit';\n\n\n/*\nimport {\n  GET_PLAN_DOCUMENTS,\n  SUBS_PLAN_DOCUMENTS,\n  INSERT_PLAN_DOCUMENT,\n  UPDATE_PLAN_DOCUMENT,\n  REMOVE_PLAN_DOCUMENT,\n  qqlClient,\n  normalize,\n  isAuth\n  } from '../qql.js'\n */\n\n\nconst planDocumentsAdapter = createEntityAdapter({\n  // Assume IDs are stored in a field uid\n  selectId: (document) => document.uid,\n  // Keep the \"all IDs\" array sorted based on plans\n  sortComparer: (a, b) => a.plan_id.localeCompare(b.plan_id),\n});\n\n// Fetch\nasync function fetchPlanDocuments(planId) {\n  return new Promise((resolve, reject) => {\n    reject(new Error(`fetchPlanDocuments planId: ${planId} TBD`));\n    /*  Was just test implementation of qql\n    qqlClient.query({\n      variables: {\n        \"plan_id\": planId\n      },\n      query: GET_PLAN_DOCUMENTS\n    })\n    .then((result) => {\n      const queryResults = normalize(result);\n      console.debug('SDK fetchPlanDocuments ok', queryResults);\n      resolve(queryResults.documents);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK fetchPlanDocuments error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\nexport const reactFetchPlanDocuments = createAsyncThunk(\n  'plans/fetchPlanDocuments',\n  async (planId, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('fetchPlanDocuments state: ', ThunkAPI.getState());\n    return fetchPlanDocuments(planId);\n  },\n);\n\n// Subscribe\nexport const reactSubscribePlanDocuments = createAsyncThunk(\n  'plans/subscribePlanDocuments',\n  async (params, ThunkAPI) => new Promise((resolve, reject) => {\n    console.debug('reactSubscribePlanDocuments state: ', ThunkAPI.getState());\n    reject(new Error(`reactSubscribePlanDocuments params: ${params} TBD`));\n    /*  Was just test implementation of qql\n      if (isAuth(ThunkAPI.getState())) {\n        const {planId} = params;\n        const subsHandle = qqlClient.subscribe({\n          query: SUBS_PLAN_DOCUMENTS,\n          variables: {\"plan_id\": planId },\n        }).subscribe({\n          next(data) {\n            try {\n              if (data && data.data && data.data.t_plan_document && data.data.t_plan_document.length > 0) {\n                const results = normalize(data);\n                ThunkAPI.dispatch(planDocumentsState.actions.setPlanDocumentsState(results.documents));\n              } else {\n                ThunkAPI.dispatch(planDocumentsState.actions.setPlanDocumentsState({documents:{}}));\n              }\n              resolve()\n            } catch(e) {\n              reject(e)\n              debugger\n              console.error('reactSubscribePlanDocuments exception', e);\n            }\n          },\n          error(err) {\n            reject(err)\n            debugger\n            console.error('reactSubscribePlanDocuments err', err);\n          }\n        })\n      } else {\n        reject()\n      }\n      */\n  }),\n);\n\n\n// Insert document\nasync function insertPlanDocument(planId, changes) {\n  return new Promise((resolve, reject) => {\n    reject(new Error(`insertPlanDocument planId: ${planId} TBD, changes: ${changes}`));\n    /*  Was just test implementation of qql\n    qqlClient.mutate({\n      variables: {\n        object: {\n          plan_id: planId,\n          name: changes.name,\n          nodes: {\n            data: [\n              {\n                data: {\n                  rooms: changes.rooms || [],\n                  devices: changes.devices || [],\n                  rules: changes.rules || [],\n                  scenes: changes.scenes || [],\n                  type: 'root',\n                  __typename: 'node',\n                  name: '?'\n                }\n              }\n            ]\n          }\n        }\n      },\n      mutation: INSERT_PLAN_DOCUMENT\n    })\n    .then((result) => {\n      const queryResults = normalize(result);\n      console.debug('SDK insertPlanDocument ok', queryResults);\n      resolve(queryResults.documents);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK insertPlanDocument error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\n/*\n{\n  \"object\": {\n    \"plan_id\": \"79089ab2-4e50-40b1-9b8a-a6cacab93373\",\n    \"name\": \"uusi\",\n    \"nodes\": {\n      \"data\": [\n        {\n          \"data\": {\n            \"rooms\": [],\n            \"devices\": [],\n            \"rules\": [],\n            \"scenes\": [],\n            \"type\": \"root\",\n            \"name\": \"root\"\n          }\n        }\n      ]\n    }\n  }\n}\n*/\n\nexport const reactInsertPlanDocument = createAsyncThunk(\n  'plans/insertPlanDocument',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('reactInsertPlanDocument state: ', ThunkAPI.getState());\n    const { planId, changes } = params;\n    return insertPlanDocument(planId, changes);\n    // }\n  },\n);\n\n\n// Update Document\nasync function updatePlanDocument(uid, changes) {\n  return new Promise((resolve, reject) => {\n    reject(new Error(`updatePlanDocument uid: ${uid} TBD, changes: ${changes}`));\n    /*  Was just test implementation of qql\n    qqlClient.mutate({\n      variables: {\n        uid: uid,\n        changes: changes\n      },\n      mutation: UPDATE_PLAN_DOCUMENT\n    })\n    .then((result) => {\n      const queryResults = normalize(result);\n      console.debug('SDK updatePlanDocument ok', queryResults);\n      resolve(queryResults.documents);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK updatePlanDocument error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\n\nexport const reactUpdatePlanDocument = createAsyncThunk(\n  'plans/updatePlanDocument',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('reactUpdatePlanDocument state: ', ThunkAPI.getState());\n    const { uid, changes } = params;\n    return updatePlanDocument(uid, changes);\n    // }\n  },\n);\n\n// Remove Plan\nasync function removePlanDocument(uid) {\n  return new Promise((resolve, reject) => {\n    reject(new Error(`removePlanDocument uid: ${uid} TBD`));\n    /*  Was just test implementation of qql\n    qqlClient.mutate({\n      variables: {\n        \"uid\": uid,\n      },\n      mutation: REMOVE_PLAN_DOCUMENT\n    })\n    .then((result) => {\n      console.debug('SDK removePlanDocument ok', result);\n      resolve(result);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK removePlanDocument error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\n\nexport const reactRemovePlanDocument = createAsyncThunk(\n  'plans/removePlanDocument',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('removePlanDocument state: ', ThunkAPI.getState());\n    const { uid } = params;\n    return removePlanDocument(uid);\n    // }\n  },\n);\n\nexport const planDocumentsState = createSlice({\n  name: 'documents',\n  initialState: planDocumentsAdapter.getInitialState(),\n  reducers: {\n    setPlanDocumentsState(state, action) {\n      const stateToSet = state;\n      const newState = action.payload;\n      planDocumentsAdapter.setAll(stateToSet, newState);\n    },\n  },\n  extraReducers: {\n    // Add reducers for additional action types here, and handle loading state as needed\n    [reactFetchPlanDocuments.fulfilled]: (state, action) => {\n      planDocumentsAdapter.upsertMany(state, action.payload);\n    },\n    [reactFetchPlanDocuments.rejected]: (state, action) => {\n      console.error('SDK reactFetchPlanDocuments rejected state: ', state);\n      console.error('SDK reactFetchPlanDocuments rejected action: ', action);\n    },\n    [reactInsertPlanDocument.fulfilled]: (state, action) => {\n      planDocumentsAdapter.updateOne(state, action.payload);\n    },\n    [reactInsertPlanDocument.rejected]: (state, action) => {\n      console.error('SDK reactInsertPlanDocument rejected state: ', state);\n      console.error('SDK reactInsertPlanDocument rejected action: ', action);\n    },\n    [reactUpdatePlanDocument.fulfilled]: (state, action) => {\n      planDocumentsAdapter.updateOne(state, action.payload);\n    },\n    [reactUpdatePlanDocument.rejected]: (state, action) => {\n      console.error('SDK reactUpdatePlanDocument rejected state: ', state);\n      console.error('SDK reactUpdatePlanDocument rejected action: ', action);\n    },\n    [reactRemovePlanDocument.fulfilled]: (state, action) => {\n      planDocumentsAdapter.updateOne(state, action.payload);\n    },\n    [reactRemovePlanDocument.rejected]: (state, action) => {\n      console.error('SDK reactRemovePlanDocument rejected state: ', state);\n      console.error('SDK reactRemovePlanDocument rejected action: ', action);\n    },\n  },\n});\n\n\nplanDocumentsState.selectors = planDocumentsAdapter.getSelectors((state) => state.documents);\n\nplanDocumentsState.selectors.selectPlanDocuments = createSelector(\n  [(state) => state.documents, (state, planId) => planId],\n  (documents, planId) => {\n    const ids = documents.ids.filter((id) => documents.entities[id].plan_id === planId);\n    const entities = [];\n    ids.forEach((id) => {\n      entities.push(documents.entities[id]);\n    });\n    return entities;\n  },\n);\nexport const {\n  selectById: reactSelectDocumentById,\n  selectIds: reactSelectDocumentIds,\n  selectEntities: reactSelectDocumentEntities,\n  selectAll: reactSelectAllDocuments,\n  selectTotal: reactSelectTotalDocuments,\n} = planDocumentsAdapter.getSelectors((state) => state.documents);\nexport const reactSelectPlanDocuments = planDocumentsState.selectors.selectPlanDocuments;\n\n\n// const { actions, reducer } = planDocumentsState;\nconst { reducer } = planDocumentsState;\n\n/**\n * Plan Documents reducer\n * @type {function} reducer\n */\nexport { reducer as planDocumentsReducer };\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/planDocuments.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 296,
    "kind": "variable",
    "name": "planDocumentsAdapter",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~planDocumentsAdapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 297,
    "kind": "function",
    "name": "fetchPlanDocuments",
    "memberof": "src/reducers/planDocuments.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/planDocuments.js~fetchPlanDocuments",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "planId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 298,
    "kind": "variable",
    "name": "reactFetchPlanDocuments",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~reactFetchPlanDocuments",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": "{reactFetchPlanDocuments}",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "variable",
    "name": "reactSubscribePlanDocuments",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~reactSubscribePlanDocuments",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": "{reactSubscribePlanDocuments}",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "function",
    "name": "insertPlanDocument",
    "memberof": "src/reducers/planDocuments.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/planDocuments.js~insertPlanDocument",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "planId",
        "types": [
          "*"
        ]
      },
      {
        "name": "changes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "variable",
    "name": "reactInsertPlanDocument",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~reactInsertPlanDocument",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": "{reactInsertPlanDocument}",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "function",
    "name": "updatePlanDocument",
    "memberof": "src/reducers/planDocuments.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/planDocuments.js~updatePlanDocument",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [
      {
        "name": "uid",
        "types": [
          "*"
        ]
      },
      {
        "name": "changes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "variable",
    "name": "reactUpdatePlanDocument",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~reactUpdatePlanDocument",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": "{reactUpdatePlanDocument}",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "function",
    "name": "removePlanDocument",
    "memberof": "src/reducers/planDocuments.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/planDocuments.js~removePlanDocument",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "params": [
      {
        "name": "uid",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "variable",
    "name": "reactRemovePlanDocument",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~reactRemovePlanDocument",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": "{reactRemovePlanDocument}",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "variable",
    "name": "planDocumentsState",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~planDocumentsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": "{planDocumentsState}",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "variable",
    "name": "reactSelectPlanDocuments",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~reactSelectPlanDocuments",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": "{reactSelectPlanDocuments}",
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "variable",
    "name": "reducer",
    "memberof": "src/reducers/planDocuments.js",
    "static": true,
    "longname": "src/reducers/planDocuments.js~reducer",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/planDocuments.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "file",
    "name": "src/reducers/plans.js",
    "content": "// \nimport {\n  createSlice,\n  createEntityAdapter,\n  createAsyncThunk,\n  // createSelector,\n} from '@reduxjs/toolkit';\n\n\n// Was just test implementation of qql\n// import { GET_PLANS, SUBS_PLANS, INSERT_PLAN, UPDATE_PLAN, REMOVE_PLAN, qqlClient, normalize, isAuth } from '../qql.js'\n\n/*\n** addOne: accepts a single entity, and adds it.\n** addMany: accepts an array of entities or an object in the shape of Record<EntityId, T>, and adds them.\n** setAll: accepts an array of entities or an object in the shape of Record<EntityId, T>,\n** and replaces the existing entity contents with the values in the array.\n** removeOne: accepts a single entity ID value, and removes the entity with that ID if it exists.\n** removeMany: accepts an array of entity ID values, and removes each entity with those IDs if they exist.\n** updateOne: accepts an \"update object\" containing an entity ID and an object containing one or\n** more new field values to update inside a changes field, and performs a shallow update on the corresponding entity.\n** updateMany: accepts an array of update objects, and performs shallow updates on all corresponding entities.\n** upsertOne: accepts a single entity. If an entity with that ID exists, it will perform a shallow update\n** and the specified fields will be merged into the existing entity, with any matching fields overwriting the existing values.\n** If the entity does not exist, it will be added.\n** upsertMany: accepts an array of entities or an object in the shape of Record<EntityId, T> that will be shallowly upserted.\n*/\nconst plansAdapter = createEntityAdapter({\n  // Assume IDs are stored in a field uid\n  selectId: (plan) => {\n    console.log('SDK plansAdapter: ', plan);\n    return plan.uid;\n  },\n  // Keep the \"all IDs\" array sorted based on plan names\n  sortComparer: (a, b) => b.changed_at.localeCompare(a.changed_at),\n});\n\n// Fetch all plans\nasync function fetchPlans() {\n  return new Promise((resolve, reject) => {\n    reject(new Error('fetchPlans TBD'));\n    /*  Was just test implementation of qql\n    qqlClient.query({\n      query: GET_PLANS\n    })\n    .then((result) => {\n      const queryResults = normalize(result);\n      console.debug('SDK fetchPlans ok', queryResults);\n      resolve(queryResults.plans);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK fetchPlans error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\n\nexport const reactFetchPlans = createAsyncThunk(\n  'plans/fetchPlans',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('reactFetchPlans state', ThunkAPI.getState());\n    return fetchPlans();\n    // }\n  },\n  {\n    condition: (params, { getState, extra }) => {\n      const state = getState();\n      console.debug('reactFetchPlans condition state: ', state);\n      console.debug('reactFetchPlans condition extra: ', extra);\n    },\n  },\n);\n\n\n// Subscribe\nexport const reactSubscribePlans = createAsyncThunk(\n  'plans/subscribePlans',\n  async (params, ThunkAPI) => new Promise((resolve, reject) => {\n    console.debug('reactSubscribePlans state: ', ThunkAPI.getState());\n    console.debug('reactSubscribePlans params: ', params);\n    reject(new Error('subscribePlans TBD'));\n    /*  Was just test implementation of qql\n      if (isAuth(ThunkAPI.getState())) {\n        const subsHandle = qqlClient.subscribe({\n          query: SUBS_PLANS,\n          //variables: { },\n        }).subscribe({\n          next(data) {\n            try {\n              if (data && data.data && data.data.t_plan &&data.data.t_plan.length > 0) {\n                const results = normalize(data);\n                // plansAdapter.setAll(ThunkAPI.getState(), results.plans)\n                ThunkAPI.dispatch(plansState.actions.setPlansState(results.plans));\n              } else {\n                ThunkAPI.dispatch(plansState.actions.setPlansState({plans:{}}));\n              }\n              resolve()\n            } catch(e) {\n              reject(e)\n              debugger\n              console.error('reactSubscribePlans exception', e);\n            }\n          },\n          error(err) {\n            reject(err)\n            debugger\n            console.error('reactSubscribePlans err', err);\n          }\n        })\n      } else {\n        reject()\n      }\n    })\n    */\n  }),\n);\n\n// Insert plan\nasync function insertPlan(name) {\n  return new Promise((resolve, reject) => {\n    console.debug('SDK insertPlan name', name);\n    reject(new Error('insertPlans TBD'));\n    /*  Was just test implementation of qql\n    qqlClient.mutate({\n      variables: {\n        object: {\n          name: name,\n          documents: {\n            data: [\n              {\n                name: \"?\"\n              }\n            ]\n          }\n        }\n      },\n      mutation: INSERT_PLAN\n    })\n    .then((result) => {\n      const queryResults = normalize(result);\n      console.debug('SDK insertPlan ok', queryResults);\n      resolve(queryResults.plans);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK insertPlan error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\n\nexport const reactInsertPlan = createAsyncThunk(\n  'plans/insertPlan',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('reactInsertPlan state: ', ThunkAPI.getState());\n    const { name } = params;\n    return insertPlan(name);\n    // }\n  },\n);\n\n\n// Update Plan\nasync function updatePlan(uid, changes) {\n  return new Promise((resolve, reject) => {\n    reject(new Error(`updatePlan uid: ${uid} TBD, changes: ${changes}`));\n    /*  Was just test implementation of qql\n    qqlClient.mutate({\n      variables: {\n        uid: uid,\n        changes: changes\n      },\n      mutation: UPDATE_PLAN\n    })\n    .then((result) => {\n      const queryResults = normalize(result);\n      console.debug('SDK updatePlan ok', queryResults);\n      resolve(queryResults.plans);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK updatePlan error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\n\nexport const reactUpdatePlan = createAsyncThunk(\n  'plans/updatePlan',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('reactUpdatePlan state: ', ThunkAPI.getState());\n    const { uid, changes } = params;\n    return updatePlan(uid, changes);\n    // }\n  },\n);\n\n// Remove Plan\nasync function removePlan(uid) {\n  return new Promise((resolve, reject) => {\n    reject(new Error(`removePlan  uid: ${uid} TBD`));\n    /*  Was just test implementation of qql\n    qqlClient.mutate({\n      variables: {\n        \"uid\": uid,\n      },\n      mutation: REMOVE_PLAN\n    })\n    .then((result) => {\n      console.debug('SDK removePlan ok', result);\n      resolve(result);\n    }).catch((error) => {\n      debugger;\n      console.error('SDK removePlan error:', error);\n      reject(error);\n    });\n    */\n  });\n}\n\n\nexport const reactRemovePlan = createAsyncThunk(\n  'plans/removePlan',\n  async (params, ThunkAPI) => {\n    // if (isAuth(ThunkAPI.getState())) {\n    console.debug('reactRemovePlan state: ', ThunkAPI.getState());\n    const { uid } = params;\n    return removePlan(uid);\n    // }\n  },\n);\n\n// Slice\nexport const plansState = createSlice({\n  name: 'plans',\n  initialState: plansAdapter.getInitialState(),\n  reducers: {\n    setPlansState(state, action) {\n      // const stateToSet = state;\n      // const oldState = stateToSet.plansState;\n      const newState = action.payload;\n      plansAdapter.setAll(state, newState);\n      // console.log(`SDK setPlansState: PLANS state ${oldState} -> ${newState}`);\n      // console.info('plans.js setPlansState: newState', newState)\n\n      /*\n      const normalized = normalize(newState, plansEntity);\n      console.info('plans.js setPlansState: normalized plans', normalized)//.entities.plans)\n\n      Object.entries(normalized.entities.plans).forEach(([id, plan]) => {\n\n        console.info('plans.js document from plan:', JSON.stringify(plan.document));\n\n        const locations = getLocationsFromDocument(plan.document)\n        console.info('plans.js locations tree:', JSON.stringify(locations));\n        plan.locations = locations;\n\n        const document = getDocumentFromLocations(plan.locations)\n        console.info('plans.js document from tree:', JSON.stringify(document))\n      });\n      plansAdapter.setAll(state, normalized.entities.plans)\n      */\n\n      // const normalized = normalize(newState, plansEntity);\n      // console.info('plans.js setPlansState: normalized plans', normalized)\n      /*\n      Object.entries(normalized.entities.plans).forEach(([id, plan]) => {\n        //const documents = normalize(plan, sEntity);\n        //const normalizedDocuments = normalize(documents, documentsEntity);\n        //Object.entries(normalizedDocuments.entities.documents).forEach(([id, docuement]) => {\n          debugger\n        //});\n\n      });\n      plansAdapter.setAll(state, normalized.entities.plans)\n      */\n    },\n    // listPlans: listPlans,\n\n  },\n  extraReducers: {\n    // Add reducers for additional action types here, and handle loading state as needed\n    [reactFetchPlans.fulfilled]: (state, action) => {\n      plansAdapter.upsertMany(state, action.payload);\n    },\n    [reactFetchPlans.rejected]: (state, action) => {\n      console.error('SDK reactFetchPlans rejected state: ', state);\n      console.error('SDK reactFetchPlans rejected action: ', action);\n    },\n    [reactInsertPlan.fulfilled]: (state, action) => {\n      plansAdapter.updateOne(state, action.payload);\n    },\n    [reactInsertPlan.rejected]: (state, action) => {\n      console.error('SDK reactInsertPlan rejected state: ', state);\n      console.error('SDK reactInsertPlan rejected action: ', action);\n    },\n    [reactUpdatePlan.fulfilled]: (state, action) => {\n      plansAdapter.updateOne(state, action.payload);\n    },\n    [reactUpdatePlan.rejected]: (state, action) => {\n      console.error('SDK reactFetchPlans rejected state: ', state);\n      console.error('SDK reactFetchPlans rejected action: ', action);\n    },\n    [reactRemovePlan.fulfilled]: (state, action) => {\n      plansAdapter.updateOne(state, action.payload);\n    },\n    [reactRemovePlan.rejected]: (state, action) => {\n      console.error('SDK reactRemovePlan rejected state: ', state);\n      console.error('SDK reactRemovePlan rejected action: ', action);\n    },\n  },\n});\n\n\nplansState.selectors = plansAdapter.getSelectors((state) => state.plans);\nplansState.selectors.getPlans = plansState.selectors.selectEntities;\n\n\nconst { reducer } = plansState;\n// const { actions, reducer } = plansState;\n// console.info('plans.js: actions', actions)\n// console.info('plans.js: reducer', reducer)\n// console.info('plans.js: plansState', plansState)\n\n/**\n * Plans reducer\n * @type {function} reducer\n */\nexport { reducer as plansReducer };\n\n// Extract and export each action creator by name\n/*\nexport const {\n  updateHubs, selectHub, unSelectHub, setHubConnectionState,\n} = actions;\n*/\n\nexport const {\n  selectById: reactSelectPlanById,\n  selectIds: reactSelectPlanIds,\n  selectEntities: reactSelectPlanEntities,\n  selectAll: reactSelectAllPlans,\n  selectTotal: reactSelectTotalPlans,\n} = plansAdapter.getSelectors((state) => state.plans);\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/plans.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "variable",
    "name": "plansAdapter",
    "memberof": "src/reducers/plans.js",
    "static": true,
    "longname": "src/reducers/plans.js~plansAdapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 312,
    "kind": "function",
    "name": "fetchPlans",
    "memberof": "src/reducers/plans.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/plans.js~fetchPlans",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 313,
    "kind": "variable",
    "name": "reactFetchPlans",
    "memberof": "src/reducers/plans.js",
    "static": true,
    "longname": "src/reducers/plans.js~reactFetchPlans",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": "{reactFetchPlans}",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "variable",
    "name": "reactSubscribePlans",
    "memberof": "src/reducers/plans.js",
    "static": true,
    "longname": "src/reducers/plans.js~reactSubscribePlans",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": "{reactSubscribePlans}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "function",
    "name": "insertPlan",
    "memberof": "src/reducers/plans.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/plans.js~insertPlan",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "variable",
    "name": "reactInsertPlan",
    "memberof": "src/reducers/plans.js",
    "static": true,
    "longname": "src/reducers/plans.js~reactInsertPlan",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": "{reactInsertPlan}",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "updatePlan",
    "memberof": "src/reducers/plans.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/plans.js~updatePlan",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [
      {
        "name": "uid",
        "types": [
          "*"
        ]
      },
      {
        "name": "changes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 318,
    "kind": "variable",
    "name": "reactUpdatePlan",
    "memberof": "src/reducers/plans.js",
    "static": true,
    "longname": "src/reducers/plans.js~reactUpdatePlan",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": "{reactUpdatePlan}",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "removePlan",
    "memberof": "src/reducers/plans.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/reducers/plans.js~removePlan",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "uid",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "name": "reactRemovePlan",
    "memberof": "src/reducers/plans.js",
    "static": true,
    "longname": "src/reducers/plans.js~reactRemovePlan",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": "{reactRemovePlan}",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "name": "plansState",
    "memberof": "src/reducers/plans.js",
    "static": true,
    "longname": "src/reducers/plans.js~plansState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": "{plansState}",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "variable",
    "name": "reducer",
    "memberof": "src/reducers/plans.js",
    "static": true,
    "longname": "src/reducers/plans.js~reducer",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/plans.js",
    "static": true,
    "longname": "src/reducers/plans.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/plans.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 345,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "src/reducers/rooms.js",
    "content": "\n// \n\nimport { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\n\n\n/**\n * Rooms action creators object\n * @see  https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md\n * @return { {\n *   name : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const roomsState = createSlice({\n  name: 'rooms',\n  initialState: {},\n  reducers: {\n\n    /*\n     * Reducer action of setting rooms state - sets all given rooms of given hub, keeps existing states\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setRooms(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { rooms } = action.payload;\n      const hubRooms = {};\n\n\n      Object.entries(rooms).forEach((entry) => {\n        const [id, room] = entry;\n        hubRooms[id] = { ...room };\n      });\n      stateToSet[hubId] = { ...hubRooms };\n    },\n\n\n    /*\n     * Reducer action of set room state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setRoom(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { room } = action.payload;\n      if (hubId && stateToSet[hubId]) {\n        stateToSet[hubId][room.id] = { ...room };\n      }\n    },\n\n    /*\n     * Reducer action of removing room state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    removeRoom(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { roomId } = action.payload;\n      if (hubId && roomId && stateToSet[hubId] && stateToSet[hubId][roomId]) {\n        delete stateToSet[hubId][roomId];\n      }\n    },\n\n    /*\n     * Reducer action of updating room state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    /*\n    editRoom(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { room } = action.payload;\n      if (hubId && stateToSet[hubId]) {\n        stateToSet[hubId][room.id] = { ...room };\n      }\n    },\n    */\n  },\n});\n\n/*\ntodos.selectors.getCompletedTodoCount = createSelector(\n  [todos.selectors.getTodos],\n  todos =>\n    todos.reduce((count, todo) => (todo.completed ? count + 1 : count), 0)\n);\n*/\n\nconst adapter = createEntityAdapter();\nexport const {\n  selectById: selectRoomById,\n  selectIds: selectRoomIds,\n  selectEntities: selectRoomEntities,\n  selectAll: selectAllRooms,\n  selectTotal: selectTotalRooms,\n} = adapter.getSelectors((state) => state.rooms);\n\nroomsState.selectors = adapter.getSelectors((state) => state.rooms);\nroomsState.selectors.getRooms = createSelector(\n  [(state) => state.rooms],\n  (rooms) => rooms,\n);\n\nconst { actions, reducer } = roomsState;\n\n/**\n * Devices reducer\n * @type {function} reducer\n */\nexport { reducer as roomsReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(addDevice({ id: 123, name: 'Unnamed device' }))\n{type : \"devices/addDevice\", payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const {\n  setRooms, setRoom, removeRoom,\n} = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/rooms.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "variable",
    "name": "roomsState",
    "memberof": "src/reducers/rooms.js",
    "static": true,
    "longname": "src/reducers/rooms.js~roomsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/rooms.js",
    "importStyle": "{roomsState}",
    "description": "Rooms action creators object",
    "see": [
      " https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 17,
    "return": {
      "nullable": null,
      "types": [
        " {\n  name : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "variable",
    "name": "adapter",
    "memberof": "src/reducers/rooms.js",
    "static": true,
    "longname": "src/reducers/rooms.js~adapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/rooms.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 327,
    "kind": "variable",
    "name": "selectById",
    "memberof": "src/reducers/rooms.js",
    "static": true,
    "longname": "src/reducers/rooms.js~selectById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/rooms.js",
    "importStyle": "{selectById}",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/rooms.js",
    "static": true,
    "longname": "src/reducers/rooms.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/rooms.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 329,
    "kind": "variable",
    "name": "setRooms",
    "memberof": "src/reducers/rooms.js",
    "static": true,
    "longname": "src/reducers/rooms.js~setRooms",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/rooms.js",
    "importStyle": "{setRooms}",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "file",
    "name": "src/reducers/user.js",
    "content": "// \n\nimport { createSlice, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport isEmpty from 'lodash/isEmpty';\nimport { LANGUAGES, USER_STATES, ROLES } from '../user/constants';\n\n\n/**\n * User action creators object\n * @see  https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md\n * @return { {\n *   slice : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const userState = createSlice({\n  name: 'user',\n  initialState: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    language: LANGUAGES.NONE,\n    authKey: '',\n    role: ROLES.ANONYMOUS,\n    eulaAccepted: false,\n    state: USER_STATES.WAITING_LANGUAGE,\n  },\n  reducers: {\n    /*\n     * Reducer action of setting user's state\n     * @param  {Object} state\n     * @param  {payload:{state:USER_STATE_TYPE}} action\n     */\n    changeState(state, action) {\n      const stateToSet = state;\n      const newState = action.payload;\n      const oldState = state.state;\n      console.log(`User state ${oldState} -> ${newState}`);\n      switch (oldState) {\n        case USER_STATES.WAITING_LANGUAGE: {\n          if (newState === USER_STATES.LANGUAGE_SET) {\n            if (!isEmpty(state.language)) {\n              stateToSet.state = USER_STATES.WAITING_LOGIN;\n            }\n          }\n          break;\n        }\n        case USER_STATES.WAITING_LOGIN: {\n          if (newState === USER_STATES.LOGIN_DONE) {\n            if (!isEmpty(state.authKey)) {\n              if (isEmpty(state.eulaAcceted)) {\n                stateToSet.state = USER_STATES.WAITING_EULA;\n              } else {\n                stateToSet.state = USER_STATES.AUTHENTICATED;\n              }\n            }\n          }\n          break;\n        }\n        case USER_STATES.WAITING_EULA: {\n          if (newState === USER_STATES.EULA_ACCEPTED) {\n            stateToSet.state = USER_STATES.AUTHENTICATED;\n          }\n          break;\n        }\n        case USER_STATES.AUTHENTICATED: {\n          if (newState === USER_STATES.LOGGED_OUT) {\n            stateToSet.state = USER_STATES.WAITING_LOGIN;\n          }\n          break;\n        }\n        default: {\n          // statements;\n          break;\n        }\n      }\n    },\n\n\n    /*\n     * Reducer action of setting user's eula to accepted\n     * @param  {Object} state\n     * @param  {payload:boolean} action\n     */\n    setEula(state, action) {\n      const stateToSet = state;\n      stateToSet.eulaAccepted = action.payload;\n    },\n\n    /*\n     * Reducer action of setting user's language\n     * @param  {Object} state\n     * @param  {payload:LANGUAGES_TYPE} action\n     */\n    setLanguage(state, action) {\n      const stateToSet = state;\n      stateToSet.language = action.payload;\n    },\n\n    /*\n     * Reducer action of setting user's authKey\n     * @param  {Object} state\n     * @param  {payload:string} action\n     */\n    setAuthKey(state, action) {\n      const stateToSet = state;\n      stateToSet.authKey = action.payload;\n    },\n\n    /*\n     * Reducer action of setting user's authKey and state\n     * @param  {Object} state\n     * @param  {payload:{state:USER_STATE_TYPE}} action\n     */\n    setAuthenticated(state, action) {\n      const stateToSet = state;\n      stateToSet.authKey = action.payload;\n      stateToSet.state = USER_STATES.KEYED;\n    },\n\n  },\n});\n\n/*\nconsole.log(user)\n{\n    actions : {\n        setState\n    },\n    reducer\n}\n*/\n\nconst adapter = createEntityAdapter();\nuserState.selectors = adapter.getSelectors((state) => state.user);\nuserState.selectors.getUser = createSelector(\n  [(state) => state.user],\n  (user) => user,\n);\n\nconst { actions, reducer } = userState;\n\n/**\n * Hubs reducer\n * @type {function} reducer\n */\nexport { reducer as userReducer };\n\n\n// Extract and export each action creator by name\nexport const {\n  changeState, setEula, setLanguage, setAuthKey,\n} = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 331,
    "kind": "variable",
    "name": "userState",
    "memberof": "src/reducers/user.js",
    "static": true,
    "longname": "src/reducers/user.js~userState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/user.js",
    "importStyle": "{userState}",
    "description": "User action creators object",
    "see": [
      " https://github.com/reduxjs/@reduxjs/toolkit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 18,
    "return": {
      "nullable": null,
      "types": [
        " {\n  slice : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "variable",
    "name": "adapter",
    "memberof": "src/reducers/user.js",
    "static": true,
    "longname": "src/reducers/user.js~adapter",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 333,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/user.js",
    "static": true,
    "longname": "src/reducers/user.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 334,
    "kind": "variable",
    "name": "changeState",
    "memberof": "src/reducers/user.js",
    "static": true,
    "longname": "src/reducers/user.js~changeState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/user.js",
    "importStyle": "{changeState}",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "file",
    "name": "src/rooms/constants.js",
    "content": "// \nexport const ROOMS_FI = Object.freeze({\n  LIVINGROOM: 'Olohuone',\n  BEDROOM: 'Makuuhuone',\n  KITCHEN: 'Keittiö',\n  HALLWAY: 'Eteinen',\n  BATHROOM: 'Kylpyhuone',\n});\n\n\nexport const ROOMS_EN = Object.freeze({\n  LIVINGROOM: 'Living Room',\n  BEDROOM: 'Bedroom',\n  KITCHEN: 'Kitchen',\n  HALLWAY: 'Hallway',\n  BATHROOM: 'Bathroom',\n});\n\n\n\n\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/rooms/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "variable",
    "name": "ROOMS_FI",
    "memberof": "src/rooms/constants.js",
    "static": true,
    "longname": "src/rooms/constants.js~ROOMS_FI",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/constants.js",
    "importStyle": "{ROOMS_FI}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "variable",
    "name": "ROOMS_EN",
    "memberof": "src/rooms/constants.js",
    "static": true,
    "longname": "src/rooms/constants.js~ROOMS_EN",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/constants.js",
    "importStyle": "{ROOMS_EN}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "file",
    "name": "src/rooms/rooms.js",
    "content": "// \nimport isEmpty from 'lodash/isEmpty';\n// import isArray from 'lodash/isArray';\n// import pick from 'lodash/pick';\nimport { store } from '../store';\nimport { roomsState } from '../reducers/rooms';\nimport { hubsState } from '../reducers/hubs';\nimport { userState } from '../reducers/user';\nimport { send, COMMANDS } from '../connection/send';\nimport { HUB_CONNECTION_STATES, getCloudURL } from '../connection/constants';\n\n\n// import { ROOMS_FI, ROOMS_EN } from './constants';\n\n/**\n * Get rooms of all selected hubs\n * @return {HUB_ROOMS_MAP_TYPE}\n */\nexport function getRooms() {\n  const stateNow = store.getState();\n  return roomsState.selectors.getRooms(stateNow);\n}\n\n/**\n * Get rooms of given hub\n * @param  {string} hubId\n * @return {ROOMS_MAP_TYPE}\n */\nexport function getHubRooms(hubId) {\n  let retVal;\n  const rooms = getRooms();\n  if (rooms && rooms[hubId]) {\n    retVal = rooms[hubId];\n  }\n  return retVal;\n}\n\nexport function sendRoomCmd(hubId, commandType, data) {\n  return new Promise((resolve, reject) => {\n    const stateNow = store.getState();\n    const user = userState.selectors.getUser(stateNow);\n\n\n    if (!user || !user.authKey) {\n      console.error('SDK sendRoomCmd error: No userKey!');\n      reject(new Error('Room command error: No userKey!'));\n      return;\n    }\n\n    const hubs = hubsState.selectors.getHubs(stateNow);\n    const hub = hubs[hubId];\n    const { hubKey } = hubs[hubId];\n    if (!hub || (!hubKey && getCloudURL().indexOf('https://one.cozify.fi') === -1)) {\n      console.error('SDK sendRoomCmd error: No hubKey!');\n      reject(new Error('Room command error: No hubKey!'));\n      return;\n    }\n\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.error('SDK sendRoomCmd error: No Hub connection');\n      reject(new Error('Room command error: No hub connection'));\n      return;\n    }\n\n    const { authKey } = user;\n    if (!authKey) {\n      console.error('SDK sendRoomCmd error: No authKey!');\n      reject(new Error('Room command error: No authKey!'));\n      return;\n    }\n\n    if (commandType) {\n      send({\n        command: commandType, authKey, hubId, localUrl: hub.url, hubKey, data,\n      })\n        .then((status) => {\n          console.debug('SDK sendRoomCmd ok', status);\n\n          send({\n            command: COMMANDS.CMD_GET_ROOMS, authKey, hubId, localUrl: hub.url, hubKey,\n          })\n            .then((rooms) => {\n              console.debug('SDK sendRoomCmd refresh rooms ok', rooms);\n              store.dispatch(roomsState.actions.setRooms({ hubId, rooms }));\n              resolve(rooms);\n            })\n            .catch((error) => {\n              console.error('SDK Room command error:', error);\n              reject(error);\n            });\n        })\n        .catch((error) => {\n          console.error('SDK Room command error:', error);\n          reject(error);\n        });\n    }\n  });\n}\n\n/**\n * Add room to given hub\n * do not usr store.dispatch(roomsState.actions.addRoom(hubId, room)) as rooms are coming back in delta\n * @param  {string} hubId\n * @param  {Object} room\n * @return {Promise<Object>} rooms\n */\nexport async function addRoom(hubId, room) {\n  return new Promise((resolve, reject) => {\n    sendRoomCmd(hubId, COMMANDS.CMD_SET_ROOM, [room])\n      .then((rooms) => {\n        resolve(rooms);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n}\n\n/**\n * Edit room of given hub\n * do not usr store.dispatch(roomsState.actions.editRoom(hubId, room)) as rooms are coming back in delta\n * @param  {string} hubId\n * @param  {Object} room\n * @return {Promise<Object>} rooms\n */\nexport async function editRoom(hubId, room) {\n  return new Promise((resolve, reject) => {\n    sendRoomCmd(hubId, COMMANDS.CMD_SET_ROOM, [room])\n      .then((rooms) => {\n        resolve(rooms);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n}\n\n/**\n * Remove given room of given hub\n * @param  {string} hubId\n * @param  {Object} room\n */\nexport async function removeRoom(hubId, room) {\n  // store.dispatch(roomsState.actions.removeRoom(hubId, room));\n  return new Promise((resolve, reject) => {\n    sendRoomCmd(hubId, COMMANDS.CMD_REMOVE_ROOM, { roomId: room.id })\n      .then((rooms) => {\n        resolve(rooms);\n      })\n      .catch((error) => {\n        if (error.response && error.response.status && error.response.status === 404) {\n          const storedRooms = getRooms();\n          resolve(storedRooms[hubId]);\n        }\n        reject(error);\n      });\n  });\n}\n\n/**\n * Rooms handler for poll delta results\n * @param  {string} hubId\n * @param  {boolean} reset\n * @param  {Object} rooms\n */\nexport function roomsDeltaHandler(hubId, reset, rooms) {\n  let oldHubRooms = {};\n  const storedRooms = getRooms();\n  if (storedRooms && storedRooms[hubId]) {\n    oldHubRooms = storedRooms[hubId];\n  }\n\n  if (reset) {\n    // If reset then set rooms as they are received\n    const stateRooms = {\n      hubId,\n      rooms,\n    };\n    store.dispatch(roomsState.actions.setRooms(stateRooms));\n  } else if (!isEmpty(rooms)) {\n    // Loop rooms to check could it be added or should be removed\n    Object.entries(rooms).forEach(([key, room]) => {\n      const stateRoom = {\n        hubId,\n        room,\n      };\n      if (key && room) {\n        store.dispatch(roomsState.actions.setRoom(stateRoom));\n      } else if (key && oldHubRooms[key]) {\n        store.dispatch(roomsState.actions.removeRoom({ hubId, roomId: key }));\n      }\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/rooms/rooms.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "function",
    "name": "getRooms",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rooms/rooms.js~getRooms",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{getRooms}",
    "description": "Get rooms of all selected hubs",
    "lineNumber": 19,
    "return": {
      "nullable": null,
      "types": [
        "HUB_ROOMS_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 340,
    "kind": "function",
    "name": "getHubRooms",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rooms/rooms.js~getHubRooms",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{getHubRooms}",
    "description": "Get rooms of given hub",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ROOMS_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 341,
    "kind": "function",
    "name": "sendRoomCmd",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rooms/rooms.js~sendRoomCmd",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{sendRoomCmd}",
    "description": "",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "commandType",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "function",
    "name": "addRoom",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/rooms/rooms.js~addRoom",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{addRoom}",
    "description": "Add room to given hub\ndo not usr store.dispatch(roomsState.actions.addRoom(hubId, room)) as rooms are coming back in delta",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "rooms"
    }
  },
  {
    "__docId__": 343,
    "kind": "function",
    "name": "editRoom",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/rooms/rooms.js~editRoom",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{editRoom}",
    "description": "Edit room of given hub\ndo not usr store.dispatch(roomsState.actions.editRoom(hubId, room)) as rooms are coming back in delta",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "rooms"
    }
  },
  {
    "__docId__": 344,
    "kind": "function",
    "name": "removeRoom",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/rooms/rooms.js~removeRoom",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{removeRoom}",
    "description": "Remove given room of given hub",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "function",
    "name": "roomsDeltaHandler",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rooms/rooms.js~roomsDeltaHandler",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{roomsDeltaHandler}",
    "description": "Rooms handler for poll delta results",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rooms",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "src/schemas/schemas.js",
    "content": "// import { normalize, denormalize, schema } from 'normalizr';\nimport { normalize, schema } from 'normalizr';\n\n// See https://github.com/paularmstrong/normalizr/blob/master/docs/api.md\n//\nexport const planEntity = new schema.Entity('plans', {}, { idAttribute: 'uid' });\nexport const plansEntity = new schema.Array(planEntity);\n\nexport const documentEntity = new schema.Entity('documents', {}, { idAttribute: 'uid' });\nexport const documentsEntity = new schema.Array(documentEntity);\n\n\nconst planSchema = new schema.Entity('plans');\nconst documentSchema = new schema.Entity('documents');\nconst planList = new schema.Array(planSchema);\nplanSchema.define({\n  document: documentSchema,\n});\n\nexport const getDocumentsFromPlan = (plans) => normalize(plans, {\n  plans: planList,\n});\n\n\n/*\n\n// to normalize JSON tree to data\nconst locationTree = new schema.Entity('locations');\nlocationTree.define({\n  child: [locationTree]\n})\nconst locationSchema = [locationTree];\n\nexport const getLocationsFromDocument = (document) => {\n  return {...normalize(document, locationSchema).entities.locations}\n}\n\n\n// to denormalize data to JSON tree\nconst locationDocument = new schema.Entity('locations');\nlocationDocument.define({\n  child: [locationDocument]\n})\nconst documentSchema = {locations: [locationDocument]};\n\nexport const getDocumentFromLocations = (locations) => {\n  const denormalized = denormalize({ locations: ['root'] }, documentSchema, {locations: locations});\n  return {root: denormalized.locations[0]}\n}\n*/\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/schemas/schemas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "variable",
    "name": "planEntity",
    "memberof": "src/schemas/schemas.js",
    "static": true,
    "longname": "src/schemas/schemas.js~planEntity",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/schemas/schemas.js",
    "importStyle": "{planEntity}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "variable",
    "name": "plansEntity",
    "memberof": "src/schemas/schemas.js",
    "static": true,
    "longname": "src/schemas/schemas.js~plansEntity",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/schemas/schemas.js",
    "importStyle": "{plansEntity}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "variable",
    "name": "documentEntity",
    "memberof": "src/schemas/schemas.js",
    "static": true,
    "longname": "src/schemas/schemas.js~documentEntity",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/schemas/schemas.js",
    "importStyle": "{documentEntity}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "variable",
    "name": "documentsEntity",
    "memberof": "src/schemas/schemas.js",
    "static": true,
    "longname": "src/schemas/schemas.js~documentsEntity",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/schemas/schemas.js",
    "importStyle": "{documentsEntity}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "variable",
    "name": "planSchema",
    "memberof": "src/schemas/schemas.js",
    "static": true,
    "longname": "src/schemas/schemas.js~planSchema",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/schemas/schemas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 352,
    "kind": "variable",
    "name": "documentSchema",
    "memberof": "src/schemas/schemas.js",
    "static": true,
    "longname": "src/schemas/schemas.js~documentSchema",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/schemas/schemas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 353,
    "kind": "variable",
    "name": "planList",
    "memberof": "src/schemas/schemas.js",
    "static": true,
    "longname": "src/schemas/schemas.js~planList",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/schemas/schemas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 354,
    "kind": "function",
    "name": "getDocumentsFromPlan",
    "memberof": "src/schemas/schemas.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schemas/schemas.js~getDocumentsFromPlan",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/schemas/schemas.js",
    "importStyle": "{getDocumentsFromPlan}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "plans",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 355,
    "kind": "file",
    "name": "src/store.js",
    "content": "import { configureStore } from '@reduxjs/toolkit';\nimport get from 'get-value';\nimport rootReducer from './reducers';\n\n\nconsole.log('Store rootReducer: ', rootReducer);\n/**\n * store as a redux state store\n * @type {Object}\n */\nexport const store = configureStore({\n  reducer: rootReducer,\n  // middleware: [...getDefaultMiddleware(), logger]\n  // default true like: devTools: process.env.NODE_ENV !== 'production'\n  // preloadedState\n  // enhancers: [reduxBatch]\n});\nconsole.log('Store Initial State: ', store.getState());\n\nfunction watchState (getState, objectPath) {\n  let currentValue = get(getState(), objectPath);\n  return function w (fn) {\n    return () => {\n      const newValue = get(getState(), objectPath);\n      if (currentValue !== newValue) {\n        const oldValue = currentValue;\n        currentValue = newValue;\n        fn(newValue, oldValue);\n      }\n    };\n  };\n}\n\n/**\n * Helper to subscribe to store changes\n * @param  {string} path - attribute path to watch changes, e.g. 'user.state'\n * @param  {function} changed - function to handle changes\n * @param  {Object} optionalStore - optional store for unit tests etc.\n */\nexport function watchChanges(path, changed, optionalStore) {\n  const selectedStore = optionalStore || store;\n  const watchFn = watchState(selectedStore.getState, path);\n  selectedStore.subscribe(watchFn(changed));\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/store.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 356,
    "kind": "variable",
    "name": "store",
    "memberof": "src/store.js",
    "static": true,
    "longname": "src/store.js~store",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/store.js",
    "importStyle": "{store}",
    "description": "store as a redux state store",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 357,
    "kind": "function",
    "name": "watchState",
    "memberof": "src/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/store.js~watchState",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/store.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "getState",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectPath",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 358,
    "kind": "function",
    "name": "watchChanges",
    "memberof": "src/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/store.js~watchChanges",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/store.js",
    "importStyle": "{watchChanges}",
    "description": "Helper to subscribe to store changes",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "attribute path to watch changes, e.g. 'user.state'"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "changed",
        "description": "function to handle changes"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "optionalStore",
        "description": "optional store for unit tests etc."
      }
    ],
    "return": null
  },
  {
    "__docId__": 359,
    "kind": "file",
    "name": "src/user/constants.js",
    "content": "// \n\n\n/**\n  * Enumeration of language, that could be\n  * NONE, EN_UK or FI_FI\n  * @readonly\n  * @enum {string}\n  */\nexport const LANGUAGES = Object.freeze({\n  NONE: 'none',\n  EN_EN: 'en',\n  EN_UK: 'en-UK',\n  FI_FI: 'fi-FI',\n  FI: 'fi',\n  EN: 'en',\n});\n\n\n/**\n  * Enumeration of user state, that could be\n  * WAITING_LANGUAGE, LANGUAGE_SET, WAITING_LOGIN, LOGIN_DONE, WAITING_EULA, EULA_ACCEPTED, AUTHENTICATED or LOGGED_OUT\n  * @readonly\n  * @enum {string}\n  */\nexport const USER_STATES = Object.freeze({\n  WAITING_LANGUAGE: 'wait language',\n  LANGUAGE_SET: 'language set',\n  WAITING_LOGIN: 'wait login',\n  LOGIN_DONE: 'login done',\n  WAITING_EULA: 'wait eula',\n  EULA_ACCEPTED: 'eula accepted',\n  AUTHENTICATED: 'logged in',\n  KEYED: 'key entered',\n  LOGGED_OUT: 'logged out',\n});\n\n\n/**\n  * Enumeration of ROLES, that could be\n  * ADMIN, USER, GUEST or ANONYMOUS\n  * @readonly\n  * @enum {string}\n  */\nexport const ROLES = Object.freeze({\n  ADMIN: 32,\n  USER: 8,\n  GUEST: 2,\n  ANONYMOUS: 1,\n});\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/user/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 360,
    "kind": "variable",
    "name": "LANGUAGES",
    "memberof": "src/user/constants.js",
    "static": true,
    "longname": "src/user/constants.js~LANGUAGES",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/constants.js",
    "importStyle": "{LANGUAGES}",
    "description": "Enumeration of language, that could be\nNONE, EN_UK or FI_FI",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "variable",
    "name": "USER_STATES",
    "memberof": "src/user/constants.js",
    "static": true,
    "longname": "src/user/constants.js~USER_STATES",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/constants.js",
    "importStyle": "{USER_STATES}",
    "description": "Enumeration of user state, that could be\nWAITING_LANGUAGE, LANGUAGE_SET, WAITING_LOGIN, LOGIN_DONE, WAITING_EULA, EULA_ACCEPTED, AUTHENTICATED or LOGGED_OUT",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "variable",
    "name": "ROLES",
    "memberof": "src/user/constants.js",
    "static": true,
    "longname": "src/user/constants.js~ROLES",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/constants.js",
    "importStyle": "{ROLES}",
    "description": "Enumeration of ROLES, that could be\nADMIN, USER, GUEST or ANONYMOUS",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "file",
    "name": "src/user/user.js",
    "content": "// \nimport isString from 'lodash/isString';\n\n\nimport { send, COMMANDS } from '../connection/send';\nimport { store } from '../store';\nimport { userState } from '../reducers/user';\n\nimport { USER_STATES, LANGUAGES } from './constants';\n\n\n/*\n * Helper to get user\n * @return {Object} user\n */\nfunction storedUser() {\n  return userState.selectors.getUser(store.getState());\n}\n\n\n/**\n * User action to change current language\n * @param {LANGUAGES_TYPE} newLanguage - language to be changed to\n * @return {Boolean} true if language was set\n */\nexport function changeLanguage(newLanguage) {\n  let retVel = false;\n  if (Object.values(LANGUAGES).indexOf(newLanguage) > -1) {\n    store.dispatch(userState.actions.setLanguage(newLanguage));\n    retVel = true;\n    if (storedUser().state === USER_STATES.WAITING_LANGUAGE) {\n      store.dispatch(userState.actions.changeState(USER_STATES.LANGUAGE_SET));\n    }\n  }\n  return retVel;\n}\n\n/**\n * User action to accept EULA\n * @return {Boolean} true if EULA was accepted\n */\nexport function acceptEula() {\n  store.dispatch(userState.actions.setEula(true));\n  if (storedUser().state === USER_STATES.WAITING_EULA) {\n    store.dispatch(userState.actions.changeState(USER_STATES.EULA_ACCEPTED));\n  }\n  return true;\n}\n\n/**\n * User action to log in\n * @param {string} email - email address\n * @param {password} password  - fixed password\n * @return { Promise}\n */\nexport function doPwLogin(email, password) {\n  return new Promise((resolve, reject) => {\n    send({ command: COMMANDS.USER_LOGIN, data: { email, password } })\n      .then((response) => {\n        if (response && isString(response)) {\n          store.dispatch(userState.actions.setAuthKey(response));\n          if (storedUser().state === USER_STATES.WAITING_LOGIN) {\n            store.dispatch(userState.actions.changeState(USER_STATES.LOGIN_DONE));\n          }\n        }\n        resolve(response);\n      })\n      .catch((error) => {\n        console.debug('doPwLogin error', error);\n        reject(new Error('Login failure'));\n      });\n  });\n}\n\n/**\n * User action to set user token\n * @param {string} userToken - Cozify user/cloud token\n * @return {Object} user\n */\nexport function setAuthenticated(userToken) {\n  store.dispatch(userState.actions.setAuthenticated(userToken));\n  return storedUser();\n}\n\n/**\n * Get state of user state-machine\n * @return {USER_STATE_TYPE}\n */\nexport function getUserState() {\n  return storedUser().state;\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/user/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "function",
    "name": "storedUser",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~storedUser",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "changeLanguage",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~changeLanguage",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{changeLanguage}",
    "description": "User action to change current language",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "LANGUAGES_TYPE"
        ],
        "spread": false,
        "optional": false,
        "name": "newLanguage",
        "description": "language to be changed to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if language was set"
    }
  },
  {
    "__docId__": 366,
    "kind": "function",
    "name": "acceptEula",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~acceptEula",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{acceptEula}",
    "description": "User action to accept EULA",
    "lineNumber": 42,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if EULA was accepted"
    },
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "doPwLogin",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~doPwLogin",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{doPwLogin}",
    "description": "User action to log in",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "email address"
      },
      {
        "nullable": null,
        "types": [
          "password"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "fixed password"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 368,
    "kind": "function",
    "name": "setAuthenticated",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~setAuthenticated",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{setAuthenticated}",
    "description": "User action to set user token",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "Cozify user/cloud token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "user"
    }
  },
  {
    "__docId__": 369,
    "kind": "function",
    "name": "getUserState",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~getUserState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{getUserState}",
    "description": "Get state of user state-machine",
    "lineNumber": 89,
    "return": {
      "nullable": null,
      "types": [
        "USER_STATE_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "src/utils.js",
    "content": "// \n\n/**\n * Helper to check if run environment is Node\n * @type {Boolean}\n */\nlet isNodeInUse = false;\n\nif (typeof process === 'object') {\n  if (typeof process.versions === 'object') {\n    if (typeof process.versions.node !== 'undefined') {\n      isNodeInUse = true;\n      console.log('Running in node.js');\n    } else {\n      console.log('Running in browser');\n    }\n  }\n}\n\nexport const isNode = isNodeInUse;\n\nlet atobC = (a) => { console.error('Invalid atob for string ', a); return 'invalid atob'; };\n\nif (!isNodeInUse) {\n  atobC = window.atob;\n} else {\n  const nodeAtob = (a) => {\n    const binVal = Buffer.from(a, 'base64').toString('binary');\n    return binVal;\n  };\n  atobC = nodeAtob;\n}\n\n/**\n * Helper method to strip HTML presentation from string\n * @param  {string} html - HTML presentation\n * @return {string}  - text string\n */\nexport function getTextFromNode(givenHTML) {\n  let html = givenHTML;\n  html = html.replace(/<\\/div>/ig, ''); // '\\n');\n  html = html.replace(/<\\/li>/ig, '');\n  html = html.replace(/<li>/ig, '');\n  html = html.replace(/<\\/ul>/ig, '');\n  html = html.replace(/<\\/p>/ig, '');\n  // eslint-disable-next-line\n  html = html.replace(/<br\\s*[\\/]?>/gi, '');\n  html = html.replace(/<[^>]+>/ig, '');\n  html = html.replace(/\\s\\s+/g, ' ');\n  return html.trim();\n}\n\n/**\n * Helper method to get HTML presentation from unicode decoded base64 string\n * @param  {string} encoded - string to be decoded\n * @return {string}  - decoded string\n */\nexport function b64DecodeUnicode(encoded) {\n  try {\n    // eslint-disable-next-line\n    return decodeURIComponent(Array.prototype.map.call(atobC(encoded), function(c) {\n      // eslint-disable-next-line\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).name(-2);\n    }).join(''));\n  } catch (error) {\n    console.error('b64DecodeUnicode: trying atob failed');\n    return 'b64DecodeUnicode error';\n  }\n}\n\n\n/**\n * Helper method to Base64 decode\n * @param  {string} encoded - string to be decoded\n * @return {string}  - decoded string\n */\nexport function urlBase64Decode(encoded) {\n  const str = encoded.replace(/-/g, '+').replace(/_/g, '/');\n  let output = str;\n  switch (output.length % 4) {\n    case 0:\n    case 2:\n      output += '==';\n      break;\n    case 3:\n      output += '=';\n      break;\n    default:\n      throw new Error('Illegal base64url string!');\n  }\n  let retVal = '';\n\n  let atob = (a) => { console.error('Invalid atob for string ', a); return 'invalid atob'; };\n  if (!isNodeInUse) {\n    atob = window.atob;\n  } else {\n    const nodeAtob = (a) => {\n      const binVal = Buffer.from(a, 'base64').toString('binary');\n      return binVal;\n    };\n    atob = nodeAtob;\n  }\n\n  try {\n    retVal = atob(str);\n  } catch (error) {\n    try {\n      retVal = atob(output);\n    } catch (error2) {\n      console.error('urlBase64Decode: trying atob failed');\n    }\n  }\n  return retVal;\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "variable",
    "name": "isNodeInUse",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~isNodeInUse",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/utils.js",
    "importStyle": null,
    "description": "Helper to check if run environment is Node",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 372,
    "kind": "variable",
    "name": "isNode",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~isNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/utils.js",
    "importStyle": "{isNode}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "function",
    "name": "atobC",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~atobC",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "function",
    "name": "getTextFromNode",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~getTextFromNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/utils.js",
    "importStyle": "{getTextFromNode}",
    "description": "Helper method to strip HTML presentation from string",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "HTML presentation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "text string"
    }
  },
  {
    "__docId__": 375,
    "kind": "function",
    "name": "b64DecodeUnicode",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~b64DecodeUnicode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/utils.js",
    "importStyle": "{b64DecodeUnicode}",
    "description": "Helper method to get HTML presentation from unicode decoded base64 string",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encoded",
        "description": "string to be decoded"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "decoded string"
    }
  },
  {
    "__docId__": 376,
    "kind": "function",
    "name": "urlBase64Decode",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~urlBase64Decode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/utils.js",
    "importStyle": "{urlBase64Decode}",
    "description": "Helper method to Base64 decode",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encoded",
        "description": "string to be decoded"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "decoded string"
    }
  },
  {
    "kind": "index",
    "content": "# cozify-sdk\n\n> JavaScript SDK for Cozify REST API\n\n\n### Usage - install using npm\n```\nnpm install cozify-sdk\n```\n\n#### Browsers (should use iife-version)\n```\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<script type=\"text/javascript\" src=\"../dist/sdk-browser.js\"></script>\n<script type=\"text/javascript\">\n      let LANGUAGES = CozifySDK.LANGUAGES;\n      let USER_STATES = CozifySDK.USER_STATES;\n      console.info(`Initial user state ${CozifySDK.getUserState()}`);\n      CozifySDK.changeLanguage(LANGUAGES.FI_FI);\n      ... more in /browser-example\n\n```\n\n#### React-projects (should use es-version)\n```\nimport { LANGUAGES, USER_STATES, getUserState } from 'cozify-sdk'\nconsole.info(`Initial user state ${getUserState()}`);\nCozifySDK.changeLanguage(LANGUAGES.FI_FI);\n\n... more in /example\n\n```\n\n#### Node-projects (should use cjs-version)\n```\nconst CozifySDK = require('../dist/sdk-node.js');\nlet LANGUAGES = CozifySDK.LANGUAGES;\nlet USER_STATES = CozifySDK.USER_STATES;\nconsole.info(`Initial user state ${CozifySDK.getUserState()}`);\nCozifySDK.changeLanguage(LANGUAGES.FI_FI);\n\n... more in /node-example\n\n```\n\n## License\n\nMIT © [cozify/JS-SDK]\n",
    "longname": "/Users/vesa/code/JS-SDK/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"cozify-sdk\",\n  \"version\": \"1.0.30\",\n  \"description\": \"JavaScript SDK for Cozify REST API\",\n  \"author\": \"tech-admin\",\n  \"license\": \"MIT\",\n  \"repository\": \"cozify/JS-SDK\",\n  \"node\": \"dist/sdk.node.js\",\n  \"browser\": \"dist/sdk.browser.js\",\n  \"module\": \"dist/sdk.es.js\",\n  \"main\": \"dist/sdk.node.js\",\n  \"jsnext:main\": \"dist/sdk.es.js\",\n  \"engines\": {\n    \"node\": \">=8\",\n    \"npm\": \">=5\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"start\": \"rollup -c -w\",\n    \"test\": \"jest src\",\n    \"test:alarms\": \"jest src/reducers/alarms.test.js\",\n    \"test:connections\": \"jest src/reducers/connections.test.js\",\n    \"test:devices\": \"jest src/reducers/devices.test.js\",\n    \"test:hubs\": \"jest src/reducers/hubs.test.js\",\n    \"test:pairings\": \"jest src/reducers/pairings.test.js\",\n    \"test:idea\": \"jest src/reducers/idea.test.js\",\n    \"test:plans\": \"jest src/reducers/plans.test.js\",\n    \"test:rooms\": \"jest src/reducers/rooms.test.js\",\n    \"test:user\": \"jest src/reducers/user.test.js\",\n    \"test:watch\": \"jest src --watch --notify\",\n    \"cover\": \"jest src --coverage\",\n    \"flow\": \"flow\",\n    \"flow:check\": \"flow check ./src/\",\n    \"flow:status\": \"flow status\",\n    \"flow:coverage\": \"flow-coverage-report --config .flowcoverage.json\",\n    \"flow:deps\": \"flow-typed install\",\n    \"docs\": \"./node_modules/.bin/flow-remove-types src/ -d docs/src/ -p | ./node_modules/.bin/esdoc | rm -rf docs/src/\",\n    \"lint\": \"eslint src\",\n    \"lint:fix\": \"eslint src --fix\",\n    \"deploy\": \"gh-pages -d example/build\",\n    \"prepare\": \"npm run build\",\n    \"predeploy\": \"cd example && npm install && npm run build\",\n    \"precommit\": \"npm run flow && npm run lint && npm run test\",\n    \"prepublish\": \"npm run flow && npm run test && npm run docs && npm run build\",\n    \"db\": \"npx json-server --port=3001 --watch db.json\"\n  },\n  \"peerDependencies\": {},\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.6.4\",\n    \"@babel/core\": \"^7.6.4\",\n    \"@babel/node\": \"^7.6.3\",\n    \"@babel/plugin-external-helpers\": \"^7.2.0\",\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.6.2\",\n    \"@babel/plugin-transform-flow-strip-types\": \"^7.6.3\",\n    \"@babel/plugin-transform-runtime\": \"^7.6.2\",\n    \"@babel/preset-env\": \"^7.6.3\",\n    \"@babel/preset-flow\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.6.3\",\n    \"acorn\": \"^6.4.2\",\n    \"axios\": \"^0.21.1\",\n    \"babel-eslint\": \"^10.0.3\",\n    \"babel-plugin-add-module-exports\": \"^1.0.2\",\n    \"babel-plugin-lodash\": \"^3.3.4\",\n    \"deep-freeze\": \"0.0.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-flow-type-plugin\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^6.6.0\",\n    \"eslint-config-airbnb-base\": \"^14.0.0\",\n    \"eslint-config-standard\": \"^12.0.0\",\n    \"eslint-plugin-flowtype\": \"^3.13.0\",\n    \"eslint-plugin-import\": \"^2.18.2\",\n    \"eslint-plugin-jest\": \"^22.21.0\",\n    \"eslint-plugin-json\": \"^1.4.0\",\n    \"eslint-plugin-node\": \"^8.0.1\",\n    \"eslint-plugin-promise\": \"^4.2.1\",\n    \"eslint-plugin-react\": \"^7.16.0\",\n    \"eslint-plugin-standard\": \"^4.0.1\",\n    \"flow-bin\": \"^0.95.1\",\n    \"flow-typed\": \"^2.6.2\",\n    \"jest\": \"^27.0.6\",\n    \"rollup\": \"^1.26.0\",\n    \"rollup-all\": \"^1.6.16\",\n    \"rollup-jest\": \"0.0.2\",\n    \"rollup-plugin-babel\": \"^4.3.3\",\n    \"rollup-plugin-commonjs\": \"^9.3.4\",\n    \"rollup-plugin-cpy\": \"^1.1.0\",\n    \"rollup-plugin-flow\": \"^1.1.1\",\n    \"rollup-plugin-flow-entry\": \"^0.3.3\",\n    \"rollup-plugin-json\": \"^4.0.0\",\n    \"rollup-plugin-node-builtins\": \"^2.1.2\",\n    \"rollup-plugin-node-resolve\": \"^4.2.4\",\n    \"rollup-plugin-npm\": \"^2.0.0\",\n    \"rollup-plugin-replace\": \"^2.2.0\",\n    \"rollup-plugin-terser\": \"^5.1.2\",\n    \"rollup-plugin-uglify\": \"^6.0.3\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"dependencies\": {\n    \"@apollo/client\": \"^3.0.0-beta.43\",\n    \"@apollo/link-ws\": \"^2.0.0-beta.3\",\n    \"@reduxjs/toolkit\": \"^1.6.0\",\n    \"axios-retry\": \"^3.1.2\",\n    \"core-js\": \"^3.3.6\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"get-value\": \"^3.0.1\",\n    \"graphql\": \"^14.6.0\",\n    \"graphql-normalizr\": \"^2.10.1\",\n    \"graphql-subscriptions-client\": \"^0.12.0\",\n    \"is-retry-allowed\": \"^1.2.0\",\n    \"lodash\": \"^4.17.21\",\n    \"normalizr\": \"^3.6.0\",\n    \"redux\": \"^4.0.5\",\n    \"redux-devtools-extension\": \"^2.13.8\",\n    \"subscriptions-transport-ws\": \"^0.9.16\",\n    \"uuid\": \"^7.0.3\"\n  }\n}\n",
    "longname": "/Users/vesa/code/JS-SDK/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]
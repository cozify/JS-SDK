[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/connection/constants.js",
    "content": "// \nimport { isNode } from '../utils';\n\n/*\n* Cloud servers SSL cretification fingerprints to be checked if possible\n* Fingerprint could be found by opening the server URL like https://testapi.cozify.fi/ui/0.2/hub/lan_ip in Chrome.\n* Then click the green certificate in front of the URL, click 'Connection', 'Certificate details', expand the details\n* and scroll down to the SHA1 fingerprint.\n* testapi 91 30 CF 20 17 F7 D7 EC F7 BA 43 30 8E 19 83 B4 CF DE 5A CC\n* cloud & cloud2 26 B0 20 FA AB E8 A3 81 63 37 C6 B7 EF 94 4D 40 3D 1B 85 10\n*/\nexport const CLOUD_FINGERPRINTS_SHA1 = [\n  '91 30 CF 20 17 F7 D7 EC F7 BA 43 30 8E 19 83 B4 CF DE 5A CC',\n  '26 B0 20 FA AB E8 A3 81 63 37 C6 B7 EF 94 4D 40 3D 1B 85 10',\n];\n/* Cloud HTTPS host name */\nexport const CLOUD_HOST = 'https://testapi.cozify.fi';\n/* Cloud API VERSION */\nexport const CLOUD_API_VERSION = 'ui/0.2/';\n/* Cloud URL */\nexport const CLOUD_URL = `${CLOUD_HOST}/${CLOUD_API_VERSION}`;\n\nexport const MAX_API_VERSION = '1.12';\n/**\n *  Enumeration of supported API commands, that could be\n *  USER_LOGIN, HUB_KEYS, REFRESH_AUTHKEY, CLOUD_IP, CLOUD_META, POLL, CMD_DEVICE\n *  @typedef {Object} COMMANDS_TYPE\n *  @readonly\n *\n  */\nexport const COMMANDS = Object.freeze({\n  USER_LOGIN: {\n    method: 'POST', url: `${CLOUD_URL}user/login`, params: ['password', 'email'], config: { responseType: isNode ? 'blob' : 'stream', timeout: 15000 },\n  },\n  HUB_KEYS: { method: 'GET', url: `${CLOUD_URL}user/hubkeys`, timeout: 15000 },\n  REFRESH_AUTHKEY: { method: 'GET', url: `${CLOUD_URL}user/refreshsession` },\n  CLOUD_IP: { method: 'GET', url: `${CLOUD_URL}hub/lan_ip` },\n  CLOUD_META: { method: 'GET', url: `${CLOUD_URL}hub/remote/hub` },\n  POLL: { method: 'GET', url: `${CLOUD_URL}hub/remote/cc/$API_VER/hub/poll`, urlParams: ['ts'] },\n  PAIR_START: { method: 'GET', url: `${CLOUD_URL}hub/remote/cc/$API_VER/hub/scan`, urlParams: ['ts'] },\n  PAIR_IGNORE: {\n    method: 'PUT', url: `${CLOUD_URL}hub/remote/cc/$API_VER/hub/scan`, type: 'SET_SCAN_RESULT', params: ['id', 'ignored'],\n  },\n  PAIR_STOP: { method: 'GET', url: `${CLOUD_URL}hub/remote/cc/$API_VER/hub/stopscan` },\n  CMD_DEVICE_STATE: {\n    method: 'PUT', url: `${CLOUD_URL}hub/remote/cc/$API_VER/devices/command`, type: 'CMD_DEVICE', params: ['id', 'state'],\n  },\n  CMD_DEVICE_IGNORE: {\n    method: 'PUT', url: `${CLOUD_URL}hub/remote/cc/$API_VER/devices/command`, type: 'CMD_IGNORE_DEVICE', params: ['id'],\n  },\n  CMD_DEVICE_IDENTIFY: {\n    method: 'PUT', url: `${CLOUD_URL}hub/remote/cc/$API_VER/devices/command`, type: 'CMD_IDENTIFY', params: ['id'],\n  },\n  CMD_DEVICE_META: {\n    method: 'PUT', url: `${CLOUD_URL}hub/remote/cc/$API_VER/devices/command`, type: 'CMD_DEVICE_META', params: ['id', 'name', 'room'],\n  },\n  CMD_GET_ROOMS: { method: 'GET', url: `${CLOUD_URL}hub/remote/cc/$API_VER/rooms` },\n  CMD_SET_ROOM: {\n    method: 'PUT', url: `${CLOUD_URL}hub/remote/cc/$API_VER/rooms`, type: 'CMD_ROOM', params: ['id', 'name', 'order'],\n  },\n  CMD_REMOVE_ROOM: { method: 'DELETE', url: `${CLOUD_URL}hub/remote/cc/$API_VER/rooms`, urlParams: ['roomId'] },\n});\n\n\n\n// type dataArray = ?Array<{ [key: string | number]: any }>\n// type dataObject = ?{ [key: string | number]: any }\n\n/**\n * COMMAND_TYPE\n *  @typedef {Object} COMMANDS_TYPE\n *  @property {COMMANDS_TYPE} [command]   - Optional command like USER_LOGIN,\n *  @property {string} [localUrl]         - Optional localUrl for direct hub access\n *  @property {string} [url]              - Optional url\n *  @property {number} [timeout]          - Optional timeout\n *  @property {string} [method]           - Optional method\n *  @property {string} [authKey]          - Optional authKey\n *  @property {string} [hubKey]           - Optional hubKey\n *  @property {Object} [config]           - Optional config that might have 'timeout' or 'responseType' configs to be used over defaults,\n *  @property {Object} [data]             - Optional data to be sent over url or body parameters (depending command)\n *  @property {string} [type]             - Optional type that defaults to 'application/json',\n *  @property {string} [hubId]            - Optional hub Id when messaging to hub\n */\n\n/**\n  * Enumeration of cloud connection state, that could be\n  * UNCONNECTED, UNAUTHENTICATED, UNAUTHORIZED, OBSOLETE_API_VERSION, LATE_PAYMENT or CONNECTED\n  * @readonly\n  * @enum {string}\n  * @typedef {string} CLOUD_CONNECTION_STATE_TYPE\n  */\nexport const CLOUD_CONNECTION_STATES = Object.freeze({\n  UNCONNECTED: 'no connection',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  OBSOLETE_API_VERSION: 'obsolete api version',\n  LATE_PAYMENT: 'late payment',\n  CONNECTED: 'connected',\n});\n\n\n/**\n  * Enumeration of HUB connection state, that could be\n  * UNCONNECTED, UNAUTHENTICATED, UNAUTHORIZED, OBSOLETE_API_VERSION, REMOTE or LOCAL\n  * @readonly\n  * @enum {string}\n  * @typedef {string} HUB_CONNECTION_STATE_TYPE\n  */\nexport const HUB_CONNECTION_STATES = Object.freeze({\n  UNCONNECTED: 'no connection',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  OBSOLETE_API_VERSION: 'obsolete api version',\n  REMOTE: 'remote',\n  LOCAL: 'local',\n});\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "CLOUD_FINGERPRINTS_SHA1",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_FINGERPRINTS_SHA1",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{CLOUD_FINGERPRINTS_SHA1}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "CLOUD_HOST",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_HOST",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{CLOUD_HOST}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "CLOUD_API_VERSION",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_API_VERSION",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{CLOUD_API_VERSION}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "CLOUD_URL",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_URL",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{CLOUD_URL}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "MAX_API_VERSION",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~MAX_API_VERSION",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/constants.js",
    "importStyle": "{MAX_API_VERSION}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "typedef",
    "name": "COMMANDS_TYPE",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~COMMANDS_TYPE",
    "access": "public",
    "description": " Enumeration of supported API commands, that could be\n USER_LOGIN, HUB_KEYS, REFRESH_AUTHKEY, CLOUD_IP, CLOUD_META, POLL, CMD_DEVICE",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "COMMANDS_TYPE"
    }
  },
  {
    "__docId__": 55,
    "kind": "typedef",
    "name": "COMMANDS_TYPE",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~COMMANDS_TYPE",
    "access": "public",
    "description": "COMMAND_TYPE",
    "properties": [
      {
        "nullable": null,
        "types": [
          "COMMANDS_TYPE"
        ],
        "spread": false,
        "optional": true,
        "name": "command",
        "description": "Optional command like USER_LOGIN,"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "localUrl",
        "description": "Optional localUrl for direct hub access"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "url",
        "description": "Optional url"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "timeout",
        "description": "Optional timeout"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "method",
        "description": "Optional method"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "authKey",
        "description": "Optional authKey"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "hubKey",
        "description": "Optional hubKey"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "config",
        "description": "Optional config that might have 'timeout' or 'responseType' configs to be used over defaults,"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "Optional data to be sent over url or body parameters (depending command)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "Optional type that defaults to 'application/json',"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "hubId",
        "description": "Optional hub Id when messaging to hub"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "COMMANDS_TYPE"
    }
  },
  {
    "__docId__": 56,
    "kind": "typedef",
    "name": "CLOUD_CONNECTION_STATE_TYPE",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~CLOUD_CONNECTION_STATE_TYPE",
    "access": "public",
    "description": "Enumeration of cloud connection state, that could be\nUNCONNECTED, UNAUTHENTICATED, UNAUTHORIZED, OBSOLETE_API_VERSION, LATE_PAYMENT or CONNECTED",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "CLOUD_CONNECTION_STATE_TYPE"
    }
  },
  {
    "__docId__": 57,
    "kind": "typedef",
    "name": "HUB_CONNECTION_STATE_TYPE",
    "memberof": "src/connection/constants.js",
    "static": true,
    "longname": "src/connection/constants.js~HUB_CONNECTION_STATE_TYPE",
    "access": "public",
    "description": "Enumeration of HUB connection state, that could be\nUNCONNECTED, UNAUTHENTICATED, UNAUTHORIZED, OBSOLETE_API_VERSION, REMOTE or LOCAL",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "HUB_CONNECTION_STATE_TYPE"
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/connection/send-retry.js",
    "content": "// import isRetryAllowed from 'is-retry-allowed';\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\nconst ALL_HTTP_METHODS = IDEMPOTENT_HTTP_METHODS.concat(['post']);\n\n/*\n * @param  {Error}  error\n * @return {boolean}\n\nfunction isNetworkError(error) {\n  return (\n    !error.response\n    && isRetryAllowed(error) // Prevents retrying unsafe errors\n    && !(Boolean(error.code) && error.code === 'ECONNABORTED') // Prevents retrying timed out requests\n  );\n}\n*/\n\n/*\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isRetryableError(error) {\n  /*\n  return (\n    error.code !== 'ECONNABORTED'\n    && (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n  */\n  return (\n    (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n}\n\n/*\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n  return isRetryableError(error) && ALL_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\nconst httpRetries = {};\nconst RETRY_COUNT = 2;\n\nexport function resetRetry(url) {\n  if (httpRetries[url]) {\n    console.warn('resetRetry to 0');\n    httpRetries[url] = 0;\n    delete httpRetries[url];\n  }\n}\n/*\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function retryCondition(error) {\n  // if (error.config.url.indexOf('192.168.1.119') !== -1) debugger;\n  if (error && error.config && error.config.url) {\n    if (httpRetries[error.config.url]) {\n      if (httpRetries[error.config.url] >= RETRY_COUNT) {\n        httpRetries[error.config.url] = 0;\n        console.error('retryCondition count >', RETRY_COUNT);\n        return false;\n      }\n      httpRetries[error.config.url] += httpRetries[error.config.url];\n      console.info('retryCondition count set ', httpRetries[error.config.url]);\n    } else {\n      httpRetries[error.config.url] = 1;\n      console.info('retryCondition count set to 1');\n    }\n  } else {\n    console.error('retryCondition unknown', error);\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  if (isSafeRequestError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1) {\n    console.info('retryCondition condition true', error.config);\n  } else {\n    console.info('retryCondition condition false', error.config);\n    httpRetries[error.config.url] = 0;\n  }\n  const retVal = isSafeRequestError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n  console.info('retryCondition return ', retVal);\n  return retVal;\n}\n\n/*\n * @param  {Error}  error\n * @return {boolean}\nfunction isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n */\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/send-retry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "SAFE_HTTP_METHODS",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~SAFE_HTTP_METHODS",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "IDEMPOTENT_HTTP_METHODS",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~IDEMPOTENT_HTTP_METHODS",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "ALL_HTTP_METHODS",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~ALL_HTTP_METHODS",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "isRetryableError",
    "memberof": "src/connection/send-retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-retry.js~isRetryableError",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "isSafeRequestError",
    "memberof": "src/connection/send-retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-retry.js~isSafeRequestError",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "httpRetries",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~httpRetries",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "RETRY_COUNT",
    "memberof": "src/connection/send-retry.js",
    "static": true,
    "longname": "src/connection/send-retry.js~RETRY_COUNT",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "resetRetry",
    "memberof": "src/connection/send-retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-retry.js~resetRetry",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": "{resetRetry}",
    "description": "",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "retryCondition",
    "memberof": "src/connection/send-retry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-retry.js~retryCondition",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-retry.js",
    "importStyle": "{retryCondition}",
    "description": "",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/connection/send-utilities.js",
    "content": "// \n\nimport {\n  CLOUD_CONNECTION_STATES, HUB_CONNECTION_STATES, CLOUD_FINGERPRINTS_SHA1, CLOUD_HOST,\n} from './constants';\nimport { isNode } from '../utils';\n\n\nconst SSL_CHECK_INTERVALL = 1000 * 60 * 60; // One hour\n\n/*\n * Returns > 0 if v1 > v2 and < 0 if v1 < v2 and 0 if v1 == v2\n */\nfunction compareVersions(v1, v2) {\n  const v1Parts = v1.split('.');\n  const v2Parts = v2.split('.');\n  const minLength = Math.min(v1Parts.length, v2Parts.length);\n  if (minLength > 0) {\n    for (let idx = 0; idx < minLength - 1; idx += 1) {\n      const diff = Number(v1Parts[idx]) - Number(v2Parts[idx]);\n      if (diff !== 0) {\n        return diff;\n      }\n    }\n  }\n  return v1Parts.length - v2Parts.length;\n}\n\n/*\n * Get API version, or given MAX version, from given hubVersion string\n * e.g. 1.12.0.5\n */\nexport function getAPIversion(hubVersion, maxVersion) {\n  let retVal = '0.0';\n  const majorEnd = hubVersion.indexOf('.');\n  let minorEnd = -1;\n  if (majorEnd !== -1) {\n    minorEnd = hubVersion.indexOf('.', majorEnd + 1);\n  }\n  if (minorEnd !== -1) {\n    retVal = hubVersion.substring(0, minorEnd);\n  }\n  if (compareVersions(retVal, maxVersion) > 0) {\n    retVal = maxVersion;\n  }\n  return retVal;\n}\n/*\n * Return cloud connection state based on error\n */\nexport function cloudErrorState(error) {\n  let retVal = CLOUD_CONNECTION_STATES.UNCONNECTED;\n  if (error && error.response && error.response.status === 401) {\n    // 401 Authentication information missing or expired.\n    retVal = CLOUD_CONNECTION_STATES.UNAUTHENTICATED;\n    console.error('send: authentication error ', error);\n  } else if (error && error.response && error.response.status === 403) {\n    // 402 Late payment - > no remote access\n    retVal = CLOUD_CONNECTION_STATES.LATE_PAYMENT;\n    console.error('send: unauhorized error ', error);\n  } else if (error && error.response && error.response.status === 403) {\n    // 403 Unauthorized\n    retVal = CLOUD_CONNECTION_STATES.UNAUTHORIZED;\n    console.error('send: unauhorized error ', error);\n  } else if (error && error.response && error.response.status === 410) {\n    // 410 Version problem\n    retVal = CLOUD_CONNECTION_STATES.OBSOLETE_API_VERSION;\n    console.error('send: version error ', error);\n  }\n\n  return retVal;\n}\n\n\n/*\n * Return hub connection state based on given error\n * @param  {Object} error\n * @return {string} hub's connectionState\n */\nexport function hubErrorState(error) {\n  let retVal = HUB_CONNECTION_STATES.UNCONNECTED;\n  if (error && error.response && error.response.status === 400) {\n    // no connection to offline hub\n    console.log('send: no-connection error ', error);\n  } else if (error && error.response && error.response.status === 401) {\n    // 401 Authentication information missing or expired.\n    retVal = HUB_CONNECTION_STATES.UNAUTHENTICATED;\n    console.error('send: authentication error ', error);\n  } else if (error && error.response && error.response.status === 403) {\n    // 403 Unauthorized\n    retVal = HUB_CONNECTION_STATES.UNAUTHORIZED;\n    console.error('send: unauhorized error ', error);\n  } else if (error && error.response && error.response.status === 410) {\n    // 410 Version problem\n    retVal = HUB_CONNECTION_STATES.OBSOLETE_API_VERSION;\n    console.error('send: version error ', error);\n  }\n\n  return retVal;\n}\n\n\nlet ongoingSSLCertificateCheck = false;\nlet lastSSLCertificateCheckTime = null;\n\n/*\n * Palceholder function for certificate checker\n * @return {Promise}\n */\nexport function testSSLCertificate(remoteConnection) {\n  return new Promise((resolve) => {\n    if (!remoteConnection) {\n      // All requests are now complete\n      resolve(true);\n      return;\n    }\n\n    const now = new Date().getTime();\n    if (!ongoingSSLCertificateCheck && (!lastSSLCertificateCheckTime || (now - lastSSLCertificateCheckTime > SSL_CHECK_INTERVALL))) {\n      ongoingSSLCertificateCheck = true;\n      lastSSLCertificateCheckTime = now;\n\n      // Cordova plugin?\n      if (!isNode && window && window.plugins && window.plugins.sslCertificateChecker) {\n        window.plugins.sslCertificateChecker.check(\n          () => {\n            ongoingSSLCertificateCheck = false;\n            resolve(true);\n          },\n          (errorMsg) => {\n            if (errorMsg === 'CONNECTION_NOT_SECURE') {\n              ongoingSSLCertificateCheck = false;\n              resolve(false);\n            } else {\n              ongoingSSLCertificateCheck = false;\n              lastSSLCertificateCheckTime = undefined;\n              resolve(true);\n            }\n          },\n          CLOUD_HOST,\n          CLOUD_FINGERPRINTS_SHA1,\n        );\n      } else {\n        setTimeout(() => { ongoingSSLCertificateCheck = false; }, SSL_CHECK_INTERVALL);\n        resolve(true);\n      }\n    } else {\n      resolve(true);\n    }\n  });\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/send-utilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "SSL_CHECK_INTERVALL",
    "memberof": "src/connection/send-utilities.js",
    "static": true,
    "longname": "src/connection/send-utilities.js~SSL_CHECK_INTERVALL",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "compareVersions",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~compareVersions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v2",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "getAPIversion",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~getAPIversion",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": "{getAPIversion}",
    "description": "",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubVersion",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "maxVersion",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "cloudErrorState",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~cloudErrorState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": "{cloudErrorState}",
    "description": "",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "hubErrorState",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~hubErrorState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": "{hubErrorState}",
    "description": "",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "ongoingSSLCertificateCheck",
    "memberof": "src/connection/send-utilities.js",
    "static": true,
    "longname": "src/connection/send-utilities.js~ongoingSSLCertificateCheck",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "lastSSLCertificateCheckTime",
    "memberof": "src/connection/send-utilities.js",
    "static": true,
    "longname": "src/connection/send-utilities.js~lastSSLCertificateCheckTime",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "testSSLCertificate",
    "memberof": "src/connection/send-utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send-utilities.js~testSSLCertificate",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send-utilities.js",
    "importStyle": "{testSSLCertificate}",
    "description": "",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "remoteConnection",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/connection/send.js",
    "content": "// \nimport isEmpty from 'lodash/isEmpty';\nimport isArray from 'lodash/isArray';\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\n// import rax from 'retry-axios';\nimport { urlBase64Decode } from '../utils';\nimport {\n  COMMANDS, CLOUD_CONNECTION_STATES, CLOUD_URL, HUB_CONNECTION_STATES, MAX_API_VERSION,\n} from './constants';\nimport {\n  cloudErrorState, hubErrorState, testSSLCertificate, getAPIversion,\n} from './send-utilities';\nimport { setCloudConnectionState, setHubConnectionState } from './state';\nimport { userState } from '../reducers/user';\nimport { LANGUAGES } from '../user/constants';\nimport { hubsState } from '../reducers/hubs';\nimport { store } from '../store';\n\nimport { retryCondition, resetRetry } from './send-retry';\n\n\n\nexport { COMMANDS };\n\nlet refreshingToken = false;\n\n/* eslint no-use-before-define: [\"error\", { \"functions\": false }] */\n/*\n * Refresh Auth key call\n */\nfunction refreshAuthKey(authKey) {\n  if (!refreshingToken) {\n    refreshingToken = true;\n    send({ command: COMMANDS.REFRESH_AUTHKEY, authKey })\n      .then((response) => {\n        setTimeout(() => { refreshingToken = false; }, 1000 * 60 * 10); // 10min\n        if (response.length > 10) {\n          store.dispatch(userState.actions.setAuthKey(response));\n        }\n      })\n      .catch(() => {\n        refreshingToken = false;\n      });\n  }\n}\n\n/*\n * Token refresh\n */\nfunction testAndRefreshToken(key) {\n  let exp = null;\n  let header = {};\n  let payload = {};\n  let diff = null;\n\n  if (key) {\n    const tokenParts = key.split('.');\n    header = JSON.parse(urlBase64Decode(tokenParts[0]));\n    payload = JSON.parse(urlBase64Decode(tokenParts[1]));\n  }\n\n  if ((header && header.exp) || (payload != null && payload.exp)) {\n    exp = header.exp ? header.exp : payload.exp;\n  }\n\n  if (exp) {\n    diff = exp - Math.round(new Date().getTime() / 1000);\n  }\n\n  if (!diff || diff < 0) {\n    // User is unauthenticated\n    setCloudConnectionState(CLOUD_CONNECTION_STATES.UNAUTHENTICATED);\n  } else if (diff && diff < 5 * 24 * 60 * 60) {\n    // refresh if < 5 days to exp date\n    refreshAuthKey(key);\n  }\n}\n\n/**\n * Send multiple requests\n * @param  {Array<Oject>} requests - requests to be send\n * @return {Promise}\n */\nexport function sendAll(requests) {\n  return new Promise((resolve) => {\n    Promise.all(requests)\n      .then(() => {\n        // Use the data from the results like so:\n        // results[0].data\n        // results[1].data\n        resolve();\n      })\n      .catch(() => {\n        // do whatever\n        resolve();\n      });\n  });\n}\n\naxiosRetry(axios, {\n  // retries: 1, DOESN'T WORK, see send_retry.js\n  retryCondition,\n  shouldResetTimeout: true,\n  retryDelay: (retryCount, error) => {\n    // console.error('axiosRetry ', retryCount); DOESN'T WORK , see send_retry.js\n    console.error('axiosRetry ', error);\n    return 5000; // retryCount * 1000;\n  },\n});\n\n/* Flag to indicate SSL failures */\nlet permanentSSLFailure = false;\n\n/**\n * Send method for REST API\n * @param {COMMAND_TYPE} params\n *\n * @return {Promise}\n *\n * @example\n *   send( {command: COMMANDS.USER_LOGIN,  data:{email:email, password:password} })\n *   .then((response) => {...});\n *\n * @example\n *   send( {command: COMMANDS.CMD_DEVICE, authKey: authKey, hubKey: hubKey, data:[{id:deviceId, state:state}] })\n *   .then((response) => {...});\n *\n * @example\n *   send( {url: hubURL + \"/hub\"} )\n *   .then((hubData) => {...});\n *\n */\nexport function send({\n  command, localUrl, url, timeout, method, authKey, hubKey, type, config, data, hubId,\n}) {\n  let sendMethod = method;\n  let sendUrl = url;\n  let sendTimeout = timeout;\n  let sendAuthKey = authKey;\n  let sendHubKey = hubKey;\n  let sendConfig = config;\n  let sendType = type;\n\n  if (sendMethod == null) {\n    sendMethod = 'GET';\n  }\n  if (sendType == null) {\n    sendType = 'application/json;charset=UTF-8';\n  }\n  const body = data;\n  /*\n  if (isArray(data)) {\n    body = [];\n    body.push({});\n  }\n  */\n  // console.log(\"send: command \", command);\n  // Flag to indicate are we using remote (vrs.local) connection\n  let remoteConnection = false;\n\n  // Flag to indicate are we sending hub command meaning using commandAPI (vrs. some cloud/videocloud command like login, log etc)\n  const hubCommand = !isEmpty(hubId);\n  const stateNow = store.getState();\n  const user = userState.selectors.getUser(stateNow);\n\n  // const { storedAuthKey } = user;\n\n  if (typeof command !== 'undefined' && command) {\n    if (command.method) {\n      sendMethod = command.method;\n    }\n    if (isEmpty(sendUrl) && command.url) {\n      // command with Hub API version\n      if (command.url.indexOf('$API_VER') !== -1) {\n        const hubs = hubsState.selectors.getHubs(stateNow);\n        if (!hubs[hubId] || !hubs[hubId].hubKey) {\n          return new Promise((resolve, reject) => {\n            reject(new Error('SDK Error: Send - Hub or hubKey not found error'));\n          });\n        }\n        const hub = hubs[hubId];\n        if (!hub.version || (hub.connectionState === HUB_CONNECTION_STATES.UNCONNECTED && command.url.indexOf('hub/remote/hub') === -1)) {\n          return new Promise((resolve, reject) => {\n            reject(new Error('SDK Error: Send - No Hub connection error'));\n          });\n        }\n        const hubVersion = getAPIversion(hub.version, MAX_API_VERSION);\n        sendUrl = command.url.replace('$API_VER', hubVersion);\n      } else {\n        sendUrl = command.url;\n      }\n    }\n\n    if (sendUrl) {\n      const parts = sendUrl.split('hub/remote');\n      if (parts && parts[1]) {\n        if (localUrl) {\n          sendUrl = localUrl + parts[1];\n          if (sendHubKey) {\n            sendAuthKey = sendHubKey;\n            sendHubKey = null;\n          }\n        }\n      }\n    }\n\n    if (sendUrl && sendUrl.indexOf(CLOUD_URL) > -1) {\n      remoteConnection = true;\n    }\n\n    if (command.type && body) {\n      if (isArray(body)) {\n        if (body[0]) {\n          body[0].type = command.type;\n        }\n      } else if (body) {\n        body.type = command.type;\n      }\n    }\n\n    if (command.params) {\n      if (!command.params.includes('type')) {\n        command.params.push('type');\n      }\n      command.params.forEach((param) => {\n        if (isArray(data)) {\n          if (body && body[0] && data && data[0]) {\n            body[0][param] = data[0][param];\n          }\n        } else if (body && data) {\n          body[param] = data[param];\n        }\n      });\n    }\n\n    if (command.urlParams) {\n      const params = [];\n      command.urlParams.forEach((param) => {\n        if (data && data[param] !== undefined) {\n          params.push(`${encodeURIComponent(param)}=${encodeURIComponent(data[param])}`);\n        }\n      });\n      if (sendUrl && params.length > 0) {\n        sendUrl = `${sendUrl}?${params.join('&')}`;\n      }\n    }\n\n    if (command.timeout) {\n      sendTimeout = command.timeout;\n    }\n\n    if (command.config) {\n      sendConfig = command.config;\n    }\n  }\n\n  const bodyString = JSON.stringify(body);\n\n  const reqConf = {\n    timeout: sendTimeout || 15000,\n    method: sendMethod,\n    // withCredentials: false,\n    headers: {\n      Accept: 'application/json, application/binary, text/plain, */*',\n      'Content-Type': sendType,\n      Authorization: sendAuthKey || null,\n      'X-Hub-Key': sendHubKey || null,\n      'Accept-Language': (user.language && user.language !== LANGUAGES.NONE) ? user.language : null,\n    },\n    crossDomain: true,\n    responseType: 'application/json',\n    url: sendUrl,\n    data: isEmpty(bodyString) ? null : bodyString,\n  };\n\n  Object.assign(reqConf, sendConfig);\n\n  return new Promise((resolve, reject) => {\n    if (command || sendUrl) {\n      axios.interceptors.response.use((response) => {\n        if (response.headers['content-type'].includes('application/json') || response.headers['content-type'].includes('application/binary')) {\n          resetRetry(sendUrl);\n          return response;\n        }\n        console.error('send: unknown response type');\n        return response; // Promise.reject(response);\n      }, (error) => Promise.reject(error));\n      /*\n      axios.interceptors.request.use((reqConfig) => {\n        //if (reqConfig.url.indexOf('192.168.1.119') !== -1) debugger;\n        const rConfig = reqConfig;\n        const retryState = rConfig['axios-retry'] || {};\n        if (retryState.retryCount > 0) {\n          rConfig.headers['x-retry-count'] = retryState.retryCount;\n        }\n        return rConfig;\n      });\n      */\n      // retries if it is a network error or a 5xx error on an idempotent request (GET, HEAD, OPTIONS, PUT or DELETE).\n      // axiosRetry(axios, {\n      //  retries: 3, shouldResetTimeout: false, retryDelay: axiosRetry.exponentialDelay, retryCondition,\n      // });\n      //\n\n      testSSLCertificate(remoteConnection)\n        .then((status) => {\n        // Cancel request if SSL Certificate status is invalid\n          if (!status || permanentSSLFailure) {\n            permanentSSLFailure = true;\n            reject(new Error('SDK Error: SSL failure.'));\n          } else {\n          // SSL is ok,\n            // check if auth Key needs to be refreshed\n            if (sendAuthKey) {\n              testAndRefreshToken(sendAuthKey);\n            }\n\n            // Send command\n            // See options: https://github.com/axios/axios#request-config\n            axios(reqConf)\n              .then((response) => {\n                // console.error(\"send: response \", response);\n                if (remoteConnection) {\n                  setCloudConnectionState(CLOUD_CONNECTION_STATES.CONNECTED);\n                } else if (hubId) {\n                  setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.LOCAL });\n                }\n                resolve(response.data);\n              })\n              .catch((error) => {\n                let errorMsg = 'SDK Send error:';\n                if (error && error.response) {\n                  // The request was made and the server responded with a status code\n                  // that falls out of the range of 2xx\n\n                  if (error.response.data && error.response.data.message) {\n                    errorMsg = errorMsg.concat(error.response.data.message);\n                  }\n                  if (error.response.status) {\n                    errorMsg = errorMsg.concat(`Status: ${error.response.status}`);\n                  }\n\n                  if (remoteConnection) {\n                    if (command !== COMMANDS.CLOUD_META) {\n                      setCloudConnectionState(cloudErrorState(error));\n                    }\n                    if (hubCommand && hubId) {\n                      setHubConnectionState({ hubId, state: hubErrorState(error) });\n                    }\n                  } else {\n                    // Local connection\n                    // 401 means also cloud auth refresh is required\n                    if (error && error.response && error.response.status === 401) {\n                      setCloudConnectionState(cloudErrorState(error));\n                    }\n                    if (hubCommand && hubId) {\n                      setHubConnectionState({ hubId, state: hubErrorState(error) });\n                    }\n                  }\n                } else if (error.request) {\n                  // The request was made but no response was received\n                  // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n                  // http.ClientRequest in node.js\n                  if (remoteConnection) {\n                    setCloudConnectionState(CLOUD_CONNECTION_STATES.UNCONNECTED);\n                    if (hubCommand && hubId) {\n                      setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.UNCONNECTED });\n                    }\n                    errorMsg = errorMsg.concat(`Cloud unconnected in remote. Status ${error.request.status}`);\n                  } else if (hubCommand && hubId) {\n                    // Local connection\n                    setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.UNCONNECTED });\n                    errorMsg = errorMsg.concat(`Hub unconnected. Status ${error.request.status}`);\n                  }\n                } else if (remoteConnection) {\n                  // Something happened in setting up the request that triggered an Error\n                  setCloudConnectionState(CLOUD_CONNECTION_STATES.UNCONNECTED);\n                  errorMsg = errorMsg.concat('Cloud unconnected in remote');\n                  if (hubCommand && hubId) {\n                    setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.UNCONNECTED });\n                    errorMsg = errorMsg.concat('Hub unconnected in remote');\n                  }\n                } else if (hubCommand && hubId) {\n                  // Local connection\n                  setHubConnectionState({ hubId, state: HUB_CONNECTION_STATES.UNCONNECTED });\n                  errorMsg = errorMsg.concat('Hub unconnected');\n                }\n                console.error(errorMsg);\n                reject(error);\n              });\n          }\n        });\n    } else {\n      reject(new Error('SDK Error: Command or Command API URL not found.'));\n    }\n  });\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/send.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "refreshingToken",
    "memberof": "src/connection/send.js",
    "static": true,
    "longname": "src/connection/send.js~refreshingToken",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "refreshAuthKey",
    "memberof": "src/connection/send.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send.js~refreshAuthKey",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "authKey",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "testAndRefreshToken",
    "memberof": "src/connection/send.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send.js~testAndRefreshToken",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "sendAll",
    "memberof": "src/connection/send.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send.js~sendAll",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": "{sendAll}",
    "description": "Send multiple requests",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Oject>"
        ],
        "spread": false,
        "optional": false,
        "name": "requests",
        "description": "requests to be send"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "permanentSSLFailure",
    "memberof": "src/connection/send.js",
    "static": true,
    "longname": "src/connection/send.js~permanentSSLFailure",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "send",
    "memberof": "src/connection/send.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/send.js~send",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/send.js",
    "importStyle": "{send}",
    "description": "Send method for REST API",
    "examples": [
      "  send( {command: COMMANDS.USER_LOGIN,  data:{email:email, password:password} })\n  .then((response) => {...});",
      "  send( {command: COMMANDS.CMD_DEVICE, authKey: authKey, hubKey: hubKey, data:[{id:deviceId, state:state}] })\n  .then((response) => {...});",
      "  send( {url: hubURL + \"/hub\"} )\n  .then((hubData) => {...});"
    ],
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "COMMAND_TYPE"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/connection/state.js",
    "content": "// \n\nimport { connectionsState } from '../reducers/connections';\nimport { hubsState } from '../reducers/hubs';\nimport { store } from '../store';\nimport { HUB_CONNECTION_STATES } from './constants';\n\n\n/**\n * Change Cloud connection state\n * @param {HUB_CONNECTION_STATE_TYPE} state\n */\nexport function setCloudConnectionState(state) {\n  store.dispatch(connectionsState.actions.setCloudConnectionState(state));\n}\n\n/**\n * Get Cloud connection state\n * @return {CLOUD_CONNECTION_STATE_TYPE}\n */\nexport function getCloudConnectionState() {\n  const stateNow = store.getState();\n  return connectionsState.selectors.getConnections(stateNow).cloudState;\n}\n\n/**\n * Change hub connection state\n * @param {{hubId: string, state: HUB_CONNECTION_STATE_TYPE}} hubAndState - hubId and new state\n */\nexport function setHubConnectionState(paramHubAndState) {\n  const stateNow = store.getState();\n  const storedHubs = hubsState.selectors.getHubs(stateNow);\n  const hubAndState = paramHubAndState;\n  /* If hub is unconnected, lets try remote */\n  if (hubAndState.state === HUB_CONNECTION_STATES.UNCONNECTED && storedHubs[hubAndState.hubId]) {\n    if (storedHubs[hubAndState.hubId].connectionState === HUB_CONNECTION_STATES.REMOTE) {\n      hubAndState.state = HUB_CONNECTION_STATES.LOCAL;\n    }\n  }\n  store.dispatch(hubsState.actions.setHubConnectionState(hubAndState));\n}\n/**\n * Get hub connection state by hub id\n * @param  {string} hubId\n * @return {HUB_CONNECTION_STATE_TYPE}\n */\nexport function getHubConnectionState(hubId) {\n  const stateNow = store.getState();\n  if (hubsState.selectors.getHubs(stateNow)[hubId]) {\n    return hubsState.selectors.getHubs(stateNow)[hubId].connectionState;\n  }\n  return HUB_CONNECTION_STATES.UNCONNECTED;\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/connection/state.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "setCloudConnectionState",
    "memberof": "src/connection/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/state.js~setCloudConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/state.js",
    "importStyle": "{setCloudConnectionState}",
    "description": "Change Cloud connection state",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "HUB_CONNECTION_STATE_TYPE"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "getCloudConnectionState",
    "memberof": "src/connection/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/state.js~getCloudConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/state.js",
    "importStyle": "{getCloudConnectionState}",
    "description": "Get Cloud connection state",
    "lineNumber": 21,
    "return": {
      "nullable": null,
      "types": [
        "CLOUD_CONNECTION_STATE_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "setHubConnectionState",
    "memberof": "src/connection/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/state.js~setHubConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/state.js",
    "importStyle": "{setHubConnectionState}",
    "description": "Change hub connection state",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "{hubId: string, state: HUB_CONNECTION_STATE_TYPE}"
        ],
        "spread": false,
        "optional": false,
        "name": "hubAndState",
        "description": "hubId and new state"
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "getHubConnectionState",
    "memberof": "src/connection/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection/state.js~getHubConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/connection/state.js",
    "importStyle": "{getHubConnectionState}",
    "description": "Get hub connection state by hub id",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HUB_CONNECTION_STATE_TYPE"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/devices/constants.js",
    "content": "// \n//\n\n\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/devices/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/devices/device.js",
    "content": "\n// \nimport isEmpty from 'lodash/isEmpty';\nimport pick from 'lodash/pick';\n\n\nimport { send, COMMANDS } from '../connection/send';\nimport { store } from '../store';\nimport { userState } from '../reducers/user';\nimport { hubsState } from '../reducers/hubs';\nimport { HUB_CONNECTION_STATES } from '../connection/constants';\n// import type { COMMAND_TYPE } from '../connection/constants';\n\n/**\n * Device state command to be sent\n * @param  {string} hubId\n * @param  {string} deviceId\n * @param  {Object} state\n * @param  {Array<string>} properties - optional properties\n * @return {Promise}\n */\nexport function sendDeviceStateCmd(hubId, deviceId, state, properties) {\n  return new Promise((resolve, reject) => {\n    const stateNow = store.getState();\n    const user = userState.selectors.getUser(stateNow);\n    if (!user || !user.authKey) {\n      console.error('SDK sendDeviceStateCmd error: No userKey!');\n      reject(new Error('Device command error: No userKey!'));\n      return;\n    }\n\n    const hubs = hubsState.selectors.getHubs(stateNow);\n    if (!hubs[hubId] || !hubs[hubId].hubKey) {\n      console.error('SDK sendDeviceStateCmd error: No hubKey!');\n      reject(new Error('Device command error: No hubKey!'));\n      return;\n    }\n\n    const { authKey } = user;\n    const { hubKey } = hubs[hubId];\n    let sendState = state;\n    if (!isEmpty(properties)) {\n      sendState = pick(sendState, properties);\n    }\n\n    send({\n      command: COMMANDS.CMD_DEVICE_STATE, authKey, hubId, hubKey, data: [{ id: deviceId, state: sendState }],\n    })\n      .then((response) => {\n        console.debug('SDK sendDeviceCmd ok', response);\n        resolve(response);\n      })\n      .catch((error) => {\n        console.error(error);\n        console.error('SDK sendDeviceStateCmd error:', error);\n        reject(new Error('Device state command error!'));\n      });\n  });\n}\n\n/**\n * General device command to be sent\n * @param  {string} hubId\n * @param  {string} deviceId\n * @param  {Object} state\n * @param  {Array<string>} properties - optional properties\n * @return {Promise}\n */\nexport function sendDeviceCmd(hubId, deviceId, commandType, data, properties) {\n  return new Promise((resolve, reject) => {\n    const stateNow = store.getState();\n    const user = userState.selectors.getUser(stateNow);\n    if (!user || !user.authKey) {\n      console.error('SDK sendDeviceCmd error: No userKey!');\n      reject(new Error('Device command error: No userKey!'));\n      return;\n    }\n\n    const hubs = hubsState.selectors.getHubs(stateNow);\n    const hub = hubs[hubId];\n    const { hubKey } = hubs[hubId];\n    if (!hub || !hubKey) {\n      console.error('SDK sendDeviceCmd error: No hubKey!');\n      reject(new Error('Device command error: No hubKey!'));\n      return;\n    }\n\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.error('SDK sendDeviceCmd error: No Hub connection');\n      reject(new Error('Device command error: No hub connection'));\n      return;\n    }\n\n\n    const { authKey } = user;\n    if (!authKey) {\n      console.error('SDK sendDeviceCmd error: No authKey!');\n      reject(new Error('Device command error: No hubKey!'));\n      return;\n    }\n\n    let sendData = data;\n    if (!isEmpty(properties)) {\n      sendData = pick(sendData, properties);\n    }\n    if (commandType) {\n      send({\n        command: commandType, method: undefined, authKey, hubId, localUrl: hub.url, hubKey, data: [sendData],\n      })\n        .then((response) => {\n          console.debug('SDK sendDeviceCmd ok', response);\n          resolve(response);\n        })\n        .catch((error) => {\n          console.error('SDK sendDeviceCmd error:', error);\n          reject(new Error('Device command error!'));\n        });\n    }\n  });\n}\n\n/**\n * Unpair device\n * @param  {string} hubId\n * @param  {string} deviceId\n * @return {Promise}\n */\nexport function unpairDevice(hubId, deviceId) {\n  return sendDeviceCmd(hubId, deviceId, COMMANDS.CMD_DEVICE_IGNORE, { id: deviceId });\n}\n\n/**\n * Identify device\n * @param  {string} hubId\n * @param  {string} deviceId\n * @return {Promise}\n */\nexport function identifyDevice(hubId, deviceId) {\n  return sendDeviceCmd(hubId, deviceId, COMMANDS.CMD_DEVICE_IDENTIFY, { id: deviceId });\n}\n\n/**\n * Identify device\n * @param  {string} hubId\n * @param  {string} deviceId\n * @param  {string} name\n * @param  {Array<string>} roomId\n * @return {Promise}\n */\nexport function setDeviceMeta(hubId, deviceId, name, rooms) {\n  return sendDeviceCmd(hubId, deviceId, COMMANDS.CMD_DEVICE_META, { id: deviceId, name, room: rooms });\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/devices/device.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "sendDeviceStateCmd",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~sendDeviceStateCmd",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{sendDeviceStateCmd}",
    "description": "Device state command to be sent",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "optional properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "sendDeviceCmd",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~sendDeviceCmd",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{sendDeviceCmd}",
    "description": "General device command to be sent",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "optional properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "unpairDevice",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~unpairDevice",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{unpairDevice}",
    "description": "Unpair device",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "identifyDevice",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~identifyDevice",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{identifyDevice}",
    "description": "Identify device",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "setDeviceMeta",
    "memberof": "src/devices/device.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/device.js~setDeviceMeta",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/device.js",
    "importStyle": "{setDeviceMeta}",
    "description": "Identify device",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "roomId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/devices/devices.js",
    "content": "// \nimport { store } from '../store';\nimport { devicesState } from '../reducers/devices';\nimport { pairingsState } from '../reducers/pairings';\n\n\n\n/**\n * Get devices of all selected hubs\n * @return {HUB_DEVICES_MAP_TYPE}\n */\nexport function getDevices() {\n  const stateNow = store.getState();\n  return devicesState.selectors.getDevices(stateNow);\n}\n\n/**\n * Get pairing devices of all selected hubs\n * @return {HUB_DEVICES_MAP_TYPE}\n */\nexport function getPairingDevices() {\n  const stateNow = store.getState();\n  return pairingsState.selectors.getPairings(stateNow);\n}\n\n/**\n * Get devices of given hub\n * @param  {string} hubId\n * @return {DEVICES_MAP_TYPE}\n */\nexport function getHubDevices(hubId) {\n  let retVal;\n  const devices = getDevices();\n  if (devices && devices[hubId]) {\n    retVal = devices[hubId];\n  }\n  return retVal;\n}\n\n/**\n * Get pairing devices of given hub\n * @param  {string} hubId\n * @return {DEVICES_MAP_TYPE}\n */\nexport function getHubPairingDevices(hubId) {\n  let retVal;\n  const devices = getPairingDevices();\n  if (devices && devices[hubId]) {\n    retVal = devices[hubId];\n  }\n  return retVal;\n}\n\n/**\n * Device handler for poll delta results\n * @param  {string} hubId\n * @param  {boolean} reset\n * @param  {Object} devices\n */\nexport function devicesDeltaHandler(hubId, reset, devices) {\n  let oldHubDevices = {};\n  const storedDevices = getDevices();\n  if (storedDevices && storedDevices[hubId]) {\n    oldHubDevices = storedDevices[hubId];\n  }\n\n  if (reset) {\n    // If reset then set  devices as they are received\n    const stateDevices = {\n      hubId,\n      devices,\n    };\n    store.dispatch(devicesState.actions.setDevices(stateDevices));\n  } else {\n    // Loop devices to check could it be added or should be removed\n    Object.entries(devices).forEach(([key, device]) => {\n      const stateDevice = {\n        hubId,\n        device,\n      };\n      if (key && device) {\n        store.dispatch(devicesState.actions.setDevice(stateDevice));\n      } else if (key && oldHubDevices[key]) {\n        store.dispatch(devicesState.actions.deleteDevice(key));\n      }\n    });\n  }\n}\n\n/**\n * Device handler for poll delta results\n * @param  {string} hubId\n * @param  {boolean} reset\n * @param  {Array} pairingDevices\n */\nexport function pairingDevicesDeltaHandler(hubId, reset, pairingDevices) {\n  let oldPairingDevices = {};\n  const storedPairingDevices = getPairingDevices();\n  if (storedPairingDevices && storedPairingDevices[hubId]) {\n    oldPairingDevices = storedPairingDevices[hubId];\n  }\n\n\n    // If reset then set  devices as they are received\n    const statePairingDevices = {\n      hubId,\n      devices: {},\n    };\n    pairingDevices.map((device) => {\n      statePairingDevices.devices[device.id] = device;\n      return true;\n    });\n\n  if (reset) {\n    // If reset then set  devices as they are received\n    store.dispatch(pairingsState.actions.setPairingDevices(statePairingDevices));\n  } else {\n    // Loop devices to check could it be added or should be removed\n    Object.entries(statePairingDevices.devices).forEach(([key, device]) => {\n      const statePairingDevice = {\n        hubId,\n        device,\n      };\n      /*\n      for(devRoom in device.status.room){\n        for room in _rooms when devRoom is room.id\n            device.status.room = angular.copy room\n      }\n      */\n      if (key && device) {\n        store.dispatch(pairingsState.actions.setPairingDevice(statePairingDevice));\n      } else if (key && oldPairingDevices[key]) {\n        store.dispatch(pairingsState.actions.deletePairingDevice(key));\n      }\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/devices/devices.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "getDevices",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~getDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{getDevices}",
    "description": "Get devices of all selected hubs",
    "lineNumber": 12,
    "return": {
      "nullable": null,
      "types": [
        "HUB_DEVICES_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "getPairingDevices",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~getPairingDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{getPairingDevices}",
    "description": "Get pairing devices of all selected hubs",
    "lineNumber": 21,
    "return": {
      "nullable": null,
      "types": [
        "HUB_DEVICES_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "getHubDevices",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~getHubDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{getHubDevices}",
    "description": "Get devices of given hub",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DEVICES_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "getHubPairingDevices",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~getHubPairingDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{getHubPairingDevices}",
    "description": "Get pairing devices of given hub",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DEVICES_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "devicesDeltaHandler",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~devicesDeltaHandler",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{devicesDeltaHandler}",
    "description": "Device handler for poll delta results",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "devices",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "pairingDevicesDeltaHandler",
    "memberof": "src/devices/devices.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/devices/devices.js~pairingDevicesDeltaHandler",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/devices/devices.js",
    "importStyle": "{pairingDevicesDeltaHandler}",
    "description": "Device handler for poll delta results",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "pairingDevices",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/hubs/constants.js",
    "content": "// \n//\n/**\n  * Enumeration of hub state, that could be\n  * UNCLAIMED, CLAIMED, TOO_NEW_VERSION, NO_ACCESS or CONNECTED\n  * @readonly\n  * @enum {string}\n  */\nexport const HUB_STATES = Object.freeze({\n  UNCLAIMED: 'unclaimed',\n  CLAIMED: 'claimed',\n  TOO_NEW_VERSION: 'new version',\n  NO_ACCESS: 'no access',\n  CONNECTED: 'connected',\n});\n\n\n\n/*\n * Intervall defining how often hubkeys and metadatas are fetched\n */\nexport const DISCOVERY_INTERVAL_MS = 45 * 1000;\n\n/*\n * Interval defining how often hubs are polled at max\n * This value is used as is in local connection, and multiplied in remote connection\n */\nexport const POLL_INTERVAL_MS = 1 * 1000;\n\n/*\n * Interval defining how often hubs are polled when paired at max\n * This value is used as is in local connection, and multiplied in remote connection\n */\nexport const PAIRING_POLL_INTERVAL_MS = 5 * 1000;\n\nexport const HUB_PROTOCOL = 'http://';\nexport const HUB_PORT = '8893';\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/hubs/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "HUB_STATES",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~HUB_STATES",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{HUB_STATES}",
    "description": "Enumeration of hub state, that could be\nUNCLAIMED, CLAIMED, TOO_NEW_VERSION, NO_ACCESS or CONNECTED",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "DISCOVERY_INTERVAL_MS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~DISCOVERY_INTERVAL_MS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{DISCOVERY_INTERVAL_MS}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "POLL_INTERVAL_MS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~POLL_INTERVAL_MS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{POLL_INTERVAL_MS}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "PAIRING_POLL_INTERVAL_MS",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~PAIRING_POLL_INTERVAL_MS",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{PAIRING_POLL_INTERVAL_MS}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "HUB_PROTOCOL",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~HUB_PROTOCOL",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{HUB_PROTOCOL}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "HUB_PORT",
    "memberof": "src/hubs/constants.js",
    "static": true,
    "longname": "src/hubs/constants.js~HUB_PORT",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/constants.js",
    "importStyle": "{HUB_PORT}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/hubs/hubs.js",
    "content": "// \nimport isEmpty from 'lodash/isEmpty';\nimport {\n  DISCOVERY_INTERVAL_MS, POLL_INTERVAL_MS, PAIRING_POLL_INTERVAL_MS, HUB_PROTOCOL, HUB_PORT,\n} from './constants';\nimport { USER_STATES, ROLES } from '../user/constants';\nimport { HUB_CONNECTION_STATES } from '../connection/constants';\nimport { COMMANDS, send, sendAll } from '../connection/send';\n\nimport { devicesDeltaHandler, pairingDevicesDeltaHandler } from '../devices/devices';\nimport { roomsDeltaHandler } from '../rooms/rooms';\nimport { urlBase64Decode } from '../utils';\nimport { store, watchChanges } from '../store';\nimport { hubsState } from '../reducers/hubs';\nimport { userState } from '../reducers/user';\n\n\n\nlet hubsMap = {};\n\n\n/*\n * Helper method to extract hub info from JWT based hub keys\n */\nfunction extractHubInfo(HUBKeys) {\n  const hubs = {};\n  if (HUBKeys) {\n    Object.keys(HUBKeys).forEach((hubKey) => {\n      const coded = HUBKeys[hubKey].split('.')[1];\n      const decoded = urlBase64Decode(coded);\n      const payload = JSON.parse(decoded);\n      const info = {};\n      info.id = payload.hubId || payload.hub_id;\n      info.name = payload.hubName || payload.hub_name;\n      info.hubKey = HUBKeys[hubKey];\n      info.connectionState = HUB_CONNECTION_STATES.UNCONNECTED;\n      if (payload.role) {\n        info.role = payload.role;\n        info.roleString = '';\n        Object.keys(ROLES).forEach((roleKey) => {\n          if (ROLES[roleKey] === info.role) info.roleString = roleKey;\n        });\n      }\n      hubs[info.id] = info;\n    });\n  }\n  return hubs;\n}\n\n\n/*\n * Hub metadata is received and will be stored\n */\nfunction updateFoundHub(hubURL, hub) {\n  const foundHub = hub;\n  // Hub keys returns ids, idQuerys return hubId\n  if (foundHub.hubId) {\n    foundHub.id = foundHub.hubId;\n    delete foundHub.hubId;\n  }\n  if (!foundHub.id) {\n    return;\n  }\n\n  if (!hubsMap[foundHub.id]) {\n    hubsMap[foundHub.id] = {\n      id: foundHub.id,\n      name: foundHub.name || '',\n    };\n  }\n  hubsMap[foundHub.id].connected = foundHub.connected;\n  hubsMap[foundHub.id].features = foundHub.features;\n  hubsMap[foundHub.id].state = foundHub.state;\n  hubsMap[foundHub.id].version = foundHub.version;\n  hubsMap[foundHub.id].connectionState = foundHub.connected ? HUB_CONNECTION_STATES.REMOTE : HUB_CONNECTION_STATES.UNCONNECTED;\n  if (hubURL) {\n    hubsMap[foundHub.id].connectionState = HUB_CONNECTION_STATES.LOCAL;\n    hubsMap[foundHub.id].url = hubURL;\n  } else {\n    hubsMap[foundHub.id].url = undefined;\n  }\n}\n\n/*\n * Remote hub metamata request for version etc information\n */\nfunction doRemoteIdQuery(hubId, authKey, hubKey) {\n  return new Promise((resolve, reject) => {\n    send({\n      command: COMMANDS.CLOUD_META, authKey, hubKey, hubId,\n    })\n      .then((hubData) => {\n        updateFoundHub(undefined, hubData);\n        resolve(hubId);\n      })\n      .catch((error) => {\n        console.log(`doRemoteIdQuery ${hubId} error `, error.message);\n        reject(hubId);\n      });\n  });\n}\n\n/*\n * Local hub metadata request for version etc information\n */\nfunction doLocalIdQuery(ip) {\n  return new Promise((resolve) => {\n    if (ip) {\n      const hubURL = `${HUB_PROTOCOL + ip}:${HUB_PORT}`;\n      const url = `${hubURL}/hub`;\n      send({ url, timeout: 500 })\n        .then((hubData) => {\n          updateFoundHub(hubURL, hubData);\n          resolve(ip);\n        })\n        .catch((error) => {\n          console.log(`doLocalIdQuery ${ip} error `, error.message);\n          resolve(ip);\n        });\n    } else {\n      resolve();\n    }\n  });\n}\n\n/**\n * Helper to get current hubs from state\n * @return {HUBS_MAP_TYPE} - hubs\n */\nexport function getHubs() {\n  return hubsState.selectors.getHubs(store.getState());\n}\n\n/*\n * Check hubs that are currently selected and mark them selected also in map of given hubs\n */\nfunction setSelectedHubs(newHubs) {\n  const hubs = getHubs();\n  (Object.values(hubs)).forEach((hub) => {\n    if (hub.selected) {\n      const selectedNewHub = newHubs[hub.id];\n      if (selectedNewHub) {\n        selectedNewHub.selected = true;\n      }\n    }\n  });\n}\n\n/*\n * Fetch HUB IP addresses and metadata of those in the same network\n */\nfunction doCloudDiscovery() {\n  return new Promise((resolve) => {\n    send({ command: COMMANDS.CLOUD_IP })\n      .then((ips) => {\n        const queries = [];\n        if (ips && !isEmpty(ips)) {\n          ips.forEach((ip) => {\n            queries.push(doLocalIdQuery(ip));\n          });\n        }\n        sendAll(queries)\n          .finally(() => {\n            // mark selected hubs to be selected after\n            setSelectedHubs(hubsMap);\n            store.dispatch(hubsState.actions.updateHubs(hubsMap));\n            resolve('ok');\n          });\n      })\n      .catch((error) => {\n        console.error('doCloudDiscovery error: ', error.message);\n        store.dispatch(hubsState.actions.updateHubs(hubsMap));\n        resolve('error');\n      });\n  });\n}\n\n/*\n * Fetch hub metadatas from Cloud\n */\nfunction fetchCloudMetaData(hubs, authKey) {\n  return new Promise((resolve) => {\n    const queries = [];\n    (Object.values(hubs)).forEach((hub) => {\n      if (hub.hubKey) {\n        queries.push(doRemoteIdQuery(hub.id, authKey, hub.hubKey));\n      }\n    });\n    sendAll(queries)\n      .then((values) => {\n        console.debug('fetchCloudMetaData values', values);\n      })\n      .catch((error) => {\n        console.error('fetchCloudMetaData error', error);\n      })\n      .finally(() => {\n        resolve();\n      });\n  });\n}\n\n\n/**\n * Helper to get current user from state\n */\nfunction storedUser() {\n  return userState.selectors.getUser(store.getState());\n}\n\n/*\n * Make hubsMap by fetching hub meta data from cloud and local\n */\nfunction makeHubsMap(tokens, sync = false) {\n  const { authKey } = storedUser();\n  return new Promise((resolve) => {\n    hubsMap = extractHubInfo(tokens);\n    store.dispatch(hubsState.actions.updateHubs(hubsMap));\n    fetchCloudMetaData(hubsMap, authKey)\n      .finally(() => {\n        if (sync) {\n          doCloudDiscovery().then(() => resolve(getHubs())).catch(() => resolve(getHubs()));\n        } else {\n          doCloudDiscovery();\n          resolve(getHubs());\n        }\n      });\n  });\n}\n\n/*\n * Fetch Hub keys by user authKey and start fetching hub meta datas\n */\nfunction fetchHubs() {\n  const { authKey } = storedUser();\n  return new Promise((resolve, reject) => {\n    if (!authKey) {\n      reject(new Error('No userKey!'));\n      return;\n    }\n    send({ command: COMMANDS.HUB_KEYS, authKey })\n      .then((tokens) => {\n        if (tokens) {\n          makeHubsMap(tokens).then((hubs) => resolve(hubs));\n          /*\n          hubsMap = extractHubInfo(tokens);\n          store.dispatch(hubsState.actions.updateHubs(hubsMap));\n          fetchCloudMetaData(hubsMap, authKey)\n            .finally(() => {\n              doCloudDiscovery();\n              resolve(getHubs());\n            });\n          */\n        } else {\n          resolve(getHubs());\n        }\n      })\n      .catch((error) => {\n        console.error('fetchHubTokens error: ', error.message);\n        reject(error);\n      });\n  });\n}\n\n\nlet discoveryInterval;\n\n/**\n * Start discovering hubs every DISCOVERY_INTERVAL_MS\n * Sequence includes requests of hub-keys, remote meta-infos, lan-ips and local meta-infos\n */\nexport function startDiscoveringHubs() {\n  if (!discoveryInterval) {\n    // call immediately...\n    fetchHubs();\n    // and then every DISCOVERY_INTERVAL_MS (30s?)\n    discoveryInterval = setInterval(fetchHubs, DISCOVERY_INTERVAL_MS);\n  }\n}\n\n/**\n * Stop discovering hubs\n */\nexport function stopDiscoveringHubs() {\n  clearInterval(discoveryInterval);\n}\n\n/*\n** Pairing\n */\n\nconst pairingIntervals = {};\nconst pairingStopped = {};\nconst pairingTimeStamp = {};\nconst pairingInAction = {};\n\n\n/*\n * Do pairing of given hub if hub connection is ok\n * Remote pairing is executed only every second call\n * @param {string} hubId\n * @param {booleam} reset - set true for full scan, false if delta only\n * @return {Promise}\n */\nfunction doPairingById(hubId, reset = false) {\n  return new Promise((resolve, reject) => {\n    let doReset = reset;\n    if (pairingStopped[hubId]) {\n      console.debug('doPairing: pairing stopped');\n      reject(new Error('pairing stopped'));\n      return;\n    }\n    if (!pairingTimeStamp[hubId]) {\n      pairingTimeStamp[hubId] = 0;\n    }\n\n    const hub = getHubs()[hubId];\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    console.debug('doPairing connection state: ', hub.connectionState);\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.warn('SDK doPairing: no Hub connection');\n      reject(new Error('no hub connection'));\n      return;\n    }\n\n    if (pairingInAction[hubId]) {\n      reject(new Error('pairing already in action'));\n      return;\n    }\n    pairingInAction[hubId] = true;\n\n    if (doReset) pairingTimeStamp[hubId] = 0;\n    doReset = pairingTimeStamp[hubId] === 0;\n\n    send({\n      command: COMMANDS.PAIR_START, hubId, authKey, hubKey, localUrl: hub.url, data: { ts: pairingTimeStamp[hubId] },\n    })\n      .then((delta) => {\n        if (delta) {\n          pairingTimeStamp[hubId] = delta.timestamp;\n          switch (delta.type) {\n            case 'SCAN_DELTA': {\n              pairingDevicesDeltaHandler(hubId, doReset, delta.devices);\n              break;\n            }\n            default: {\n              break;\n            }\n          }\n        }\n        pairingInAction[hubId] = false;\n        resolve('ok');\n      })\n      .catch((error) => {\n      // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK: doPairing error: ', error.message);\n        pairingInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Set pairing ignore flag of given device in given hub\n * @param {string} hubId\n * @param {string} deviceId\n * @param {boolean} ignore\n * @return {Promise}\n */\nexport function ignorePairingByIds(hubId, deviceId, ignore) {\n  const { authKey } = storedUser();\n  const hub = getHubs()[hubId];\n  const { hubKey } = hub;\n  return send({\n    command: COMMANDS.PAIR_IGNORE, hubId, authKey, hubKey, localUrl: hub.url, data: { id: deviceId, ignored: ignore },\n  });\n}\n\n\n/**\n * Start pairing on given hub\n * @param {string} hubId\n * @param {booleam} reset - set true for full scan, false if delta only\n * @return {Promise}\n */\nexport function startPairingById(hubId, reset) {\n  const intervalTime = PAIRING_POLL_INTERVAL_MS;\n  pairingStopped[hubId] = false;\n  const doPairing = (callHubId, callReset) => doPairingById(callHubId, callReset).then(() => {}).catch(() => {});\n  try {\n    pairingIntervals[hubId] = setInterval(doPairing, intervalTime, hubId, reset);\n  } catch (error) {\n    console.error('Catch startPairingById: ', error);\n  }\n  return doPairingById(hubId, reset);\n}\n\nconst stopPairingInAction = {};\n/**\n * Stop pairing on given hub\n * @param {string} hubId\n * @return {Promise}\n */\nexport function stopPairingById(hubId) {\n  return new Promise((resolve, reject) => {\n    if (stopPairingInAction[hubId]) {\n      reject(new Error('already stopping'));\n      return;\n    }\n    stopPairingInAction[hubId] = true;\n\n    const { authKey } = storedUser();\n    const hub = getHubs()[hubId];\n    const { hubKey } = hub;\n\n\n    clearInterval(pairingIntervals[hubId]);\n\n    send({\n      command: COMMANDS.PAIR_STOP, hubId, authKey, hubKey, localUrl: hub.url,\n    })\n      .then((data) => {\n        console.debug('SDK: pairingStopped: Ok , data: ', data);\n        pairingStopped[hubId] = true;\n        stopPairingInAction[hubId] = false;\n        resolve('ok');\n      })\n      .catch((error) => {\n      // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK: pairingStopped error: ', error.message);\n        stopPairingInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Stop pairing on all hubs\n * @return none\n */\nexport function stopPairings() {\n  const hubs = getHubs();\n  (Object.values(hubs)).forEach((hub) => {\n    stopPairingById(hub.id)\n      .then(() => console.debug('SDK: pairingStopped: ', hub.id))\n      .catch(() => console.log('SDK: pairingStopped error: ', hub.id));\n  });\n}\n\n/*\n** Polling\n*/\nconst pollIntervals = {};\nconst pollingStopped = {};\nconst pollTimeStamp = {};\nconst pollInAction = {};\nconst secondPoll = {};\n\n\n/**\n * Do poll on given hub if hub connection is ok.\n * Remote polls are executed only every second call.\n * @param {string} hubId\n * @param {booleam} reset - set true for full scan, false if delta only\n * @return {Promise} status or error\n */\nexport function doPoll(hubId, reset = false) {\n  return new Promise((resolve, reject) => {\n    let doReset = reset;\n    if (doReset) pollTimeStamp[hubId] = 0;\n    doReset = pollTimeStamp[hubId] === 0;\n\n    if (pollingStopped[hubId]) {\n      console.debug('doPolling: polling stopped');\n      resolve('stopped');\n      return;\n    }\n    if (!pollTimeStamp[hubId]) {\n      pollTimeStamp[hubId] = 0;\n    }\n    const hub = getHubs()[hubId];\n    console.debug('doPoll connection state: ', hub.connectionState);\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.warn('SDK doPoll: No Hub connection');\n      reject(new Error('doPoll error: No Hub connection'));\n      return;\n    }\n\n    // just return every second -> not doing so often as in local connection\n    if (hub.connectionState === HUB_CONNECTION_STATES.REMOTE && !doReset) {\n      if (secondPoll[hubId]) {\n        secondPoll[hubId] = false;\n        resolve('skipped');\n        return;\n      }\n      secondPoll[hubId] = true;\n    }\n\n    const { authKey } = storedUser();\n    const { hubKey } = hub;\n\n    if (pollInAction[hubId]) {\n      reject(new Error('doPoll error: Already polling'));\n      return;\n    }\n    pollInAction[hubId] = true;\n\n    send({\n      command: COMMANDS.POLL, hubId, authKey, hubKey, localUrl: hub.url, data: { ts: pollTimeStamp[hubId] },\n    })\n      .then((deltas) => {\n        if (deltas) {\n        // console.log(JSON.stringify(deltas));\n        // Return can be null poll, even if not asked that\n          if (pollTimeStamp[hubId] === 0 || deltas.full) {\n            doReset = true;\n          }\n\n          pollTimeStamp[hubId] = deltas.timestamp;\n\n          deltas.polls.forEach((delta) => {\n            switch (delta.type) {\n              case 'DEVICE_DELTA': {\n                devicesDeltaHandler(hubId, doReset, delta.devices);\n                break;\n              }\n              case 'GROUP_DELTA': {\n                break;\n              }\n              case 'SCENE_DELTA': {\n                break;\n              }\n              case 'RULE_DELTA': {\n                break;\n              }\n              case 'USERS_DELTA': {\n                break;\n              }\n              case 'ROOM_DELTA': {\n                roomsDeltaHandler(hubId, doReset, delta.rooms);\n                break;\n              }\n              case 'ZONE_DELTA': {\n                break;\n              }\n              case 'ALARM_DELTA': {\n                break;\n              }\n              default: {\n                break;\n              }\n            }\n          });\n        }\n        pollInAction[hubId] = false;\n        resolve('done');\n      })\n      .catch((error) => {\n      // store.dispatch(hubsState.actions.hubPollFailed())\n        console.error('SDK doPoll error: ', error.message);\n        pollInAction[hubId] = false;\n        reject(error);\n      });\n  });\n}\n\n\n/**\n * Start polling on given hub\n * @param {string} hubId\n * @return {Promise} status or error\n */\nexport function startPollingById(hubId) {\n  pollingStopped[hubId] = false;\n  const intervalTime = POLL_INTERVAL_MS;\n  const pollCall = (callHubId) => doPoll(callHubId).then(() => {}).catch(() => {});\n  try {\n    pollIntervals[hubId] = setInterval(pollCall, intervalTime, hubId);\n  } catch (error) {\n    console.error('Catch startPollingById: ', error);\n  }\n  return doPoll(hubId);\n}\n\n/**\n * Stop polling on given hub\n * @param {string} hubId   - hub id to be selected\n * @return none\n */\nexport function stopPollingById(hubId) {\n  pollingStopped[hubId] = true;\n  clearInterval(pollIntervals[hubId]);\n}\n\n\n/**\n * Select hub by id, starts hub polling\n * @param  {string} hubId\n * @param  {boolean} poll - flag to start polling when connected, defaults to false\n * @return {Promise} status or error\n */\nexport function selectHubById(hubId, poll = false) {\n  return new Promise((resolve, reject) => {\n    const hubs = getHubs();\n    if (!isEmpty(hubs)) {\n      let pollingHub = null;\n      let error = null;\n      (Object.values(hubs)).every((hub) => {\n        if (hubId === hub.id) {\n          store.dispatch(hubsState.actions.selectHub({ hubId: hub.id }));\n          if (hub.hubKey && poll) {\n            pollingHub = startPollingById(hub.id);\n            return false; // break\n          }\n          if (!hub.hubKey) {\n            console.error('SDK selectHubById: No hub key error');\n            error = (new Error('no hubKey'));\n            return false; // break\n          }\n          console.debug('SDK selectHubById: Ready to start polling');\n          return false; // break\n        }\n        return true; // continue\n      });\n      if (pollingHub) {\n        return pollingHub.then((status) => resolve(status)).catch(() => resolve('polling started'));\n      }\n      if (error) {\n        reject(error);\n      } else if (!pollingHub && poll) {\n        reject(new Error('hub not found'));\n      } else {\n        resolve('ready to poll');\n      }\n      return true;\n    }\n    reject(new Error('no hubs'));\n    return true;\n  });\n}\n\n\n/**\n * Unselect hub by id, stops hub polling\n * @param  {string} hubId   - hub id to be selected\n * @return none\n */\nexport function unSelectHubById(hubId) {\n  const hubs = getHubs();\n  (Object.values(hubs)).forEach((hub) => {\n    if (hubId === hub.id) {\n      store.dispatch(hubsState.actions.unSelectHub({ hubId: hub.id }));\n      stopPollingById(hub.id);\n    }\n  });\n}\n\n/**\n * Unselect hubs, stops hub pollings\n * @return none\n */\nexport function unSelectHubs() {\n  const hubs = getHubs();\n  (Object.values(hubs)).forEach((hub) => {\n    store.dispatch(hubsState.actions.unSelectHub({ hubId: hub.id }));\n    stopPollingById(hub.id);\n  });\n}\n\n/**\n * Connect to the given hub - local or remote.\n * @param  {string} hubId\n * @param  {string} hubKey\n * @return {Promise} current hubs, should not reject never\n */\nexport function connectHubByTokens(hubId, hubKey) {\n  return new Promise((resolve, reject) => {\n    const { authKey } = storedUser();\n    if (!hubId) reject(new Error('No Hub Id'));\n    if (!hubKey) reject(new Error('No hubKey'));\n    if (!authKey) reject(new Error('No AuthKey'));\n    const tokens = {};\n    tokens[hubId] = hubKey;\n    makeHubsMap(tokens, true).then(() => {\n      selectHubById(hubId, false).then(() => {\n        resolve(getHubs());\n      }).catch((error) => reject(error));\n    }).catch((error) => reject(error));\n  });\n}\n\n/*\n * Listener of User state changes\n * Hub discovery is started when user's new state is AUTHENTICATED\n */\nwatchChanges('user.state', (newState) => {\n  // Start discovery when user is authenticated\n  if (newState === USER_STATES.AUTHENTICATED) {\n    startDiscoveringHubs();\n  }\n});\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/hubs/hubs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "hubsMap",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~hubsMap",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "extractHubInfo",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~extractHubInfo",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "HUBKeys",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "updateFoundHub",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~updateFoundHub",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubURL",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hub",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "doRemoteIdQuery",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doRemoteIdQuery",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "authKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubKey",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "doLocalIdQuery",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doLocalIdQuery",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ip",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "getHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~getHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{getHubs}",
    "description": "Helper to get current hubs from state",
    "lineNumber": 130,
    "return": {
      "nullable": null,
      "types": [
        "HUBS_MAP_TYPE"
      ],
      "spread": false,
      "description": "hubs"
    },
    "params": []
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "setSelectedHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~setSelectedHubs",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newHubs",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "doCloudDiscovery",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doCloudDiscovery",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 152,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "fetchCloudMetaData",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~fetchCloudMetaData",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubs",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "authKey",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "storedUser",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~storedUser",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "Helper to get current user from state ",
    "lineNumber": 206,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "makeHubsMap",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~makeHubsMap",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "sync",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "fetchHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~fetchHubs",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 233,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "startDiscoveringHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~startDiscoveringHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{startDiscoveringHubs}",
    "description": "Start discovering hubs every DISCOVERY_INTERVAL_MS\nSequence includes requests of hub-keys, remote meta-infos, lan-ips and local meta-infos",
    "lineNumber": 271,
    "params": [],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "stopDiscoveringHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~stopDiscoveringHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{stopDiscoveringHubs}",
    "description": "Stop discovering hubs",
    "lineNumber": 283,
    "params": [],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "pairingIntervals",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pairingIntervals",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "pairingStopped",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pairingStopped",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "pairingTimeStamp",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pairingTimeStamp",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "pairingInAction",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pairingInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "doPairingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doPairingById",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "reset",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "ignorePairingByIds",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~ignorePairingByIds",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{ignorePairingByIds}",
    "description": "Set pairing ignore flag of given device in given hub",
    "lineNumber": 371,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "ignore",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "startPairingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~startPairingById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{startPairingById}",
    "description": "Start pairing on given hub",
    "lineNumber": 387,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "booleam"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": "set true for full scan, false if delta only"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "stopPairingInAction",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~stopPairingInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 399,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "stopPairingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~stopPairingById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{stopPairingById}",
    "description": "Stop pairing on given hub",
    "lineNumber": 405,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "stopPairings",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~stopPairings",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{stopPairings}",
    "description": "Stop pairing on all hubs",
    "lineNumber": 442,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "none"
    },
    "params": []
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "pollIntervals",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pollIntervals",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 454,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "pollingStopped",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pollingStopped",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 455,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "pollTimeStamp",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pollTimeStamp",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 456,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "pollInAction",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~pollInAction",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 457,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "secondPoll",
    "memberof": "src/hubs/hubs.js",
    "static": true,
    "longname": "src/hubs/hubs.js~secondPoll",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 458,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "doPoll",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~doPoll",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{doPoll}",
    "description": "Do poll on given hub if hub connection is ok.\nRemote polls are executed only every second call.",
    "lineNumber": 468,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "booleam"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": "set true for full scan, false if delta only"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "status or error"
    }
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "startPollingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~startPollingById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{startPollingById}",
    "description": "Start polling on given hub",
    "lineNumber": 574,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "status or error"
    }
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "stopPollingById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~stopPollingById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{stopPollingById}",
    "description": "Stop polling on given hub",
    "lineNumber": 591,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": "hub id to be selected"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "none"
    }
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "selectHubById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~selectHubById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{selectHubById}",
    "description": "Select hub by id, starts hub polling",
    "lineNumber": 603,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "poll",
        "description": "flag to start polling when connected, defaults to false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "status or error"
    }
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "unSelectHubById",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~unSelectHubById",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{unSelectHubById}",
    "description": "Unselect hub by id, stops hub polling",
    "lineNumber": 649,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": "hub id to be selected"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "none"
    }
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "unSelectHubs",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~unSelectHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{unSelectHubs}",
    "description": "Unselect hubs, stops hub pollings",
    "lineNumber": 663,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "none"
    },
    "params": []
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "connectHubByTokens",
    "memberof": "src/hubs/hubs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/hubs/hubs.js~connectHubByTokens",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/hubs/hubs.js",
    "importStyle": "{connectHubByTokens}",
    "description": "Connect to the given hub - local or remote.",
    "lineNumber": 677,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "current hubs, should not reject never"
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/index.js",
    "content": "// \n\n// try { process.env.NODE_ENV } catch(e) { var process = { env: { NODE_ENV: 'production' } }; }\n\n\nimport rootReducer from './reducers';\n\nexport { rootReducer as cozifyReducer };\nexport { store, watchChanges } from './store';\n\n// import logger from 'redux-logger'\n// const middleware = [...getDefaultMiddleware(), logger]\n\nexport { CLOUD_CONNECTION_STATES, HUB_CONNECTION_STATES } from './connection/constants';\nexport { LANGUAGES, USER_STATES, ROLES } from './user/constants';\nexport { HUB_STATES } from './hubs/constants';\n\nexport { getCloudConnectionState, getHubConnectionState } from './connection/state';\nexport {\n  changeLanguage, doPwLogin, setAuthenticated, acceptEula, getUserState,\n} from './user/user';\nexport {\n  getHubs, selectHubById, unSelectHubById, unSelectHubs, connectHubByTokens,\n  startDiscoveringHubs, stopDiscoveringHubs,\n  startPollingById, stopPollingById,\n  startPairingById, stopPairingById, ignorePairingByIds, stopPairings,\n  doPoll,\n} from './hubs/hubs';\nexport {\n  getDevices, getHubDevices,\n  getPairingDevices, getHubPairingDevices,\n} from './devices/devices';\nexport {\n  sendDeviceStateCmd, sendDeviceCmd,\n  unpairDevice, identifyDevice, setDeviceMeta,\n} from './devices/device';\nexport {\n  getRooms, getHubRooms,\n  addRoom, editRoom, removeRoom,\n} from './rooms/rooms';\n\n\nexport { devicesState, setDevices, deleteDevice } from './reducers/devices';\nexport { hubsState, updateHubs } from './reducers/hubs';\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/reducers/connections.js",
    "content": "// \n\n// This actionreducer uses internally https://github.com/mweststrate/immer, so it's safe to modify given state directly\nimport { createSlice } from 'redux-starter-kit';\nimport { CLOUD_CONNECTION_STATES } from '../connection/constants';\n// import type { CLOUD_CONNECTION_STATE_TYPE } from '../connection/constants';\n\n\n/**\n * Connections action creators object\n * @see  https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md\n * @return { {\n *   slice : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const connectionsState = createSlice({\n  slice: 'connections',\n  initialState: {\n    cloudState: CLOUD_CONNECTION_STATES.UNCONNECTED,\n  },\n  reducers: {\n    /*\n     * Reducer action of cloud connection state\n     * @param {Object} state\n     * @param {CLOUD_CONNECTION_STATES} action\n     */\n    setCloudConnectionState(state, action) {\n      const stateToSet = state;\n      const newState = action.payload;\n      const oldState = state.cloudState;\n      if (Object.values(CLOUD_CONNECTION_STATES).indexOf(newState) > -1) {\n        if (oldState !== newState) {\n          console.log(`CLOUD connection state ${oldState} -> ${newState}`);\n          stateToSet.cloudState = newState;\n        }\n      }\n    },\n\n\n  },\n});\n\n\nconst { actions, reducer } = connectionsState;\n/**\n * Connections reducer\n * @type {function} reducer\n */\nexport { reducer as connectionsReducer };\n\n// Extract and export each action creator by name\nexport const { setCloudConnectionState } = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/connections.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "connectionsState",
    "memberof": "src/reducers/connections.js",
    "static": true,
    "longname": "src/reducers/connections.js~connectionsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/connections.js",
    "importStyle": "{connectionsState}",
    "description": "Connections action creators object",
    "see": [
      " https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 19,
    "return": {
      "nullable": null,
      "types": [
        " {\n  slice : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/connections.js",
    "static": true,
    "longname": "src/reducers/connections.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/connections.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "setCloudConnectionState",
    "memberof": "src/reducers/connections.js",
    "static": true,
    "longname": "src/reducers/connections.js~setCloudConnectionState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/connections.js",
    "importStyle": "{setCloudConnectionState}",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/reducers/devices.js",
    "content": "// \n\n// This actionreducer uses internally https://github.com/mweststrate/immer, so it's safe to modify given state directly\nimport { createSlice } from 'redux-starter-kit';\n\n/**\n * Devices action creators object\n * @see  https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md\n * @return { {\n *   slice : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const devicesState = createSlice({\n  slice: 'devices',\n  initialState: {},\n  reducers: {\n    /*\n     * Reducer action of setting devices state - sets all given devices of given hub, keeps existing states\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setDevices(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { devices } = action.payload;\n      const hubDevices = {};\n\n\n      Object.entries(devices).forEach((entry) => {\n        const [id, device] = entry;\n        hubDevices[id] = { ...device };\n      });\n      stateToSet[hubId] = { ...hubDevices };\n    },\n\n    /*\n     * Reducer action of setting device state - sets  given device of given hub, keeps existing states\n     * @param {Object} state\n     * @param {payload:{Object{hubId:string, device:Object}}} action\n     */\n    setDevice(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { device } = action.payload;\n      if (stateToSet[hubId]) {\n        stateToSet[hubId][device.id] = { ...device };\n      }\n    },\n\n    /*\n     * Reducer action to remove device from state - sets all given devices of given hub, keeps existing states\n     * @param {Object} state\n     * @param {payload:{Object{hubId:string, device:Object}}} action\n     */\n    deleteDevice(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { deviceId } = action.payload;\n\n      if (hubId && deviceId && stateToSet[hubId] && stateToSet[hubId][deviceId]) {\n        delete stateToSet[hubId][deviceId];\n      }\n    },\n  },\n});\n\nconst { actions, reducer } = devicesState;\n\n/**\n * Devices reducer\n * @type {function} reducer\n */\nexport { reducer as devicesReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(addDevice({ id: 123, name: 'Unnamed device' }))\n{type : \"devices/addDevice\", payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const { setDevices, deleteDevice } = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/devices.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "devicesState",
    "memberof": "src/reducers/devices.js",
    "static": true,
    "longname": "src/reducers/devices.js~devicesState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/devices.js",
    "importStyle": "{devicesState}",
    "description": "Devices action creators object",
    "see": [
      " https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 16,
    "return": {
      "nullable": null,
      "types": [
        " {\n  slice : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/devices.js",
    "static": true,
    "longname": "src/reducers/devices.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/devices.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "setDevices",
    "memberof": "src/reducers/devices.js",
    "static": true,
    "longname": "src/reducers/devices.js~setDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/devices.js",
    "importStyle": "{setDevices}",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/reducers/hubs.js",
    "content": "// \n\n// This actionreducer uses internally https://github.com/mweststrate/immer, so it's safe to modify given state directly\nimport { createSlice } from 'redux-starter-kit';\nimport { HUB_CONNECTION_STATES } from '../connection/constants';\n\n/**\n * Hubs action creators object\n * @see  https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md\n * @return { {\n *   slice : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const hubsState = createSlice({\n  slice: 'hubs',\n  initialState: {},\n  reducers: {\n    /*\n     * Reducer action of setting many hubs to state\n     * @param  {Object} state\n     * @param  {payload:{hubs:HUBS_MAP_TYPE}} action\n     */\n    updateHubs(state, action) {\n      const stateToSet = state;\n      const hubs = action.payload;\n      console.log('updateHubs', hubs);\n      Object.entries(hubs).forEach((entry) => {\n        const [id, hub] = entry;\n        stateToSet[id] = { ...state[id], ...hub };\n      });\n    },\n\n\n    /*\n     * Reducer action of setting hub state to selected\n     * @param  {Object} state\n     * @param  {payload:{hubId:string}} action\n     */\n    selectHub(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      console.log('selectHub', hubId);\n      if (state[hubId]) {\n        stateToSet[hubId].selected = true;\n        console.log('selectHub', state[hubId]);\n      }\n    },\n\n    /*\n     * Reducer action of setting hub state to unselected\n     * @param  {Object} state\n     * @param  {payload:{hubId:string}} action\n     */\n    unSelectHub(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      if (state[hubId]) {\n        stateToSet[hubId].selected = false;\n        // console.log(\"selectHub\", state[action.payload]);\n      }\n    },\n\n    /*\n     * Reducer action of setting hub connection state\n     * @param  {Object} state\n     * @param  {payload:{hubId:string, state:HUB_STATES_TYPE}} action\n     */\n    setHubConnectionState(state, action) {\n      const { hubId } = action.payload;\n      const stateToSet = state;\n      const newState = action.payload.state;\n      const oldState = state[hubId] ? state[hubId].connectionState : undefined;\n      if (Object.values(HUB_CONNECTION_STATES).indexOf(newState) > -1) {\n        if (oldState && oldState !== newState) {\n          // console.log (`HUB ${hubId} connection state ${oldState} -> ${newState}`);\n          stateToSet[hubId].connectionState = newState;\n        }\n      }\n    },\n  },\n});\n\n\n// console.log('hubsState ', hubsState)\nconst { actions, reducer } = hubsState;\n\n/**\n * Hubs reducer\n * @type {function} reducer\n */\nexport { reducer as hubsReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(updateHubs({ id: 123, name: 'Unnamed device' }))\n{type : \"hubs/updateHubs, payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const {\n  updateHubs, selectHub, unSelectHub, setHubConnectionState,\n} = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/hubs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "hubsState",
    "memberof": "src/reducers/hubs.js",
    "static": true,
    "longname": "src/reducers/hubs.js~hubsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/hubs.js",
    "importStyle": "{hubsState}",
    "description": "Hubs action creators object",
    "see": [
      " https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 17,
    "return": {
      "nullable": null,
      "types": [
        " {\n  slice : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/hubs.js",
    "static": true,
    "longname": "src/reducers/hubs.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/hubs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "updateHubs",
    "memberof": "src/reducers/hubs.js",
    "static": true,
    "longname": "src/reducers/hubs.js~updateHubs",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/hubs.js",
    "importStyle": "{updateHubs}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/reducers/index.js",
    "content": "import { connectionsReducer } from './connections';\nimport { pairingsReducer } from './pairings';\nimport { devicesReducer } from './devices';\nimport { hubsReducer } from './hubs';\nimport { userReducer } from './user';\nimport { roomsReducer } from './rooms';\n\n/**\n * Root reducer\n * @type {Object}\n */\nconst rootReducer = {\n  connections: connectionsReducer,\n  pairings: pairingsReducer,\n  devices: devicesReducer,\n  hubs: hubsReducer,\n  user: userReducer,\n  rooms: roomsReducer,\n};\n\nexport default rootReducer;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "rootReducer",
    "memberof": "src/reducers/index.js",
    "static": true,
    "longname": "src/reducers/index.js~rootReducer",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/index.js",
    "importStyle": "rootReducer",
    "description": "Root reducer",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/reducers/pairings.js",
    "content": "// \n\n// This actionreducer uses internally https://github.com/mweststrate/immer, so it's safe to modify given state directly\nimport { createSlice } from 'redux-starter-kit';\n\n/**\n * Devices action creators object\n * @see  https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md\n * @return { {\n *   slice : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const pairingsState = createSlice({\n  slice: 'pairings',\n  initialState: {},\n  reducers: {\n    /*\n     * Reducer action of setting pairing devices state - sets all given devices of given hub, keeps existing states\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setPairingDevices(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { devices } = action.payload;\n      const hubPairingDevices = {};\n\n\n      Object.entries(devices).forEach((entry) => {\n        const [id, device] = entry;\n        hubPairingDevices[id] = { ...device };\n      });\n      stateToSet[hubId] = { ...hubPairingDevices };\n    },\n\n    /*\n     * Reducer action of setting device state - sets  given device of given hub, keeps existing states\n     * @param {Object} state\n     * @param {payload:{Object{hubId:string, device:Object}}} action\n     */\n    setPairingDevice(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { device } = action.payload;\n      if (stateToSet[hubId]) {\n        stateToSet[hubId][device.id] = { ...device };\n      }\n    },\n\n    /*\n     * Reducer action to remove device from state - sets all given devices of given hub, keeps existing states\n     * @param {Object} state\n     * @param {payload:{Object{hubId:string, device:Object}}} action\n     */\n    deletePairingDevice(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { deviceId } = action.payload;\n      if (hubId && deviceId && stateToSet[hubId] && stateToSet[hubId][deviceId]) {\n        delete stateToSet[hubId][deviceId];\n      }\n    },\n  },\n});\n\nconst { actions, reducer } = pairingsState;\n\n/**\n * Devices reducer\n * @type {function} reducer\n */\nexport { reducer as pairingsReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(addDevice({ id: 123, name: 'Unnamed device' }))\n{type : \"devices/addDevice\", payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const { setPairingDevices, deletePairingDevice } = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/pairings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "pairingsState",
    "memberof": "src/reducers/pairings.js",
    "static": true,
    "longname": "src/reducers/pairings.js~pairingsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/pairings.js",
    "importStyle": "{pairingsState}",
    "description": "Devices action creators object",
    "see": [
      " https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 16,
    "return": {
      "nullable": null,
      "types": [
        " {\n  slice : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/pairings.js",
    "static": true,
    "longname": "src/reducers/pairings.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/pairings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "setPairingDevices",
    "memberof": "src/reducers/pairings.js",
    "static": true,
    "longname": "src/reducers/pairings.js~setPairingDevices",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/pairings.js",
    "importStyle": "{setPairingDevices}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/reducers/rooms.js",
    "content": "\n// \n\n// This actionreducer uses internally https://github.com/mweststrate/immer, so it's safe to modify given state directly\nimport { createSlice } from 'redux-starter-kit';\n\n\n/**\n * Rooms action creators object\n * @see  https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md\n * @return { {\n *   slice : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const roomsState = createSlice({\n  slice: 'rooms',\n  initialState: {},\n  reducers: {\n\n    /*\n     * Reducer action of setting rooms state - sets all given rooms of given hub, keeps existing states\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setRooms(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { rooms } = action.payload;\n      const hubRooms = {};\n\n\n      Object.entries(rooms).forEach((entry) => {\n        const [id, room] = entry;\n        hubRooms[id] = { ...room };\n      });\n      stateToSet[hubId] = { ...hubRooms };\n    },\n\n\n    /*\n     * Reducer action of set room state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    setRoom(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { room } = action.payload;\n\n      if (hubId && stateToSet[hubId]) {\n        stateToSet[hubId][room.id] = { ...room };\n      }\n    },\n\n    /*\n     * Reducer action of removing room state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    removeRoom(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { roomId } = action.payload;\n      if (hubId && roomId && stateToSet[hubId] && stateToSet[hubId][roomId]) {\n        delete stateToSet[hubId][roomId];\n      }\n    },\n\n    /*\n     * Reducer action of updating room state\n     * @param {Object} state\n     * @param {Object} action\n     */\n    editRoom(state, action) {\n      const stateToSet = state;\n      const { hubId } = action.payload;\n      const { room } = action.payload;\n      if (stateToSet[hubId]) {\n        stateToSet[hubId][room.id] = { ...room };\n      }\n    },\n\n  },\n});\n\n/*\ntodos.selectors.getCompletedTodoCount = createSelector(\n  [todos.selectors.getTodos],\n  todos =>\n    todos.reduce((count, todo) => (todo.completed ? count + 1 : count), 0)\n);\n*/\n\nconst { actions, reducer } = roomsState;\n\n/**\n * Devices reducer\n * @type {function} reducer\n */\nexport { reducer as roomsReducer };\n\n// Extract and export each action creator by name\n/*\nconsole.log(addDevice({ id: 123, name: 'Unnamed device' }))\n{type : \"devices/addDevice\", payload : {id : 123, name: 'Unnamed device' }}\n*/\nexport const {\n  setRooms, addRoom, deleteRoom, removeRoom,\n} = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/rooms.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "roomsState",
    "memberof": "src/reducers/rooms.js",
    "static": true,
    "longname": "src/reducers/rooms.js~roomsState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/rooms.js",
    "importStyle": "{roomsState}",
    "description": "Rooms action creators object",
    "see": [
      " https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 18,
    "return": {
      "nullable": null,
      "types": [
        " {\n  slice : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/rooms.js",
    "static": true,
    "longname": "src/reducers/rooms.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/rooms.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "setRooms",
    "memberof": "src/reducers/rooms.js",
    "static": true,
    "longname": "src/reducers/rooms.js~setRooms",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/rooms.js",
    "importStyle": "{setRooms}",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/reducers/user.js",
    "content": "// \n\n// This actionreducer uses internally https://github.com/mweststrate/immer, so it's safe to modify given state directly\nimport { createSlice } from 'redux-starter-kit';\nimport isEmpty from 'lodash/isEmpty';\nimport { LANGUAGES, USER_STATES, ROLES } from '../user/constants';\n\n\n/**\n * User action creators object\n * @see  https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md\n * @return { {\n *   slice : string,\n *   reducer : ReducerFunction,\n *   actions : Object<string, ActionCreator},\n *   selectors : Object<string, Selector>\n *   }}\n */\nexport const userState = createSlice({\n  slice: 'user',\n  initialState: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    language: LANGUAGES.NONE,\n    authKey: '',\n    role: ROLES.ANONYMOUS,\n    eulaAccepted: false,\n    state: USER_STATES.WAITING_LANGUAGE,\n  },\n  reducers: {\n    /*\n     * Reducer action of setting user's state\n     * @param  {Object} state\n     * @param  {payload:{state:USER_STATE_TYPE}} action\n     */\n    changeState(state, action) {\n      const stateToSet = state;\n      const newState = action.payload;\n      const oldState = state.state;\n      console.log(`User state ${oldState} -> ${newState}`);\n      switch (oldState) {\n        case USER_STATES.WAITING_LANGUAGE: {\n          if (newState === USER_STATES.LANGUAGE_SET) {\n            if (!isEmpty(state.language)) {\n              stateToSet.state = USER_STATES.WAITING_LOGIN;\n            }\n          }\n          break;\n        }\n        case USER_STATES.WAITING_LOGIN: {\n          if (newState === USER_STATES.LOGIN_DONE) {\n            if (!isEmpty(state.authKey)) {\n              if (isEmpty(state.eulaAcceted)) {\n                stateToSet.state = USER_STATES.WAITING_EULA;\n              } else {\n                stateToSet.state = USER_STATES.AUTHENTICATED;\n              }\n            }\n          }\n          break;\n        }\n        case USER_STATES.WAITING_EULA: {\n          if (newState === USER_STATES.EULA_ACCEPTED) {\n            stateToSet.state = USER_STATES.AUTHENTICATED;\n          }\n          break;\n        }\n        case USER_STATES.AUTHENTICATED: {\n          if (newState === USER_STATES.LOGGED_OUT) {\n            stateToSet.state = USER_STATES.WAITING_LOGIN;\n          }\n          break;\n        }\n        default: {\n          // statements;\n          break;\n        }\n      }\n    },\n\n\n    /*\n     * Reducer action of setting user's eula to accepted\n     * @param  {Object} state\n     * @param  {payload:boolean} action\n     */\n    setEula(state, action) {\n      const stateToSet = state;\n      stateToSet.eulaAccepted = action.payload;\n    },\n\n    /*\n     * Reducer action of setting user's language\n     * @param  {Object} state\n     * @param  {payload:LANGUAGES_TYPE} action\n     */\n    setLanguage(state, action) {\n      const stateToSet = state;\n      stateToSet.language = action.payload;\n    },\n\n    /*\n     * Reducer action of setting user's authKey\n     * @param  {Object} state\n     * @param  {payload:string} action\n     */\n    setAuthKey(state, action) {\n      const stateToSet = state;\n      stateToSet.authKey = action.payload;\n    },\n\n    /*\n     * Reducer action of setting user's authKey and state\n     * @param  {Object} state\n     * @param  {payload:{state:USER_STATE_TYPE}} action\n     */\n    setAuthenticated(state, action) {\n      const stateToSet = state;\n      stateToSet.authKey = action.payload;\n      stateToSet.state = USER_STATES.KEYED;\n    }\n\n  },\n});\n\n/*\nconsole.log(user)\n{\n    actions : {\n        setState\n    },\n    reducer\n}\n*/\n\n\nconst { actions, reducer } = userState;\n\n/**\n * Hubs reducer\n * @type {function} reducer\n */\nexport { reducer as userReducer };\n\n\n// Extract and export each action creator by name\nexport const {\n  changeState, setEula, setLanguage, setAuthKey,\n} = actions;\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/reducers/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "userState",
    "memberof": "src/reducers/user.js",
    "static": true,
    "longname": "src/reducers/user.js~userState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/user.js",
    "importStyle": "{userState}",
    "description": "User action creators object",
    "see": [
      " https://github.com/reduxjs/redux-starter-kit/blob/master/docs/api/createSlice.md"
    ],
    "lineNumber": 19,
    "return": {
      "nullable": null,
      "types": [
        " {\n  slice : string,\n  reducer : ReducerFunction,\n  actions : Object<string, ActionCreator},\n  selectors : Object<string, Selector>\n  }"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "actions",
    "memberof": "src/reducers/user.js",
    "static": true,
    "longname": "src/reducers/user.js~actions",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/reducers/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "changeState",
    "memberof": "src/reducers/user.js",
    "static": true,
    "longname": "src/reducers/user.js~changeState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/reducers/user.js",
    "importStyle": "{changeState}",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/rooms/constants.js",
    "content": "// \nexport const ROOMS_FI = Object.freeze({\n  LIVINGROOM: 'Olohuone',\n  BEDROOM: 'Makuuhuone',\n  KITCHEN: 'Keittiö',\n  HALLWAY: 'Eteinen',\n  BATHROOM: 'Kylpyhuone',\n});\n\n\nexport const ROOMS_EN = Object.freeze({\n  LIVINGROOM: 'Living Room',\n  BEDROOM: 'Bedroom',\n  KITCHEN: 'Kitchen',\n  HALLWAY: 'Hallway',\n  BATHROOM: 'Bathroom',\n});\n\n\n\n\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/rooms/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "ROOMS_FI",
    "memberof": "src/rooms/constants.js",
    "static": true,
    "longname": "src/rooms/constants.js~ROOMS_FI",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/constants.js",
    "importStyle": "{ROOMS_FI}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "ROOMS_EN",
    "memberof": "src/rooms/constants.js",
    "static": true,
    "longname": "src/rooms/constants.js~ROOMS_EN",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/constants.js",
    "importStyle": "{ROOMS_EN}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/rooms/rooms.js",
    "content": "// \n// import isEmpty from 'lodash/isEmpty';\n// import isArray from 'lodash/isArray';\n// import pick from 'lodash/pick';\nimport { store } from '../store';\nimport { roomsState } from '../reducers/rooms';\nimport { hubsState } from '../reducers/hubs';\nimport { userState } from '../reducers/user';\nimport { send, COMMANDS } from '../connection/send';\nimport { HUB_CONNECTION_STATES } from '../connection/constants';\n\n\n// import { ROOMS_FI, ROOMS_EN } from './constants';\n\n/**\n * Get rooms of all selected hubs\n * @return {HUB_ROOMS_MAP_TYPE}\n */\nexport function getRooms() {\n  const stateNow = store.getState();\n  return roomsState.selectors.getRooms(stateNow);\n}\n\n/**\n * Get rooms of given hub\n * @param  {string} hubId\n * @return {ROOMS_MAP_TYPE}\n */\nexport function getHubRooms(hubId) {\n  let retVal;\n  const rooms = getRooms();\n  if (rooms && rooms[hubId]) {\n    retVal = rooms[hubId];\n  }\n  return retVal;\n}\n\nexport function sendRoomCmd(hubId, commandType, data) {\n  return new Promise((resolve, reject) => {\n    const stateNow = store.getState();\n    const user = userState.selectors.getUser(stateNow);\n\n\n    if (!user || !user.authKey) {\n      console.error('SDK sendRoomCmd error: No userKey!');\n      reject(new Error('Room command error: No userKey!'));\n      return;\n    }\n\n    const hubs = hubsState.selectors.getHubs(stateNow);\n    const hub = hubs[hubId];\n    const { hubKey } = hubs[hubId];\n    if (!hub || !hubKey) {\n      console.error('SDK sendRoomCmd error: No hubKey!');\n      reject(new Error('Room command error: No hubKey!'));\n      return;\n    }\n\n    if (hub.connectionState !== HUB_CONNECTION_STATES.LOCAL && hub.connectionState !== HUB_CONNECTION_STATES.REMOTE) {\n      console.error('SDK sendRoomCmd error: No Hub connection');\n      reject(new Error('Room command error: No hub connection'));\n      return;\n    }\n\n    const { authKey } = user;\n    if (!authKey) {\n      console.error('SDK sendRoomCmd error: No authKey!');\n      reject(new Error('Room command error: No authKey!'));\n      return;\n    }\n\n    if (commandType) {\n      send({\n        command: commandType, authKey, hubId, localUrl: hub.url, hubKey, data,\n      })\n        .then((status) => {\n          console.debug('SDK sendRoomCmd ok', status);\n\n          send({\n            command: COMMANDS.CMD_GET_ROOMS, authKey, hubId, localUrl: hub.url, hubKey,\n          })\n            .then((rooms) => {\n              console.debug('SDK sendRoomCmd refresh rooms ok', rooms);\n              store.dispatch(roomsState.actions.setRooms({ hubId, rooms }));\n              resolve(rooms);\n            })\n            .catch((error) => {\n              console.error('SDK Room command error:', error);\n              reject(error);\n            });\n        })\n        .catch((error) => {\n          console.error('SDK Room command error:', error);\n          reject(error);\n        });\n    }\n  });\n}\n\n/**\n * Add room to given hub\n * do not usr store.dispatch(roomsState.actions.addRoom(hubId, room)) as rooms are coming back in delta\n * @param  {string} hubI\n * @param  {Object} room\n * @return {Promise<Object>} rooms\n */\nexport async function addRoom(hubId, room) {\n  return new Promise((resolve, reject) => {\n    sendRoomCmd(hubId, COMMANDS.CMD_SET_ROOM, [room])\n      .then((rooms) => {\n        resolve(rooms);\n      })\n      .catch((error) => {\n        debugger;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Edit room of given hub\n * do not usr store.dispatch(roomsState.actions.editRoom(hubId, room)) as rooms are coming back in delta\n * @param  {string} hubId\n * @param  {Object} room\n * @return {Promise<Object>} rooms\n */\nexport async function editRoom(hubId, room) {\n  return new Promise((resolve, reject) => {\n    sendRoomCmd(hubId, COMMANDS.CMD_SET_ROOM, [room])\n      .then((rooms) => {\n        resolve(rooms);\n      })\n      .catch((error) => {\n        debugger;\n        reject(error);\n      });\n  });\n}\n\n/**\n * Remove given room of given hub\n * @param  {string} hubI\n * @param  {Object} room\n */\nexport async function removeRoom(hubId, room) {\n  // store.dispatch(roomsState.actions.removeRoom(hubId, room));\n  return new Promise((resolve, reject) => {\n    sendRoomCmd(hubId, COMMANDS.CMD_REMOVE_ROOM, { roomId: room.id })\n      .then((rooms) => {\n        resolve(rooms);\n      })\n      .catch((error) => {\n        if (error.response && error.response.status && error.response.status === 404) {\n          const storedRooms = getRooms();\n          resolve(storedRooms[hubId]);\n        }\n        reject(error);\n      });\n  });\n}\n\n/**\n * Rooms handler for poll delta results\n * @param  {string} hubId\n * @param  {boolean} reset\n * @param  {Object} rooms\n */\nexport function roomsDeltaHandler(hubId, reset, rooms) {\n  let oldHubRooms = {};\n  const storedRooms = getRooms();\n  if (storedRooms && storedRooms[hubId]) {\n    oldHubRooms = storedRooms[hubId];\n  }\n\n  if (reset) {\n    // If reset then set rooms as they are received\n    const stateRooms = {\n      hubId,\n      rooms,\n    };\n    store.dispatch(roomsState.actions.setRooms(stateRooms));\n  } else {\n    // Loop rooms to check could it be added or should be removed\n    Object.entries(rooms).forEach(([key, room]) => {\n      const stateRoom = {\n        hubId,\n        room,\n      };\n      if (key && room) {\n        store.dispatch(roomsState.actions.setRoom(stateRoom));\n      } else if (key && oldHubRooms[key]) {\n        store.dispatch(roomsState.actions.removeRoom(key));\n      }\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/rooms/rooms.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "getRooms",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rooms/rooms.js~getRooms",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{getRooms}",
    "description": "Get rooms of all selected hubs",
    "lineNumber": 19,
    "return": {
      "nullable": null,
      "types": [
        "HUB_ROOMS_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "getHubRooms",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rooms/rooms.js~getHubRooms",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{getHubRooms}",
    "description": "Get rooms of given hub",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ROOMS_MAP_TYPE"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "sendRoomCmd",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rooms/rooms.js~sendRoomCmd",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{sendRoomCmd}",
    "description": "",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "commandType",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "addRoom",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/rooms/rooms.js~addRoom",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{addRoom}",
    "description": "Add room to given hub\ndo not usr store.dispatch(roomsState.actions.addRoom(hubId, room)) as rooms are coming back in delta",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubI",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "rooms"
    }
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "editRoom",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/rooms/rooms.js~editRoom",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{editRoom}",
    "description": "Edit room of given hub\ndo not usr store.dispatch(roomsState.actions.editRoom(hubId, room)) as rooms are coming back in delta",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "rooms"
    }
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "removeRoom",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/rooms/rooms.js~removeRoom",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{removeRoom}",
    "description": "Remove given room of given hub",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubI",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "roomsDeltaHandler",
    "memberof": "src/rooms/rooms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rooms/rooms.js~roomsDeltaHandler",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/rooms/rooms.js",
    "importStyle": "{roomsDeltaHandler}",
    "description": "Rooms handler for poll delta results",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hubId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rooms",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/store.js",
    "content": "\nimport { configureStore } from 'redux-starter-kit';\nimport get from 'get-value';\nimport rootReducer from './reducers';\n\n\n/**\n * store as a redux state store\n * @type {Object}\n */\nexport const store = configureStore({\n  reducer: rootReducer,\n  // middleware: [...getDefaultMiddleware(), logger]\n  // default true like: devTools: process.env.NODE_ENV !== 'production'\n  // preloadedState\n  // enhancers: [reduxBatch]\n});\nconsole.log('Store Initial State: ', store.getState());\n\nfunction watchState (getState, objectPath) {\n  let currentValue = get(getState(), objectPath);\n  return function w (fn) {\n    return () => {\n      const newValue = get(getState(), objectPath);\n      if (currentValue !== newValue) {\n        const oldValue = currentValue;\n        currentValue = newValue;\n        fn(newValue, oldValue);\n      }\n    };\n  };\n}\n\n/**\n * Helper to subscribe to store changes\n * @param  {string} path - attribute path to watch changes, e.g. 'user.state'\n * @param  {function} changed - function to handle changes\n * @param  {Object} optionalStore - optional store for unit tests etc.\n */\nexport function watchChanges(path, changed, optionalStore) {\n  const selectedStore = optionalStore || store;\n  const watchFn = watchState(selectedStore.getState, path);\n  selectedStore.subscribe(watchFn(changed));\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/store.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "store",
    "memberof": "src/store.js",
    "static": true,
    "longname": "src/store.js~store",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/store.js",
    "importStyle": "{store}",
    "description": "store as a redux state store",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "watchState",
    "memberof": "src/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/store.js~watchState",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/store.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "getState",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectPath",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "watchChanges",
    "memberof": "src/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/store.js~watchChanges",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/store.js",
    "importStyle": "{watchChanges}",
    "description": "Helper to subscribe to store changes",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "attribute path to watch changes, e.g. 'user.state'"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "changed",
        "description": "function to handle changes"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "optionalStore",
        "description": "optional store for unit tests etc."
      }
    ],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/user/constants.js",
    "content": "// \n\n\n/**\n  * Enumeration of language, that could be\n  * NONE, EN_UK or FI_FI\n  * @readonly\n  * @enum {string}\n  */\nexport const LANGUAGES = Object.freeze({\n  NONE: 'none',\n  EN_EN: 'en',\n  EN_UK: 'en-UK',\n  FI_FI: 'fi-FI',\n  FI: 'fi',\n  EN: 'en',\n});\n\n\n/**\n  * Enumeration of user state, that could be\n  * WAITING_LANGUAGE, LANGUAGE_SET, WAITING_LOGIN, LOGIN_DONE, WAITING_EULA, EULA_ACCEPTED, AUTHENTICATED or LOGGED_OUT\n  * @readonly\n  * @enum {string}\n  */\nexport const USER_STATES = Object.freeze({\n  WAITING_LANGUAGE: 'wait language',\n  LANGUAGE_SET: 'language set',\n  WAITING_LOGIN: 'wait login',\n  LOGIN_DONE: 'login done',\n  WAITING_EULA: 'wait eula',\n  EULA_ACCEPTED: 'eula accepted',\n  AUTHENTICATED: 'logged in',\n  KEYED: 'key entered',\n  LOGGED_OUT: 'logged out',\n});\n\n\n/**\n  * Enumeration of ROLES, that could be\n  * ADMIN, USER, GUEST or ANONYMOUS\n  * @readonly\n  * @enum {string}\n  */\nexport const ROLES = Object.freeze({\n  ADMIN: 32,\n  USER: 8,\n  GUEST: 2,\n  ANONYMOUS: 1,\n});\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/user/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "LANGUAGES",
    "memberof": "src/user/constants.js",
    "static": true,
    "longname": "src/user/constants.js~LANGUAGES",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/constants.js",
    "importStyle": "{LANGUAGES}",
    "description": "Enumeration of language, that could be\nNONE, EN_UK or FI_FI",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "USER_STATES",
    "memberof": "src/user/constants.js",
    "static": true,
    "longname": "src/user/constants.js~USER_STATES",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/constants.js",
    "importStyle": "{USER_STATES}",
    "description": "Enumeration of user state, that could be\nWAITING_LANGUAGE, LANGUAGE_SET, WAITING_LOGIN, LOGIN_DONE, WAITING_EULA, EULA_ACCEPTED, AUTHENTICATED or LOGGED_OUT",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "ROLES",
    "memberof": "src/user/constants.js",
    "static": true,
    "longname": "src/user/constants.js~ROLES",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/constants.js",
    "importStyle": "{ROLES}",
    "description": "Enumeration of ROLES, that could be\nADMIN, USER, GUEST or ANONYMOUS",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/user/user.js",
    "content": "// \nimport isString from 'lodash/isString';\n\n\nimport { send, COMMANDS } from '../connection/send';\nimport { store } from '../store';\nimport { userState } from '../reducers/user';\n\nimport { USER_STATES, LANGUAGES } from './constants';\n\n\n/*\n * Helper to get user\n * @return {Object} user\n */\nfunction storedUser() {\n  return userState.selectors.getUser(store.getState());\n}\n\n\n/**\n * User action to change current language\n * @param {LANGUAGES_TYPE} newLanguage - language to be changed to\n * @return {Boolean} true if language was set\n */\nexport function changeLanguage(newLanguage) {\n  let retVel = false;\n  if (Object.values(LANGUAGES).indexOf(newLanguage) > -1) {\n    store.dispatch(userState.actions.setLanguage(newLanguage));\n    retVel = true;\n    if (storedUser().state === USER_STATES.WAITING_LANGUAGE) {\n      store.dispatch(userState.actions.changeState(USER_STATES.LANGUAGE_SET));\n    }\n  }\n  return retVel;\n}\n\n/**\n * User action to accept EULA\n * @return {Boolean} true if EULA was accepted\n */\nexport function acceptEula() {\n  store.dispatch(userState.actions.setEula(true));\n  if (storedUser().state === USER_STATES.WAITING_EULA) {\n    store.dispatch(userState.actions.changeState(USER_STATES.EULA_ACCEPTED));\n  }\n  return true;\n}\n\n/**\n * User action to log in\n * @param {string} email - email address\n * @param {password} password  - fixed password\n * @return { Promise}\n */\nexport function doPwLogin(email, password) {\n  return new Promise((resolve, reject) => {\n    send({ command: COMMANDS.USER_LOGIN, data: { email, password } })\n      .then((response) => {\n        if (response && isString(response)) {\n          store.dispatch(userState.actions.setAuthKey(response));\n          if (storedUser().state === USER_STATES.WAITING_LOGIN) {\n            store.dispatch(userState.actions.changeState(USER_STATES.LOGIN_DONE));\n          }\n        }\n        resolve(response);\n      })\n      .catch((error) => {\n        console.debug('doPwLogin error', error);\n        reject(new Error('Login failure'));\n      });\n  });\n}\n\n/**\n * User action to set user token\n * @param {string} userToken - Cozify user/cloud token\n * @return {Object} user\n */\nexport function setAuthenticated(userToken) {\n  store.dispatch(userState.actions.setAuthenticated(userToken));\n  return storedUser();\n}\n\n/**\n * Get state of user state-machine\n * @return {USER_STATE_TYPE}\n */\nexport function getUserState() {\n  return storedUser().state;\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/user/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "storedUser",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~storedUser",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "changeLanguage",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~changeLanguage",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{changeLanguage}",
    "description": "User action to change current language",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "LANGUAGES_TYPE"
        ],
        "spread": false,
        "optional": false,
        "name": "newLanguage",
        "description": "language to be changed to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if language was set"
    }
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "acceptEula",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~acceptEula",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{acceptEula}",
    "description": "User action to accept EULA",
    "lineNumber": 42,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if EULA was accepted"
    },
    "params": []
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "doPwLogin",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~doPwLogin",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{doPwLogin}",
    "description": "User action to log in",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "email address"
      },
      {
        "nullable": null,
        "types": [
          "password"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "fixed password"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "setAuthenticated",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~setAuthenticated",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{setAuthenticated}",
    "description": "User action to set user token",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "Cozify user/cloud token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "user"
    }
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "getUserState",
    "memberof": "src/user/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/user/user.js~getUserState",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/user/user.js",
    "importStyle": "{getUserState}",
    "description": "Get state of user state-machine",
    "lineNumber": 89,
    "return": {
      "nullable": null,
      "types": [
        "USER_STATE_TYPE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "src/utils.js",
    "content": "// \n\n/**\n * Helper to check if run environment is Node\n * @type {Boolean}\n */\nlet isNodeInUse = false;\n\nif (typeof process === 'object') {\n  if (typeof process.versions === 'object') {\n    if (typeof process.versions.node !== 'undefined') {\n      isNodeInUse = true;\n      console.log('Running in node.js');\n    } else {\n      console.log('Running in browser');\n    }\n  }\n}\n\nexport const isNode = isNodeInUse;\n\n/**\n * Helper method to Base64 decode\n * @param  {string} encoded - string to be decoded\n * @return {string}  - decoded string\n */\nexport function urlBase64Decode(encoded) {\n  const str = encoded.replace(/-/g, '+').replace(/_/g, '/');\n  let output = str;\n  switch (output.length % 4) {\n    case 0:\n    case 2:\n      output += '==';\n      break;\n    case 3:\n      output += '=';\n      break;\n    default:\n      throw new Error('Illegal base64url string!');\n  }\n  let retVal = '';\n\n  let atob = (a) => { console.error('Invalid atob for string ', a); return 'invalid atob'; };\n  if (!isNodeInUse) {\n    atob = window.atob;\n  } else {\n    const nodeAtob = (a) => {\n      const binVal = Buffer.from(a, 'base64').toString('binary');\n      return binVal;\n    };\n    atob = nodeAtob;\n  }\n\n  try {\n    retVal = atob(str);\n  } catch (error) {\n    try {\n      retVal = atob(output);\n    } catch (error2) {\n      console.error('urlBase64Decode: trying atob failed');\n    }\n  }\n  return retVal;\n}\n",
    "static": true,
    "longname": "/Users/vesa/code/JS-SDK/docs/src/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "name": "isNodeInUse",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~isNodeInUse",
    "access": "public",
    "export": false,
    "importPath": "cozify-sdk/src/utils.js",
    "importStyle": null,
    "description": "Helper to check if run environment is Node",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "isNode",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~isNode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/utils.js",
    "importStyle": "{isNode}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "urlBase64Decode",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~urlBase64Decode",
    "access": "public",
    "export": true,
    "importPath": "cozify-sdk/src/utils.js",
    "importStyle": "{urlBase64Decode}",
    "description": "Helper method to Base64 decode",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encoded",
        "description": "string to be decoded"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "decoded string"
    }
  },
  {
    "kind": "index",
    "content": "# cozify-sdk\n\n> JavaScript SDK for Cozify REST API\n\n\n### Usage - install using npm\n```\nnpm install cozify-sdk\n```\n\n#### Browsers (should use iife-version)\n```\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<script type=\"text/javascript\" src=\"../dist/sdk-browser.js\"></script>\n<script type=\"text/javascript\">\n      let LANGUAGES = CozifySDK.LANGUAGES;\n      let USER_STATES = CozifySDK.USER_STATES;\n      console.info(`Initial user state ${CozifySDK.getUserState()}`);\n      CozifySDK.changeLanguage(LANGUAGES.FI_FI);\n      ... more in /browser-example\n\n```\n\n#### React-projects (should use es-version)\n```\nimport { LANGUAGES, USER_STATES, getUserState } from 'cozify-sdk'\nconsole.info(`Initial user state ${getUserState()}`);\nCozifySDK.changeLanguage(LANGUAGES.FI_FI);\n\n... more in /example\n\n```\n\n#### Node-projects (should use cjs-version)\n```\nconst CozifySDK = require('../dist/sdk-node.js');\nlet LANGUAGES = CozifySDK.LANGUAGES;\nlet USER_STATES = CozifySDK.USER_STATES;\nconsole.info(`Initial user state ${CozifySDK.getUserState()}`);\nCozifySDK.changeLanguage(LANGUAGES.FI_FI);\n\n... more in /node-example\n\n```\n\n## License\n\nMIT © [cozify/JS-SDK]\n",
    "longname": "/Users/vesa/code/JS-SDK/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"cozify-sdk\",\n  \"version\": \"1.0.18\",\n  \"description\": \"JavaScript SDK for Cozify REST API\",\n  \"author\": \"tech-admin\",\n  \"license\": \"MIT\",\n  \"repository\": \"cozify/JS-SDK\",\n  \"node\": \"dist/sdk-node.js\",\n  \"iife\": \"dist/sdk-browser.js\",\n  \"module\": \"dist/index.es.js\",\n  \"jsnext:main\": \"dist/index.es.js\",\n  \"engines\": {\n    \"node\": \">=8\",\n    \"npm\": \">=5\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"start\": \"rollup -c -w\",\n    \"test\": \"jest src\",\n    \"test:watch\": \"jest src --watch --notify\",\n    \"cover\": \"jest src --coverage\",\n    \"flow\": \"flow\",\n    \"flow:check\": \"flow check ./src/\",\n    \"flow:status\": \"flow status\",\n    \"flow:coverage\": \"flow-coverage-report --config .flowcoverage.json\",\n    \"flow:deps\": \"flow-typed install\",\n    \"docs\": \"./node_modules/.bin/flow-remove-types src/ -d docs/src/ -p | ./node_modules/.bin/esdoc | rm -rf docs/src/\",\n    \"lint\": \"eslint src\",\n    \"lint:fix\": \"eslint src --fix\",\n    \"deploy\": \"gh-pages -d example/build\",\n    \"prepare\": \"npm run build\",\n    \"predeploy\": \"cd example && npm install && npm run build\",\n    \"precommit\": \"flow src && npm lint && npm test\",\n    \"prepublishOnly\": \"npm test && npm run build\"\n  },\n  \"peerDependencies\": {},\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.2.3\",\n    \"@babel/core\": \"^7.4.0\",\n    \"@babel/node\": \"^7.2.2\",\n    \"@babel/plugin-external-helpers\": \"^7.2.0\",\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.4.0\",\n    \"@babel/plugin-transform-flow-strip-types\": \"^7.4.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.4.0\",\n    \"@babel/preset-env\": \"^7.4.2\",\n    \"@babel/preset-flow\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.4.2\",\n    \"acorn\": \"^6.1.1\",\n    \"babel-eslint\": \"^10.0.3\",\n    \"babel-plugin-lodash\": \"^3.3.4\",\n    \"deep-freeze\": \"0.0.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-flow-type-plugin\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^6.1.0\",\n    \"eslint-config-airbnb-base\": \"^14.0.0\",\n    \"eslint-config-standard\": \"^12.0.0\",\n    \"eslint-plugin-flowtype\": \"^3.4.2\",\n    \"eslint-plugin-import\": \"^2.18.2\",\n    \"eslint-plugin-jest\": \"^22.4.1\",\n    \"eslint-plugin-json\": \"^1.4.0\",\n    \"eslint-plugin-node\": \"^8.0.1\",\n    \"eslint-plugin-promise\": \"^4.0.1\",\n    \"eslint-plugin-react\": \"^7.14.3\",\n    \"eslint-plugin-standard\": \"^4.0.0\",\n    \"flow-bin\": \"^0.95.1\",\n    \"flow-typed\": \"^2.5.1\",\n    \"jest\": \"^24.5.0\",\n    \"rollup\": \"^1.8.0\",\n    \"rollup-all\": \"^1.5.2\",\n    \"rollup-jest\": \"0.0.2\",\n    \"rollup-plugin-babel\": \"^4.3.2\",\n    \"rollup-plugin-commonjs\": \"^9.2.2\",\n    \"rollup-plugin-cpy\": \"^1.1.0\",\n    \"rollup-plugin-flow\": \"^1.1.1\",\n    \"rollup-plugin-flow-entry\": \"^0.3.1\",\n    \"rollup-plugin-json\": \"^4.0.0\",\n    \"rollup-plugin-node-builtins\": \"^2.1.2\",\n    \"rollup-plugin-node-resolve\": \"^4.0.1\",\n    \"rollup-plugin-npm\": \"^2.0.0\",\n    \"rollup-plugin-replace\": \"^2.1.1\",\n    \"rollup-plugin-uglify\": \"^6.0.2\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"dependencies\": {\n    \"axios\": \"^0.18.0\",\n    \"axios-retry\": \"^3.1.2\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"get-value\": \"^3.0.1\",\n    \"is-retry-allowed\": \"^1.1.0\",\n    \"lodash\": \"^4.17.14\",\n    \"redux\": \"^4.0.1\",\n    \"redux-devtools-extension\": \"^2.13.8\",\n    \"redux-starter-kit\": \"^0.4.3\"\n  }\n}\n",
    "longname": "/Users/vesa/code/JS-SDK/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]